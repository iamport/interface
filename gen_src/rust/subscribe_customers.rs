// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `v1/subscribe_customers/subscribe_customers.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct CustomerBillingKey {
    // message fields
    pub card_code: ::std::string::String,
    pub card_name: ::std::string::String,
    pub card_number: ::std::string::String,
    pub card_type: i32,
    pub customer_addr: ::std::string::String,
    pub customer_email: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub customer_postcode: ::std::string::String,
    pub customer_tel: ::std::string::String,
    pub customer_uid: ::std::string::String,
    pub inserted: i32,
    pub pg_id: ::std::string::String,
    pub pg_provider: ::std::string::String,
    pub updated: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CustomerBillingKey {
    fn default() -> &'a CustomerBillingKey {
        <CustomerBillingKey as ::protobuf::Message>::default_instance()
    }
}

impl CustomerBillingKey {
    pub fn new() -> CustomerBillingKey {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_code",
            |m: &CustomerBillingKey| { &m.card_code },
            |m: &mut CustomerBillingKey| { &mut m.card_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_name",
            |m: &CustomerBillingKey| { &m.card_name },
            |m: &mut CustomerBillingKey| { &mut m.card_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_number",
            |m: &CustomerBillingKey| { &m.card_number },
            |m: &mut CustomerBillingKey| { &mut m.card_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_type",
            |m: &CustomerBillingKey| { &m.card_type },
            |m: &mut CustomerBillingKey| { &mut m.card_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_addr",
            |m: &CustomerBillingKey| { &m.customer_addr },
            |m: &mut CustomerBillingKey| { &mut m.customer_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_email",
            |m: &CustomerBillingKey| { &m.customer_email },
            |m: &mut CustomerBillingKey| { &mut m.customer_email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_name",
            |m: &CustomerBillingKey| { &m.customer_name },
            |m: &mut CustomerBillingKey| { &mut m.customer_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_postcode",
            |m: &CustomerBillingKey| { &m.customer_postcode },
            |m: &mut CustomerBillingKey| { &mut m.customer_postcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_tel",
            |m: &CustomerBillingKey| { &m.customer_tel },
            |m: &mut CustomerBillingKey| { &mut m.customer_tel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_uid",
            |m: &CustomerBillingKey| { &m.customer_uid },
            |m: &mut CustomerBillingKey| { &mut m.customer_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "inserted",
            |m: &CustomerBillingKey| { &m.inserted },
            |m: &mut CustomerBillingKey| { &mut m.inserted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pg_id",
            |m: &CustomerBillingKey| { &m.pg_id },
            |m: &mut CustomerBillingKey| { &mut m.pg_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pg_provider",
            |m: &CustomerBillingKey| { &m.pg_provider },
            |m: &mut CustomerBillingKey| { &mut m.pg_provider },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "updated",
            |m: &CustomerBillingKey| { &m.updated },
            |m: &mut CustomerBillingKey| { &mut m.updated },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CustomerBillingKey>(
            "CustomerBillingKey",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for CustomerBillingKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_code = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_name = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_number = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_type = is.read_int32()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_addr = is.read_string()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_email = is.read_string()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_name = is.read_string()?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_postcode = is.read_string()?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_tel = is.read_string()?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_uid = is.read_string()?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inserted = is.read_int32()?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pg_id = is.read_string()?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pg_provider = is.read_string()?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.updated = is.read_int32()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_code);
        }
        if !self.card_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.card_name);
        }
        if !self.card_number.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.card_number);
        }
        if self.card_type != 0 {
            my_size += ::protobuf::rt::value_size(4, self.card_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.customer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.customer_addr);
        }
        if !self.customer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.customer_email);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer_name);
        }
        if !self.customer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.customer_postcode);
        }
        if !self.customer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.customer_tel);
        }
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.customer_uid);
        }
        if self.inserted != 0 {
            my_size += ::protobuf::rt::value_size(11, self.inserted, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.pg_id.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.pg_id);
        }
        if !self.pg_provider.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.pg_provider);
        }
        if self.updated != 0 {
            my_size += ::protobuf::rt::value_size(14, self.updated, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_code.is_empty() {
            os.write_string(1, &self.card_code)?;
        }
        if !self.card_name.is_empty() {
            os.write_string(2, &self.card_name)?;
        }
        if !self.card_number.is_empty() {
            os.write_string(3, &self.card_number)?;
        }
        if self.card_type != 0 {
            os.write_int32(4, self.card_type)?;
        }
        if !self.customer_addr.is_empty() {
            os.write_string(5, &self.customer_addr)?;
        }
        if !self.customer_email.is_empty() {
            os.write_string(6, &self.customer_email)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(7, &self.customer_name)?;
        }
        if !self.customer_postcode.is_empty() {
            os.write_string(8, &self.customer_postcode)?;
        }
        if !self.customer_tel.is_empty() {
            os.write_string(9, &self.customer_tel)?;
        }
        if !self.customer_uid.is_empty() {
            os.write_string(10, &self.customer_uid)?;
        }
        if self.inserted != 0 {
            os.write_int32(11, self.inserted)?;
        }
        if !self.pg_id.is_empty() {
            os.write_string(12, &self.pg_id)?;
        }
        if !self.pg_provider.is_empty() {
            os.write_string(13, &self.pg_provider)?;
        }
        if self.updated != 0 {
            os.write_int32(14, self.updated)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> CustomerBillingKey {
        CustomerBillingKey::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static CustomerBillingKey {
        static instance: CustomerBillingKey = CustomerBillingKey {
            card_code: ::std::string::String::new(),
            card_name: ::std::string::String::new(),
            card_number: ::std::string::String::new(),
            card_type: 0,
            customer_addr: ::std::string::String::new(),
            customer_email: ::std::string::String::new(),
            customer_name: ::std::string::String::new(),
            customer_postcode: ::std::string::String::new(),
            customer_tel: ::std::string::String::new(),
            customer_uid: ::std::string::String::new(),
            inserted: 0,
            pg_id: ::std::string::String::new(),
            pg_provider: ::std::string::String::new(),
            updated: 0,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for CustomerBillingKey {
    fn clear(&mut self) {
        self.card_code.clear();
        self.card_name.clear();
        self.card_number.clear();
        self.card_type = 0;
        self.customer_addr.clear();
        self.customer_email.clear();
        self.customer_name.clear();
        self.customer_postcode.clear();
        self.customer_tel.clear();
        self.customer_uid.clear();
        self.inserted = 0;
        self.pg_id.clear();
        self.pg_provider.clear();
        self.updated = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CustomerBillingKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomerBillingKey {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMultipleCustomerBillingKeyRequest {
    // message fields
    pub customer_uid: ::std::vec::Vec<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMultipleCustomerBillingKeyRequest {
    fn default() -> &'a GetMultipleCustomerBillingKeyRequest {
        <GetMultipleCustomerBillingKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMultipleCustomerBillingKeyRequest {
    pub fn new() -> GetMultipleCustomerBillingKeyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "customer_uid",
            |m: &GetMultipleCustomerBillingKeyRequest| { &m.customer_uid },
            |m: &mut GetMultipleCustomerBillingKeyRequest| { &mut m.customer_uid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetMultipleCustomerBillingKeyRequest>(
            "GetMultipleCustomerBillingKeyRequest",
            1,
            fields,
        )
    }
}

impl ::protobuf::Message for GetMultipleCustomerBillingKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.customer_uid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.customer_uid {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.customer_uid {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> GetMultipleCustomerBillingKeyRequest {
        GetMultipleCustomerBillingKeyRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 1)
    }

    fn default_instance() -> &'static GetMultipleCustomerBillingKeyRequest {
        static instance: GetMultipleCustomerBillingKeyRequest = GetMultipleCustomerBillingKeyRequest {
            customer_uid: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for GetMultipleCustomerBillingKeyRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMultipleCustomerBillingKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMultipleCustomerBillingKeyRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMultipleCustomerBillingKeyResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::std::vec::Vec<CustomerBillingKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMultipleCustomerBillingKeyResponse {
    fn default() -> &'a GetMultipleCustomerBillingKeyResponse {
        <GetMultipleCustomerBillingKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetMultipleCustomerBillingKeyResponse {
    pub fn new() -> GetMultipleCustomerBillingKeyResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &GetMultipleCustomerBillingKeyResponse| { &m.code },
            |m: &mut GetMultipleCustomerBillingKeyResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &GetMultipleCustomerBillingKeyResponse| { &m.message },
            |m: &mut GetMultipleCustomerBillingKeyResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "response",
            |m: &GetMultipleCustomerBillingKeyResponse| { &m.response },
            |m: &mut GetMultipleCustomerBillingKeyResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetMultipleCustomerBillingKeyResponse>(
            "GetMultipleCustomerBillingKeyResponse",
            2,
            fields,
        )
    }
}

impl ::protobuf::Message for GetMultipleCustomerBillingKeyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        for value in &self.response {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        for v in &self.response {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> GetMultipleCustomerBillingKeyResponse {
        GetMultipleCustomerBillingKeyResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 2)
    }

    fn default_instance() -> &'static GetMultipleCustomerBillingKeyResponse {
        static instance: GetMultipleCustomerBillingKeyResponse = GetMultipleCustomerBillingKeyResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for GetMultipleCustomerBillingKeyResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMultipleCustomerBillingKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMultipleCustomerBillingKeyResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteCustomerBillingKeyRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    pub reason: ::std::string::String,
    pub requester: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteCustomerBillingKeyRequest {
    fn default() -> &'a DeleteCustomerBillingKeyRequest {
        <DeleteCustomerBillingKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteCustomerBillingKeyRequest {
    pub fn new() -> DeleteCustomerBillingKeyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_uid",
            |m: &DeleteCustomerBillingKeyRequest| { &m.customer_uid },
            |m: &mut DeleteCustomerBillingKeyRequest| { &mut m.customer_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reason",
            |m: &DeleteCustomerBillingKeyRequest| { &m.reason },
            |m: &mut DeleteCustomerBillingKeyRequest| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "requester",
            |m: &DeleteCustomerBillingKeyRequest| { &m.requester },
            |m: &mut DeleteCustomerBillingKeyRequest| { &mut m.requester },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteCustomerBillingKeyRequest>(
            "DeleteCustomerBillingKeyRequest",
            3,
            fields,
        )
    }
}

impl ::protobuf::Message for DeleteCustomerBillingKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_uid = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.reason = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.requester = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        if !self.reason.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.reason);
        }
        if !self.requester.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.requester);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        if !self.reason.is_empty() {
            os.write_string(2, &self.reason)?;
        }
        if !self.requester.is_empty() {
            os.write_string(3, &self.requester)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> DeleteCustomerBillingKeyRequest {
        DeleteCustomerBillingKeyRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 3)
    }

    fn default_instance() -> &'static DeleteCustomerBillingKeyRequest {
        static instance: DeleteCustomerBillingKeyRequest = DeleteCustomerBillingKeyRequest {
            customer_uid: ::std::string::String::new(),
            reason: ::std::string::String::new(),
            requester: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for DeleteCustomerBillingKeyRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.reason.clear();
        self.requester.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteCustomerBillingKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteCustomerBillingKeyRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteCustomerBillingKeyResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<CustomerBillingKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteCustomerBillingKeyResponse {
    fn default() -> &'a DeleteCustomerBillingKeyResponse {
        <DeleteCustomerBillingKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteCustomerBillingKeyResponse {
    pub fn new() -> DeleteCustomerBillingKeyResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &DeleteCustomerBillingKeyResponse| { &m.code },
            |m: &mut DeleteCustomerBillingKeyResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &DeleteCustomerBillingKeyResponse| { &m.message },
            |m: &mut DeleteCustomerBillingKeyResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CustomerBillingKey>(
            "response",
            |m: &DeleteCustomerBillingKeyResponse| { &m.response },
            |m: &mut DeleteCustomerBillingKeyResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteCustomerBillingKeyResponse>(
            "DeleteCustomerBillingKeyResponse",
            4,
            fields,
        )
    }
}

impl ::protobuf::Message for DeleteCustomerBillingKeyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> DeleteCustomerBillingKeyResponse {
        DeleteCustomerBillingKeyResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 4)
    }

    fn default_instance() -> &'static DeleteCustomerBillingKeyResponse {
        static instance: DeleteCustomerBillingKeyResponse = DeleteCustomerBillingKeyResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for DeleteCustomerBillingKeyResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteCustomerBillingKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteCustomerBillingKeyResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct GetCustomerBillingKeyRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetCustomerBillingKeyRequest {
    fn default() -> &'a GetCustomerBillingKeyRequest {
        <GetCustomerBillingKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetCustomerBillingKeyRequest {
    pub fn new() -> GetCustomerBillingKeyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_uid",
            |m: &GetCustomerBillingKeyRequest| { &m.customer_uid },
            |m: &mut GetCustomerBillingKeyRequest| { &mut m.customer_uid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetCustomerBillingKeyRequest>(
            "GetCustomerBillingKeyRequest",
            5,
            fields,
        )
    }
}

impl ::protobuf::Message for GetCustomerBillingKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_uid = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> GetCustomerBillingKeyRequest {
        GetCustomerBillingKeyRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 5)
    }

    fn default_instance() -> &'static GetCustomerBillingKeyRequest {
        static instance: GetCustomerBillingKeyRequest = GetCustomerBillingKeyRequest {
            customer_uid: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for GetCustomerBillingKeyRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetCustomerBillingKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCustomerBillingKeyRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct GetCustomerBillingKeyResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<CustomerBillingKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetCustomerBillingKeyResponse {
    fn default() -> &'a GetCustomerBillingKeyResponse {
        <GetCustomerBillingKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetCustomerBillingKeyResponse {
    pub fn new() -> GetCustomerBillingKeyResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &GetCustomerBillingKeyResponse| { &m.code },
            |m: &mut GetCustomerBillingKeyResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &GetCustomerBillingKeyResponse| { &m.message },
            |m: &mut GetCustomerBillingKeyResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CustomerBillingKey>(
            "response",
            |m: &GetCustomerBillingKeyResponse| { &m.response },
            |m: &mut GetCustomerBillingKeyResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetCustomerBillingKeyResponse>(
            "GetCustomerBillingKeyResponse",
            6,
            fields,
        )
    }
}

impl ::protobuf::Message for GetCustomerBillingKeyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> GetCustomerBillingKeyResponse {
        GetCustomerBillingKeyResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 6)
    }

    fn default_instance() -> &'static GetCustomerBillingKeyResponse {
        static instance: GetCustomerBillingKeyResponse = GetCustomerBillingKeyResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for GetCustomerBillingKeyResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetCustomerBillingKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCustomerBillingKeyResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct InsertCustomerBillingKeyRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    pub pg: ::std::string::String,
    pub card_number: ::std::string::String,
    pub expiry: ::std::string::String,
    pub birth: ::std::string::String,
    pub pwd_2digit: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub customer_tel: ::std::string::String,
    pub customer_email: ::std::string::String,
    pub customer_addr: ::std::string::String,
    pub customer_postcode: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a InsertCustomerBillingKeyRequest {
    fn default() -> &'a InsertCustomerBillingKeyRequest {
        <InsertCustomerBillingKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl InsertCustomerBillingKeyRequest {
    pub fn new() -> InsertCustomerBillingKeyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_uid",
            |m: &InsertCustomerBillingKeyRequest| { &m.customer_uid },
            |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pg",
            |m: &InsertCustomerBillingKeyRequest| { &m.pg },
            |m: &mut InsertCustomerBillingKeyRequest| { &mut m.pg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_number",
            |m: &InsertCustomerBillingKeyRequest| { &m.card_number },
            |m: &mut InsertCustomerBillingKeyRequest| { &mut m.card_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expiry",
            |m: &InsertCustomerBillingKeyRequest| { &m.expiry },
            |m: &mut InsertCustomerBillingKeyRequest| { &mut m.expiry },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "birth",
            |m: &InsertCustomerBillingKeyRequest| { &m.birth },
            |m: &mut InsertCustomerBillingKeyRequest| { &mut m.birth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pwd_2digit",
            |m: &InsertCustomerBillingKeyRequest| { &m.pwd_2digit },
            |m: &mut InsertCustomerBillingKeyRequest| { &mut m.pwd_2digit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_name",
            |m: &InsertCustomerBillingKeyRequest| { &m.customer_name },
            |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_tel",
            |m: &InsertCustomerBillingKeyRequest| { &m.customer_tel },
            |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_tel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_email",
            |m: &InsertCustomerBillingKeyRequest| { &m.customer_email },
            |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_addr",
            |m: &InsertCustomerBillingKeyRequest| { &m.customer_addr },
            |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_postcode",
            |m: &InsertCustomerBillingKeyRequest| { &m.customer_postcode },
            |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_postcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InsertCustomerBillingKeyRequest>(
            "InsertCustomerBillingKeyRequest",
            7,
            fields,
        )
    }
}

impl ::protobuf::Message for InsertCustomerBillingKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_uid = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pg = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_number = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expiry = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.birth = is.read_string()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pwd_2digit = is.read_string()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_name = is.read_string()?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_tel = is.read_string()?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_email = is.read_string()?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_addr = is.read_string()?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_postcode = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        if !self.pg.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pg);
        }
        if !self.card_number.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.card_number);
        }
        if !self.expiry.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.expiry);
        }
        if !self.birth.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.birth);
        }
        if !self.pwd_2digit.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.pwd_2digit);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer_name);
        }
        if !self.customer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.customer_tel);
        }
        if !self.customer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.customer_email);
        }
        if !self.customer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.customer_addr);
        }
        if !self.customer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.customer_postcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        if !self.pg.is_empty() {
            os.write_string(2, &self.pg)?;
        }
        if !self.card_number.is_empty() {
            os.write_string(3, &self.card_number)?;
        }
        if !self.expiry.is_empty() {
            os.write_string(4, &self.expiry)?;
        }
        if !self.birth.is_empty() {
            os.write_string(5, &self.birth)?;
        }
        if !self.pwd_2digit.is_empty() {
            os.write_string(6, &self.pwd_2digit)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(7, &self.customer_name)?;
        }
        if !self.customer_tel.is_empty() {
            os.write_string(8, &self.customer_tel)?;
        }
        if !self.customer_email.is_empty() {
            os.write_string(9, &self.customer_email)?;
        }
        if !self.customer_addr.is_empty() {
            os.write_string(10, &self.customer_addr)?;
        }
        if !self.customer_postcode.is_empty() {
            os.write_string(11, &self.customer_postcode)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> InsertCustomerBillingKeyRequest {
        InsertCustomerBillingKeyRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 7)
    }

    fn default_instance() -> &'static InsertCustomerBillingKeyRequest {
        static instance: InsertCustomerBillingKeyRequest = InsertCustomerBillingKeyRequest {
            customer_uid: ::std::string::String::new(),
            pg: ::std::string::String::new(),
            card_number: ::std::string::String::new(),
            expiry: ::std::string::String::new(),
            birth: ::std::string::String::new(),
            pwd_2digit: ::std::string::String::new(),
            customer_name: ::std::string::String::new(),
            customer_tel: ::std::string::String::new(),
            customer_email: ::std::string::String::new(),
            customer_addr: ::std::string::String::new(),
            customer_postcode: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for InsertCustomerBillingKeyRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.pg.clear();
        self.card_number.clear();
        self.expiry.clear();
        self.birth.clear();
        self.pwd_2digit.clear();
        self.customer_name.clear();
        self.customer_tel.clear();
        self.customer_email.clear();
        self.customer_addr.clear();
        self.customer_postcode.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InsertCustomerBillingKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InsertCustomerBillingKeyRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct InsertCustomerBillingKeyResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<CustomerBillingKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a InsertCustomerBillingKeyResponse {
    fn default() -> &'a InsertCustomerBillingKeyResponse {
        <InsertCustomerBillingKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl InsertCustomerBillingKeyResponse {
    pub fn new() -> InsertCustomerBillingKeyResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &InsertCustomerBillingKeyResponse| { &m.code },
            |m: &mut InsertCustomerBillingKeyResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &InsertCustomerBillingKeyResponse| { &m.message },
            |m: &mut InsertCustomerBillingKeyResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CustomerBillingKey>(
            "response",
            |m: &InsertCustomerBillingKeyResponse| { &m.response },
            |m: &mut InsertCustomerBillingKeyResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InsertCustomerBillingKeyResponse>(
            "InsertCustomerBillingKeyResponse",
            8,
            fields,
        )
    }
}

impl ::protobuf::Message for InsertCustomerBillingKeyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> InsertCustomerBillingKeyResponse {
        InsertCustomerBillingKeyResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 8)
    }

    fn default_instance() -> &'static InsertCustomerBillingKeyResponse {
        static instance: InsertCustomerBillingKeyResponse = InsertCustomerBillingKeyResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for InsertCustomerBillingKeyResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InsertCustomerBillingKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InsertCustomerBillingKeyResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPaidByBillingKeyListRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    pub page: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPaidByBillingKeyListRequest {
    fn default() -> &'a GetPaidByBillingKeyListRequest {
        <GetPaidByBillingKeyListRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPaidByBillingKeyListRequest {
    pub fn new() -> GetPaidByBillingKeyListRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_uid",
            |m: &GetPaidByBillingKeyListRequest| { &m.customer_uid },
            |m: &mut GetPaidByBillingKeyListRequest| { &mut m.customer_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "page",
            |m: &GetPaidByBillingKeyListRequest| { &m.page },
            |m: &mut GetPaidByBillingKeyListRequest| { &mut m.page },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPaidByBillingKeyListRequest>(
            "GetPaidByBillingKeyListRequest",
            9,
            fields,
        )
    }
}

impl ::protobuf::Message for GetPaidByBillingKeyListRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_uid = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.page = is.read_int32()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        if self.page != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        if self.page != 0 {
            os.write_int32(2, self.page)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> GetPaidByBillingKeyListRequest {
        GetPaidByBillingKeyListRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 9)
    }

    fn default_instance() -> &'static GetPaidByBillingKeyListRequest {
        static instance: GetPaidByBillingKeyListRequest = GetPaidByBillingKeyListRequest {
            customer_uid: ::std::string::String::new(),
            page: 0,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for GetPaidByBillingKeyListRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.page = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPaidByBillingKeyListRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaidByBillingKeyListRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct NestedGetPaidByBillingKeyListData {
    // message fields
    pub total: i32,
    pub previous: i32,
    pub next: i32,
    pub list: ::std::vec::Vec<super::payment::Payment>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a NestedGetPaidByBillingKeyListData {
    fn default() -> &'a NestedGetPaidByBillingKeyListData {
        <NestedGetPaidByBillingKeyListData as ::protobuf::Message>::default_instance()
    }
}

impl NestedGetPaidByBillingKeyListData {
    pub fn new() -> NestedGetPaidByBillingKeyListData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total",
            |m: &NestedGetPaidByBillingKeyListData| { &m.total },
            |m: &mut NestedGetPaidByBillingKeyListData| { &mut m.total },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "previous",
            |m: &NestedGetPaidByBillingKeyListData| { &m.previous },
            |m: &mut NestedGetPaidByBillingKeyListData| { &mut m.previous },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next",
            |m: &NestedGetPaidByBillingKeyListData| { &m.next },
            |m: &mut NestedGetPaidByBillingKeyListData| { &mut m.next },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "list",
            |m: &NestedGetPaidByBillingKeyListData| { &m.list },
            |m: &mut NestedGetPaidByBillingKeyListData| { &mut m.list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NestedGetPaidByBillingKeyListData>(
            "NestedGetPaidByBillingKeyListData",
            10,
            fields,
        )
    }
}

impl ::protobuf::Message for NestedGetPaidByBillingKeyListData {
    fn is_initialized(&self) -> bool {
        for v in &self.list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.total = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.previous = is.read_int32()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.next = is.read_int32()?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.previous != 0 {
            my_size += ::protobuf::rt::value_size(2, self.previous, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next != 0 {
            my_size += ::protobuf::rt::value_size(3, self.next, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total != 0 {
            os.write_int32(1, self.total)?;
        }
        if self.previous != 0 {
            os.write_int32(2, self.previous)?;
        }
        if self.next != 0 {
            os.write_int32(3, self.next)?;
        }
        for v in &self.list {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> NestedGetPaidByBillingKeyListData {
        NestedGetPaidByBillingKeyListData::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 10)
    }

    fn default_instance() -> &'static NestedGetPaidByBillingKeyListData {
        static instance: NestedGetPaidByBillingKeyListData = NestedGetPaidByBillingKeyListData {
            total: 0,
            previous: 0,
            next: 0,
            list: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for NestedGetPaidByBillingKeyListData {
    fn clear(&mut self) {
        self.total = 0;
        self.previous = 0;
        self.next = 0;
        self.list.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NestedGetPaidByBillingKeyListData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NestedGetPaidByBillingKeyListData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPaidByBillingKeyListResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<NestedGetPaidByBillingKeyListData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPaidByBillingKeyListResponse {
    fn default() -> &'a GetPaidByBillingKeyListResponse {
        <GetPaidByBillingKeyListResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPaidByBillingKeyListResponse {
    pub fn new() -> GetPaidByBillingKeyListResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &GetPaidByBillingKeyListResponse| { &m.code },
            |m: &mut GetPaidByBillingKeyListResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &GetPaidByBillingKeyListResponse| { &m.message },
            |m: &mut GetPaidByBillingKeyListResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, NestedGetPaidByBillingKeyListData>(
            "response",
            |m: &GetPaidByBillingKeyListResponse| { &m.response },
            |m: &mut GetPaidByBillingKeyListResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPaidByBillingKeyListResponse>(
            "GetPaidByBillingKeyListResponse",
            11,
            fields,
        )
    }
}

impl ::protobuf::Message for GetPaidByBillingKeyListResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> GetPaidByBillingKeyListResponse {
        GetPaidByBillingKeyListResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 11)
    }

    fn default_instance() -> &'static GetPaidByBillingKeyListResponse {
        static instance: GetPaidByBillingKeyListResponse = GetPaidByBillingKeyListResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for GetPaidByBillingKeyListResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPaidByBillingKeyListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaidByBillingKeyListResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n0v1/subscribe_customers/subscribe_customers.proto\x12\x13subscribe_cus\
    tomers\x1a\x1cgoogle/api/annotations.proto\x1a\x18v1/payment/payment.pro\
    to\x1a\x1cv1/subscribe/subscribe.proto\"\xdc\x03\n\x12CustomerBillingKey\
    \x12\x1b\n\tcard_code\x18\x01\x20\x01(\tR\x08cardCode\x12\x1b\n\tcard_na\
    me\x18\x02\x20\x01(\tR\x08cardName\x12\x1f\n\x0bcard_number\x18\x03\x20\
    \x01(\tR\ncardNumber\x12\x1b\n\tcard_type\x18\x04\x20\x01(\x05R\x08cardT\
    ype\x12#\n\rcustomer_addr\x18\x05\x20\x01(\tR\x0ccustomerAddr\x12%\n\x0e\
    customer_email\x18\x06\x20\x01(\tR\rcustomerEmail\x12#\n\rcustomer_name\
    \x18\x07\x20\x01(\tR\x0ccustomerName\x12+\n\x11customer_postcode\x18\x08\
    \x20\x01(\tR\x10customerPostcode\x12!\n\x0ccustomer_tel\x18\t\x20\x01(\t\
    R\x0bcustomerTel\x12!\n\x0ccustomer_uid\x18\n\x20\x01(\tR\x0bcustomerUid\
    \x12\x1a\n\x08inserted\x18\x0b\x20\x01(\x05R\x08inserted\x12\x13\n\x05pg\
    _id\x18\x0c\x20\x01(\tR\x04pgId\x12\x1f\n\x0bpg_provider\x18\r\x20\x01(\
    \tR\npgProvider\x12\x18\n\x07updated\x18\x0e\x20\x01(\x05R\x07updated\"I\
    \n$GetMultipleCustomerBillingKeyRequest\x12!\n\x0ccustomer_uid\x18\x01\
    \x20\x03(\tR\x0bcustomerUid\"\x9a\x01\n%GetMultipleCustomerBillingKeyRes\
    ponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07messa\
    ge\x18\x02\x20\x01(\tR\x07message\x12C\n\x08response\x18\x03\x20\x03(\
    \x0b2'.subscribe_customers.CustomerBillingKeyR\x08response\"z\n\x1fDelet\
    eCustomerBillingKeyRequest\x12!\n\x0ccustomer_uid\x18\x01\x20\x01(\tR\
    \x0bcustomerUid\x12\x16\n\x06reason\x18\x02\x20\x01(\tR\x06reason\x12\
    \x1c\n\trequester\x18\x03\x20\x01(\tR\trequester\"\x95\x01\n\x20DeleteCu\
    stomerBillingKeyResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\
    \x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\x12C\n\x08response\
    \x18\x03\x20\x01(\x0b2'.subscribe_customers.CustomerBillingKeyR\x08respo\
    nse\"A\n\x1cGetCustomerBillingKeyRequest\x12!\n\x0ccustomer_uid\x18\x01\
    \x20\x01(\tR\x0bcustomerUid\"\x92\x01\n\x1dGetCustomerBillingKeyResponse\
    \x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\
    \x18\x02\x20\x01(\tR\x07message\x12C\n\x08response\x18\x03\x20\x01(\x0b2\
    '.subscribe_customers.CustomerBillingKeyR\x08response\"\x83\x03\n\x1fIns\
    ertCustomerBillingKeyRequest\x12!\n\x0ccustomer_uid\x18\x01\x20\x01(\tR\
    \x0bcustomerUid\x12\x0e\n\x02pg\x18\x02\x20\x01(\tR\x02pg\x12\x1f\n\x0bc\
    ard_number\x18\x03\x20\x01(\tR\ncardNumber\x12\x16\n\x06expiry\x18\x04\
    \x20\x01(\tR\x06expiry\x12\x14\n\x05birth\x18\x05\x20\x01(\tR\x05birth\
    \x12\x1d\n\npwd_2digit\x18\x06\x20\x01(\tR\tpwd2digit\x12#\n\rcustomer_n\
    ame\x18\x07\x20\x01(\tR\x0ccustomerName\x12!\n\x0ccustomer_tel\x18\x08\
    \x20\x01(\tR\x0bcustomerTel\x12%\n\x0ecustomer_email\x18\t\x20\x01(\tR\r\
    customerEmail\x12#\n\rcustomer_addr\x18\n\x20\x01(\tR\x0ccustomerAddr\
    \x12+\n\x11customer_postcode\x18\x0b\x20\x01(\tR\x10customerPostcode\"\
    \x95\x01\n\x20InsertCustomerBillingKeyResponse\x12\x12\n\x04code\x18\x01\
    \x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07messa\
    ge\x12C\n\x08response\x18\x03\x20\x01(\x0b2'.subscribe_customers.Custome\
    rBillingKeyR\x08response\"W\n\x1eGetPaidByBillingKeyListRequest\x12!\n\
    \x0ccustomer_uid\x18\x01\x20\x01(\tR\x0bcustomerUid\x12\x12\n\x04page\
    \x18\x02\x20\x01(\x05R\x04page\"\x8f\x01\n!NestedGetPaidByBillingKeyList\
    Data\x12\x14\n\x05total\x18\x01\x20\x01(\x05R\x05total\x12\x1a\n\x08prev\
    ious\x18\x02\x20\x01(\x05R\x08previous\x12\x12\n\x04next\x18\x03\x20\x01\
    (\x05R\x04next\x12$\n\x04list\x18\x04\x20\x03(\x0b2\x10.payment.PaymentR\
    \x04list\"\xa3\x01\n\x1fGetPaidByBillingKeyListResponse\x12\x12\n\x04cod\
    e\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\
    \x07message\x12R\n\x08response\x18\x03\x20\x01(\x0b26.subscribe_customer\
    s.NestedGetPaidByBillingKeyListDataR\x08response2\xa3\t\n\x19SubscribeCu\
    stomersService\x12\xbe\x01\n\x20GetMultipleCustomerBillingKeyRPC\x129.su\
    bscribe_customers.GetMultipleCustomerBillingKeyRequest\x1a:.subscribe_cu\
    stomers.GetMultipleCustomerBillingKeyResponse\"#\x82\xd3\xe4\x93\x02\x1d\
    \x12\x1b/api/v1/subscribe/customers\x12\xbe\x01\n\x1bDeleteCustomerBilli\
    ngKeyRPC\x124.subscribe_customers.DeleteCustomerBillingKeyRequest\x1a5.s\
    ubscribe_customers.DeleteCustomerBillingKeyResponse\"2\x82\xd3\xe4\x93\
    \x02,**/api/v1/subscribe/customers/{customer_uid}\x12\xb5\x01\n\x18GetCu\
    stomerBillingKeyRPC\x121.subscribe_customers.GetCustomerBillingKeyReques\
    t\x1a2.subscribe_customers.GetCustomerBillingKeyResponse\"2\x82\xd3\xe4\
    \x93\x02,\x12*/api/v1/subscribe/customers/{customer_uid}\x12\xc1\x01\n\
    \x1bInsertCustomerBillingKeyRPC\x124.subscribe_customers.InsertCustomerB\
    illingKeyRequest\x1a5.subscribe_customers.InsertCustomerBillingKeyRespon\
    se\"5\x82\xd3\xe4\x93\x02/\"*/api/v1/subscribe/customers/{customer_uid}:\
    \x01*\x12\xc4\x01\n\x1aGetPaidByBillingKeyListRPC\x123.subscribe_custome\
    rs.GetPaidByBillingKeyListRequest\x1a4.subscribe_customers.GetPaidByBill\
    ingKeyListResponse\";\x82\xd3\xe4\x93\x025\x123/api/v1/subscribe/custome\
    rs/{customer_uid}/payments\x12\xc0\x01\n\x1fGetPaymentScheduleByCustomer\
    RPC\x12..subscribe.GetPaymentScheduleByCustomerRequest\x1a/.subscribe.Ge\
    tPaymentScheduleByCustomerResponse\"<\x82\xd3\xe4\x93\x026\x124/api/v1/s\
    ubscribe/customers/{customer_uid}/schedulesB@Z>github.com/iamport/interf\
    ace/gen_src/go/v1/subscribe_customersJ\xd6\x1d\n\x07\x12\x05\0\0\x85\x01\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1c\n\
    \t\n\x02\x03\0\x12\x03\x03\0&\n\t\n\x02\x03\x01\x12\x03\x04\0\"\n\t\n\
    \x02\x03\x02\x12\x03\x05\0&\n\x08\n\x01\x08\x12\x03\x07\0U\n\t\n\x02\x08\
    \x0b\x12\x03\x07\0U\n\n\n\x02\x06\0\x12\x04\t\0.\x01\n\n\n\x03\x06\0\x01\
    \x12\x03\t\x08!\n\x0c\n\x04\x06\0\x02\0\x12\x04\n\x04\x0e\x05\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03\n\x08(\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\
    \n)M\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\nX}\n\r\n\x05\x06\0\x02\0\x04\
    \x12\x04\x0b\x08\r\n\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04\x0b\
    \x08\r\n\n\x0c\n\x04\x06\0\x02\x01\x12\x04\x10\x04\x14\x05\n\x0c\n\x05\
    \x06\0\x02\x01\x01\x12\x03\x10\x08#\n\x0c\n\x05\x06\0\x02\x01\x02\x12\
    \x03\x10$C\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x10Nn\n\r\n\x05\x06\0\
    \x02\x01\x04\x12\x04\x11\x08\x13\n\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\
    \xbc\"\x12\x04\x11\x08\x13\n\n\x0c\n\x04\x06\0\x02\x02\x12\x04\x16\x04\
    \x1a\x05\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x16\x08\x20\n\x0c\n\x05\
    \x06\0\x02\x02\x02\x12\x03\x16!=\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\
    \x16He\n\r\n\x05\x06\0\x02\x02\x04\x12\x04\x17\x08\x19\n\n\x11\n\t\x06\0\
    \x02\x02\x04\xb0\xca\xbc\"\x12\x04\x17\x08\x19\n\n\x0c\n\x04\x06\0\x02\
    \x03\x12\x04\x1c\x04!\x05\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x1c\x08#\
    \n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x1c$C\n\x0c\n\x05\x06\0\x02\x03\
    \x03\x12\x03\x1cNn\n\r\n\x05\x06\0\x02\x03\x04\x12\x04\x1d\x08\x20\n\n\
    \x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04\x1d\x08\x20\n\n\x0c\n\
    \x04\x06\0\x02\x04\x12\x04#\x04'\x05\n\x0c\n\x05\x06\0\x02\x04\x01\x12\
    \x03#\x08\"\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03##A\n\x0c\n\x05\x06\0\
    \x02\x04\x03\x12\x03#Lk\n\r\n\x05\x06\0\x02\x04\x04\x12\x04$\x08&\n\n\
    \x11\n\t\x06\0\x02\x04\x04\xb0\xca\xbc\"\x12\x04$\x08&\n\n\x0c\n\x04\x06\
    \0\x02\x05\x12\x04)\x04-\x05\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03)\x08'\
    \n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03)(U\n\r\n\x05\x06\0\x02\x05\x03\
    \x12\x04)`\x8e\x01\n\r\n\x05\x06\0\x02\x05\x04\x12\x04*\x08,\n\n\x11\n\t\
    \x06\0\x02\x05\x04\xb0\xca\xbc\"\x12\x04*\x08,\n\n\n\n\x02\x04\0\x12\x04\
    0\0?\x01\n\n\n\x03\x04\0\x01\x12\x030\x08\x1a\n\x0b\n\x04\x04\0\x02\0\
    \x12\x031\x06\x1b\n\x0c\n\x05\x04\0\x02\0\x05\x12\x031\x06\x0c\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x031\r\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\x031\
    \x19\x1a\n\x0b\n\x04\x04\0\x02\x01\x12\x032\x06\x1b\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x032\x06\x0c\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x032\r\
    \x16\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x032\x19\x1a\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x033\x06\x1d\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x033\x06\x0c\
    \n\x0c\n\x05\x04\0\x02\x02\x01\x12\x033\r\x18\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x033\x1b\x1c\n\x0b\n\x04\x04\0\x02\x03\x12\x034\x06\x1a\n\x0c\n\
    \x05\x04\0\x02\x03\x05\x12\x034\x06\x0b\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x034\x0c\x15\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x034\x18\x19\n\x0b\n\
    \x04\x04\0\x02\x04\x12\x035\x06\x1f\n\x0c\n\x05\x04\0\x02\x04\x05\x12\
    \x035\x06\x0c\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x035\r\x1a\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x035\x1d\x1e\n\x0b\n\x04\x04\0\x02\x05\x12\x036\
    \x06\x20\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x036\x06\x0c\n\x0c\n\x05\x04\
    \0\x02\x05\x01\x12\x036\r\x1b\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x036\x1e\
    \x1f\n\x0b\n\x04\x04\0\x02\x06\x12\x037\x06\x1f\n\x0c\n\x05\x04\0\x02\
    \x06\x05\x12\x037\x06\x0c\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x037\r\x1a\n\
    \x0c\n\x05\x04\0\x02\x06\x03\x12\x037\x1d\x1e\n\x0b\n\x04\x04\0\x02\x07\
    \x12\x038\x06#\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x038\x06\x0c\n\x0c\n\
    \x05\x04\0\x02\x07\x01\x12\x038\r\x1e\n\x0c\n\x05\x04\0\x02\x07\x03\x12\
    \x038!\"\n\x0b\n\x04\x04\0\x02\x08\x12\x039\x06\x1e\n\x0c\n\x05\x04\0\
    \x02\x08\x05\x12\x039\x06\x0c\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x039\r\
    \x19\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x039\x1c\x1d\n\x0b\n\x04\x04\0\
    \x02\t\x12\x03:\x06\x1f\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03:\x06\x0c\n\
    \x0c\n\x05\x04\0\x02\t\x01\x12\x03:\r\x19\n\x0c\n\x05\x04\0\x02\t\x03\
    \x12\x03:\x1c\x1e\n\x0b\n\x04\x04\0\x02\n\x12\x03;\x06\x1a\n\x0c\n\x05\
    \x04\0\x02\n\x05\x12\x03;\x06\x0b\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03;\
    \x0c\x14\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03;\x17\x19\n\x0b\n\x04\x04\0\
    \x02\x0b\x12\x03<\x06\x18\n\x0c\n\x05\x04\0\x02\x0b\x05\x12\x03<\x06\x0c\
    \n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03<\r\x12\n\x0c\n\x05\x04\0\x02\x0b\
    \x03\x12\x03<\x15\x17\n\x0b\n\x04\x04\0\x02\x0c\x12\x03=\x06\x1e\n\x0c\n\
    \x05\x04\0\x02\x0c\x05\x12\x03=\x06\x0c\n\x0c\n\x05\x04\0\x02\x0c\x01\
    \x12\x03=\r\x18\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\x03=\x1b\x1d\n\x0b\n\
    \x04\x04\0\x02\r\x12\x03>\x06\x19\n\x0c\n\x05\x04\0\x02\r\x05\x12\x03>\
    \x06\x0b\n\x0c\n\x05\x04\0\x02\r\x01\x12\x03>\x0c\x13\n\x0c\n\x05\x04\0\
    \x02\r\x03\x12\x03>\x16\x18\n\n\n\x02\x04\x01\x12\x04A\0C\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03A\x08,\n\x0b\n\x04\x04\x01\x02\0\x12\x03B\x04%\n\x0c\
    \n\x05\x04\x01\x02\0\x04\x12\x03B\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03B\r\x13\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03B\x14\x20\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03B#$\n\n\n\x02\x04\x02\x12\x04E\0I\x01\n\n\
    \n\x03\x04\x02\x01\x12\x03E\x08-\n\x0b\n\x04\x04\x02\x02\0\x12\x03F\x04\
    \x13\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03F\x04\t\n\x0c\n\x05\x04\x02\
    \x02\0\x01\x12\x03F\n\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03F\x11\x12\
    \n\x0b\n\x04\x04\x02\x02\x01\x12\x03G\x04\x17\n\x0c\n\x05\x04\x02\x02\
    \x01\x05\x12\x03G\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03G\x0b\x12\
    \n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03G\x15\x16\n\x0b\n\x04\x04\x02\
    \x02\x02\x12\x03H\x04-\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03H\x04\x0c\
    \n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03H\r\x1f\n\x0c\n\x05\x04\x02\x02\
    \x02\x01\x12\x03H\x20(\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03H+,\n\n\n\
    \x02\x04\x03\x12\x04K\0O\x01\n\n\n\x03\x04\x03\x01\x12\x03K\x08'\n\x0b\n\
    \x04\x04\x03\x02\0\x12\x03L\x04\x1c\n\x0c\n\x05\x04\x03\x02\0\x05\x12\
    \x03L\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03L\x0b\x17\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03L\x1a\x1b\n\x0b\n\x04\x04\x03\x02\x01\x12\x03M\
    \x04\x16\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03M\x04\n\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x03M\x0b\x11\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03M\x14\x15\n\x0b\n\x04\x04\x03\x02\x02\x12\x03N\x04\x19\n\x0c\n\x05\
    \x04\x03\x02\x02\x05\x12\x03N\x04\n\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\
    \x03N\x0b\x14\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03N\x17\x18\n\n\n\x02\
    \x04\x04\x12\x04Q\0U\x01\n\n\n\x03\x04\x04\x01\x12\x03Q\x08(\n\x0b\n\x04\
    \x04\x04\x02\0\x12\x03R\x04\x13\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03R\
    \x04\t\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03R\n\x0e\n\x0c\n\x05\x04\x04\
    \x02\0\x03\x12\x03R\x11\x12\n\x0b\n\x04\x04\x04\x02\x01\x12\x03S\x04\x17\
    \n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03S\x04\n\n\x0c\n\x05\x04\x04\x02\
    \x01\x01\x12\x03S\x0b\x12\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03S\x15\
    \x16\n\x0b\n\x04\x04\x04\x02\x02\x12\x03T\x04$\n\x0c\n\x05\x04\x04\x02\
    \x02\x06\x12\x03T\x04\x16\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03T\x17\
    \x1f\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03T\"#\n\n\n\x02\x04\x05\x12\
    \x04W\0Y\x01\n\n\n\x03\x04\x05\x01\x12\x03W\x08$\n\x0b\n\x04\x04\x05\x02\
    \0\x12\x03X\x04\x1c\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03X\x04\n\n\x0c\n\
    \x05\x04\x05\x02\0\x01\x12\x03X\x0b\x17\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x03X\x1a\x1b\n\n\n\x02\x04\x06\x12\x04[\0_\x01\n\n\n\x03\x04\x06\
    \x01\x12\x03[\x08%\n\x0b\n\x04\x04\x06\x02\0\x12\x03\\\x04\x13\n\x0c\n\
    \x05\x04\x06\x02\0\x05\x12\x03\\\x04\t\n\x0c\n\x05\x04\x06\x02\0\x01\x12\
    \x03\\\n\x0e\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03\\\x11\x12\n\x0b\n\x04\
    \x04\x06\x02\x01\x12\x03]\x04\x17\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\
    \x03]\x04\n\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03]\x0b\x12\n\x0c\n\x05\
    \x04\x06\x02\x01\x03\x12\x03]\x15\x16\n\x0b\n\x04\x04\x06\x02\x02\x12\
    \x03^\x04$\n\x0c\n\x05\x04\x06\x02\x02\x06\x12\x03^\x04\x16\n\x0c\n\x05\
    \x04\x06\x02\x02\x01\x12\x03^\x17\x1f\n\x0c\n\x05\x04\x06\x02\x02\x03\
    \x12\x03^\"#\n\n\n\x02\x04\x07\x12\x04a\0m\x01\n\n\n\x03\x04\x07\x01\x12\
    \x03a\x08'\n\x0b\n\x04\x04\x07\x02\0\x12\x03b\x04\x1c\n\x0c\n\x05\x04\
    \x07\x02\0\x05\x12\x03b\x04\n\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03b\x0b\
    \x17\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03b\x1a\x1b\n\x0b\n\x04\x04\x07\
    \x02\x01\x12\x03c\x04\x12\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03c\x04\n\
    \n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03c\x0b\r\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x03c\x10\x11\n\x0b\n\x04\x04\x07\x02\x02\x12\x03d\x04\x1b\n\
    \x0c\n\x05\x04\x07\x02\x02\x05\x12\x03d\x04\n\n\x0c\n\x05\x04\x07\x02\
    \x02\x01\x12\x03d\x0b\x16\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03d\x19\
    \x1a\n\x0b\n\x04\x04\x07\x02\x03\x12\x03e\x04\x16\n\x0c\n\x05\x04\x07\
    \x02\x03\x05\x12\x03e\x04\n\n\x0c\n\x05\x04\x07\x02\x03\x01\x12\x03e\x0b\
    \x11\n\x0c\n\x05\x04\x07\x02\x03\x03\x12\x03e\x14\x15\n\x0b\n\x04\x04\
    \x07\x02\x04\x12\x03f\x04\x15\n\x0c\n\x05\x04\x07\x02\x04\x05\x12\x03f\
    \x04\n\n\x0c\n\x05\x04\x07\x02\x04\x01\x12\x03f\x0b\x10\n\x0c\n\x05\x04\
    \x07\x02\x04\x03\x12\x03f\x13\x14\n\x0b\n\x04\x04\x07\x02\x05\x12\x03g\
    \x04\x1a\n\x0c\n\x05\x04\x07\x02\x05\x05\x12\x03g\x04\n\n\x0c\n\x05\x04\
    \x07\x02\x05\x01\x12\x03g\x0b\x15\n\x0c\n\x05\x04\x07\x02\x05\x03\x12\
    \x03g\x18\x19\n\x0b\n\x04\x04\x07\x02\x06\x12\x03h\x04\x1d\n\x0c\n\x05\
    \x04\x07\x02\x06\x05\x12\x03h\x04\n\n\x0c\n\x05\x04\x07\x02\x06\x01\x12\
    \x03h\x0b\x18\n\x0c\n\x05\x04\x07\x02\x06\x03\x12\x03h\x1b\x1c\n\x0b\n\
    \x04\x04\x07\x02\x07\x12\x03i\x04\x1c\n\x0c\n\x05\x04\x07\x02\x07\x05\
    \x12\x03i\x04\n\n\x0c\n\x05\x04\x07\x02\x07\x01\x12\x03i\x0b\x17\n\x0c\n\
    \x05\x04\x07\x02\x07\x03\x12\x03i\x1a\x1b\n\x0b\n\x04\x04\x07\x02\x08\
    \x12\x03j\x04\x1e\n\x0c\n\x05\x04\x07\x02\x08\x05\x12\x03j\x04\n\n\x0c\n\
    \x05\x04\x07\x02\x08\x01\x12\x03j\x0b\x19\n\x0c\n\x05\x04\x07\x02\x08\
    \x03\x12\x03j\x1c\x1d\n\x0b\n\x04\x04\x07\x02\t\x12\x03k\x04\x1e\n\x0c\n\
    \x05\x04\x07\x02\t\x05\x12\x03k\x04\n\n\x0c\n\x05\x04\x07\x02\t\x01\x12\
    \x03k\x0b\x18\n\x0c\n\x05\x04\x07\x02\t\x03\x12\x03k\x1b\x1d\n\x0b\n\x04\
    \x04\x07\x02\n\x12\x03l\x04\"\n\x0c\n\x05\x04\x07\x02\n\x05\x12\x03l\x04\
    \n\n\x0c\n\x05\x04\x07\x02\n\x01\x12\x03l\x0b\x1c\n\x0c\n\x05\x04\x07\
    \x02\n\x03\x12\x03l\x1f!\n\n\n\x02\x04\x08\x12\x04o\0s\x01\n\n\n\x03\x04\
    \x08\x01\x12\x03o\x08(\n\x0b\n\x04\x04\x08\x02\0\x12\x03p\x04\x13\n\x0c\
    \n\x05\x04\x08\x02\0\x05\x12\x03p\x04\t\n\x0c\n\x05\x04\x08\x02\0\x01\
    \x12\x03p\n\x0e\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03p\x11\x12\n\x0b\n\
    \x04\x04\x08\x02\x01\x12\x03q\x04\x17\n\x0c\n\x05\x04\x08\x02\x01\x05\
    \x12\x03q\x04\n\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03q\x0b\x12\n\x0c\n\
    \x05\x04\x08\x02\x01\x03\x12\x03q\x15\x16\n\x0b\n\x04\x04\x08\x02\x02\
    \x12\x03r\x04$\n\x0c\n\x05\x04\x08\x02\x02\x06\x12\x03r\x04\x16\n\x0c\n\
    \x05\x04\x08\x02\x02\x01\x12\x03r\x17\x1f\n\x0c\n\x05\x04\x08\x02\x02\
    \x03\x12\x03r\"#\n\n\n\x02\x04\t\x12\x04u\0x\x01\n\n\n\x03\x04\t\x01\x12\
    \x03u\x08&\n\x0b\n\x04\x04\t\x02\0\x12\x03v\x04\x1c\n\x0c\n\x05\x04\t\
    \x02\0\x05\x12\x03v\x04\n\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03v\x0b\x17\n\
    \x0c\n\x05\x04\t\x02\0\x03\x12\x03v\x1a\x1b\n\x0b\n\x04\x04\t\x02\x01\
    \x12\x03w\x04\x13\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03w\x04\t\n\x0c\n\
    \x05\x04\t\x02\x01\x01\x12\x03w\n\x0e\n\x0c\n\x05\x04\t\x02\x01\x03\x12\
    \x03w\x11\x12\n\n\n\x02\x04\n\x12\x04z\0\x7f\x01\n\n\n\x03\x04\n\x01\x12\
    \x03z\x08)\n\x0b\n\x04\x04\n\x02\0\x12\x03{\x04\x14\n\x0c\n\x05\x04\n\
    \x02\0\x05\x12\x03{\x04\t\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03{\n\x0f\n\
    \x0c\n\x05\x04\n\x02\0\x03\x12\x03{\x12\x13\n\x0b\n\x04\x04\n\x02\x01\
    \x12\x03|\x04\x17\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03|\x04\t\n\x0c\n\
    \x05\x04\n\x02\x01\x01\x12\x03|\n\x12\n\x0c\n\x05\x04\n\x02\x01\x03\x12\
    \x03|\x15\x16\n\x0b\n\x04\x04\n\x02\x02\x12\x03}\x04\x13\n\x0c\n\x05\x04\
    \n\x02\x02\x05\x12\x03}\x04\t\n\x0c\n\x05\x04\n\x02\x02\x01\x12\x03}\n\
    \x0e\n\x0c\n\x05\x04\n\x02\x02\x03\x12\x03}\x11\x12\n\x0b\n\x04\x04\n\
    \x02\x03\x12\x03~\x04&\n\x0c\n\x05\x04\n\x02\x03\x04\x12\x03~\x04\x0c\n\
    \x0c\n\x05\x04\n\x02\x03\x06\x12\x03~\r\x1c\n\x0c\n\x05\x04\n\x02\x03\
    \x01\x12\x03~\x1d!\n\x0c\n\x05\x04\n\x02\x03\x03\x12\x03~$%\n\x0c\n\x02\
    \x04\x0b\x12\x06\x81\x01\0\x85\x01\x01\n\x0b\n\x03\x04\x0b\x01\x12\x04\
    \x81\x01\x08'\n\x0c\n\x04\x04\x0b\x02\0\x12\x04\x82\x01\x04\x13\n\r\n\
    \x05\x04\x0b\x02\0\x05\x12\x04\x82\x01\x04\t\n\r\n\x05\x04\x0b\x02\0\x01\
    \x12\x04\x82\x01\n\x0e\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\x82\x01\x11\
    \x12\n\x0c\n\x04\x04\x0b\x02\x01\x12\x04\x83\x01\x04\x17\n\r\n\x05\x04\
    \x0b\x02\x01\x05\x12\x04\x83\x01\x04\n\n\r\n\x05\x04\x0b\x02\x01\x01\x12\
    \x04\x83\x01\x0b\x12\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\x83\x01\x15\
    \x16\n\x0c\n\x04\x04\x0b\x02\x02\x12\x04\x84\x01\x043\n\r\n\x05\x04\x0b\
    \x02\x02\x06\x12\x04\x84\x01\x04%\n\r\n\x05\x04\x0b\x02\x02\x01\x12\x04\
    \x84\x01&.\n\r\n\x05\x04\x0b\x02\x02\x03\x12\x04\x84\x0112b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(super::annotations::file_descriptor());
        deps.push(super::payment::file_descriptor());
        deps.push(super::subscribe::file_descriptor());
        let mut messages = ::std::vec::Vec::new();
        messages.push(CustomerBillingKey::generated_message_descriptor_data());
        messages.push(GetMultipleCustomerBillingKeyRequest::generated_message_descriptor_data());
        messages.push(GetMultipleCustomerBillingKeyResponse::generated_message_descriptor_data());
        messages.push(DeleteCustomerBillingKeyRequest::generated_message_descriptor_data());
        messages.push(DeleteCustomerBillingKeyResponse::generated_message_descriptor_data());
        messages.push(GetCustomerBillingKeyRequest::generated_message_descriptor_data());
        messages.push(GetCustomerBillingKeyResponse::generated_message_descriptor_data());
        messages.push(InsertCustomerBillingKeyRequest::generated_message_descriptor_data());
        messages.push(InsertCustomerBillingKeyResponse::generated_message_descriptor_data());
        messages.push(GetPaidByBillingKeyListRequest::generated_message_descriptor_data());
        messages.push(NestedGetPaidByBillingKeyListData::generated_message_descriptor_data());
        messages.push(GetPaidByBillingKeyListResponse::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
