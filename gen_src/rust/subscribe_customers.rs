// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `subscribe_customers/subscribe_customers.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct CancelHistory {
    // message fields
    pub pg_tid: ::std::string::String,
    pub amount: i32,
    pub cancelled_at: i32,
    pub reason: ::std::string::String,
    pub receipt_url: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelHistory {
    fn default() -> &'a CancelHistory {
        <CancelHistory as ::protobuf::Message>::default_instance()
    }
}

impl CancelHistory {
    pub fn new() -> CancelHistory {
        ::std::default::Default::default()
    }

    // string pg_tid = 1;


    pub fn get_pg_tid(&self) -> &str {
        &self.pg_tid
    }
    pub fn clear_pg_tid(&mut self) {
        self.pg_tid.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_tid(&mut self, v: ::std::string::String) {
        self.pg_tid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_tid(&mut self) -> &mut ::std::string::String {
        &mut self.pg_tid
    }

    // Take field
    pub fn take_pg_tid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_tid, ::std::string::String::new())
    }

    // int32 amount = 2;


    pub fn get_amount(&self) -> i32 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i32) {
        self.amount = v;
    }

    // int32 cancelled_at = 3;


    pub fn get_cancelled_at(&self) -> i32 {
        self.cancelled_at
    }
    pub fn clear_cancelled_at(&mut self) {
        self.cancelled_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_cancelled_at(&mut self, v: i32) {
        self.cancelled_at = v;
    }

    // string reason = 4;


    pub fn get_reason(&self) -> &str {
        &self.reason
    }
    pub fn clear_reason(&mut self) {
        self.reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        &mut self.reason
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reason, ::std::string::String::new())
    }

    // string receipt_url = 5;


    pub fn get_receipt_url(&self) -> &str {
        &self.receipt_url
    }
    pub fn clear_receipt_url(&mut self) {
        self.receipt_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_receipt_url(&mut self, v: ::std::string::String) {
        self.receipt_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receipt_url(&mut self) -> &mut ::std::string::String {
        &mut self.receipt_url
    }

    // Take field
    pub fn take_receipt_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receipt_url, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CancelHistory {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_tid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.cancelled_at = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reason)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receipt_url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pg_tid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pg_tid);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(2, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cancelled_at != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cancelled_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.reason.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.reason);
        }
        if !self.receipt_url.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.receipt_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pg_tid.is_empty() {
            os.write_string(1, &self.pg_tid)?;
        }
        if self.amount != 0 {
            os.write_int32(2, self.amount)?;
        }
        if self.cancelled_at != 0 {
            os.write_int32(3, self.cancelled_at)?;
        }
        if !self.reason.is_empty() {
            os.write_string(4, &self.reason)?;
        }
        if !self.receipt_url.is_empty() {
            os.write_string(5, &self.receipt_url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelHistory {
        CancelHistory::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_tid",
                |m: &CancelHistory| { &m.pg_tid },
                |m: &mut CancelHistory| { &mut m.pg_tid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "amount",
                |m: &CancelHistory| { &m.amount },
                |m: &mut CancelHistory| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "cancelled_at",
                |m: &CancelHistory| { &m.cancelled_at },
                |m: &mut CancelHistory| { &mut m.cancelled_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reason",
                |m: &CancelHistory| { &m.reason },
                |m: &mut CancelHistory| { &mut m.reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "receipt_url",
                |m: &CancelHistory| { &m.receipt_url },
                |m: &mut CancelHistory| { &mut m.receipt_url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CancelHistory>(
                "CancelHistory",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CancelHistory {
        static instance: ::protobuf::rt::LazyV2<CancelHistory> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CancelHistory::new)
    }
}

impl ::protobuf::Clear for CancelHistory {
    fn clear(&mut self) {
        self.pg_tid.clear();
        self.amount = 0;
        self.cancelled_at = 0;
        self.reason.clear();
        self.receipt_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelHistory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelHistory {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentResponse {
    // message fields
    pub cancel_amount: i32,
    pub bank_code: ::std::string::String,
    pub vbank_date: i32,
    pub card_code: ::std::string::String,
    pub customer_uid_usage: ::std::string::String,
    pub pg_id: ::std::string::String,
    pub escrow: bool,
    pub failed_at: i32,
    pub buyer_addr: ::std::string::String,
    pub apply_num: ::std::string::String,
    pub card_name: ::std::string::String,
    pub cancelled_at: i32,
    pub pg_tid: ::std::string::String,
    pub vbank_holder: ::std::string::String,
    pub vbank_name: ::std::string::String,
    pub currency: ::std::string::String,
    pub buyer_name: ::std::string::String,
    pub card_number: ::std::string::String,
    pub started_at: i32,
    pub merchant_uid: ::std::string::String,
    pub vbank_num: ::std::string::String,
    pub customer_uid: ::std::string::String,
    pub fail_reason: ::std::string::String,
    pub imp_uid: ::std::string::String,
    pub buyer_postcode: ::std::string::String,
    pub paid_at: i32,
    pub pg_provider: ::std::string::String,
    pub bank_name: ::std::string::String,
    pub vbank_issued_at: i32,
    pub vbank_code: ::std::string::String,
    pub receipt_url: ::std::string::String,
    pub card_quota: i32,
    pub buyer_email: ::std::string::String,
    pub user_agent: ::std::string::String,
    pub status: ::std::string::String,
    pub cancel_reason: ::std::string::String,
    pub custom_data: ::std::string::String,
    pub cash_receipt_issued: bool,
    pub card_type: i32,
    pub buyer_tel: ::std::string::String,
    pub amount: i32,
    pub name: ::std::string::String,
    pub pay_method: ::std::string::String,
    pub channel: ::std::string::String,
    pub cancel_receipt_urls: ::protobuf::RepeatedField<::std::string::String>,
    pub cancel_history: ::protobuf::RepeatedField<CancelHistory>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentResponse {
    fn default() -> &'a PaymentResponse {
        <PaymentResponse as ::protobuf::Message>::default_instance()
    }
}

impl PaymentResponse {
    pub fn new() -> PaymentResponse {
        ::std::default::Default::default()
    }

    // int32 cancel_amount = 1;


    pub fn get_cancel_amount(&self) -> i32 {
        self.cancel_amount
    }
    pub fn clear_cancel_amount(&mut self) {
        self.cancel_amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_cancel_amount(&mut self, v: i32) {
        self.cancel_amount = v;
    }

    // string bank_code = 2;


    pub fn get_bank_code(&self) -> &str {
        &self.bank_code
    }
    pub fn clear_bank_code(&mut self) {
        self.bank_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_bank_code(&mut self, v: ::std::string::String) {
        self.bank_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bank_code(&mut self) -> &mut ::std::string::String {
        &mut self.bank_code
    }

    // Take field
    pub fn take_bank_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bank_code, ::std::string::String::new())
    }

    // int32 vbank_date = 3;


    pub fn get_vbank_date(&self) -> i32 {
        self.vbank_date
    }
    pub fn clear_vbank_date(&mut self) {
        self.vbank_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_vbank_date(&mut self, v: i32) {
        self.vbank_date = v;
    }

    // string card_code = 4;


    pub fn get_card_code(&self) -> &str {
        &self.card_code
    }
    pub fn clear_card_code(&mut self) {
        self.card_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_code(&mut self, v: ::std::string::String) {
        self.card_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_code(&mut self) -> &mut ::std::string::String {
        &mut self.card_code
    }

    // Take field
    pub fn take_card_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_code, ::std::string::String::new())
    }

    // string customer_uid_usage = 5;


    pub fn get_customer_uid_usage(&self) -> &str {
        &self.customer_uid_usage
    }
    pub fn clear_customer_uid_usage(&mut self) {
        self.customer_uid_usage.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid_usage(&mut self, v: ::std::string::String) {
        self.customer_uid_usage = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_uid_usage(&mut self) -> &mut ::std::string::String {
        &mut self.customer_uid_usage
    }

    // Take field
    pub fn take_customer_uid_usage(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_uid_usage, ::std::string::String::new())
    }

    // string pg_id = 6;


    pub fn get_pg_id(&self) -> &str {
        &self.pg_id
    }
    pub fn clear_pg_id(&mut self) {
        self.pg_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_id(&mut self, v: ::std::string::String) {
        self.pg_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_id(&mut self) -> &mut ::std::string::String {
        &mut self.pg_id
    }

    // Take field
    pub fn take_pg_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_id, ::std::string::String::new())
    }

    // bool escrow = 7;


    pub fn get_escrow(&self) -> bool {
        self.escrow
    }
    pub fn clear_escrow(&mut self) {
        self.escrow = false;
    }

    // Param is passed by value, moved
    pub fn set_escrow(&mut self, v: bool) {
        self.escrow = v;
    }

    // int32 failed_at = 8;


    pub fn get_failed_at(&self) -> i32 {
        self.failed_at
    }
    pub fn clear_failed_at(&mut self) {
        self.failed_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_failed_at(&mut self, v: i32) {
        self.failed_at = v;
    }

    // string buyer_addr = 9;


    pub fn get_buyer_addr(&self) -> &str {
        &self.buyer_addr
    }
    pub fn clear_buyer_addr(&mut self) {
        self.buyer_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer_addr(&mut self, v: ::std::string::String) {
        self.buyer_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer_addr(&mut self) -> &mut ::std::string::String {
        &mut self.buyer_addr
    }

    // Take field
    pub fn take_buyer_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer_addr, ::std::string::String::new())
    }

    // string apply_num = 10;


    pub fn get_apply_num(&self) -> &str {
        &self.apply_num
    }
    pub fn clear_apply_num(&mut self) {
        self.apply_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_apply_num(&mut self, v: ::std::string::String) {
        self.apply_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_apply_num(&mut self) -> &mut ::std::string::String {
        &mut self.apply_num
    }

    // Take field
    pub fn take_apply_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.apply_num, ::std::string::String::new())
    }

    // string card_name = 11;


    pub fn get_card_name(&self) -> &str {
        &self.card_name
    }
    pub fn clear_card_name(&mut self) {
        self.card_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_name(&mut self, v: ::std::string::String) {
        self.card_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_name(&mut self) -> &mut ::std::string::String {
        &mut self.card_name
    }

    // Take field
    pub fn take_card_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_name, ::std::string::String::new())
    }

    // int32 cancelled_at = 12;


    pub fn get_cancelled_at(&self) -> i32 {
        self.cancelled_at
    }
    pub fn clear_cancelled_at(&mut self) {
        self.cancelled_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_cancelled_at(&mut self, v: i32) {
        self.cancelled_at = v;
    }

    // string pg_tid = 13;


    pub fn get_pg_tid(&self) -> &str {
        &self.pg_tid
    }
    pub fn clear_pg_tid(&mut self) {
        self.pg_tid.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_tid(&mut self, v: ::std::string::String) {
        self.pg_tid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_tid(&mut self) -> &mut ::std::string::String {
        &mut self.pg_tid
    }

    // Take field
    pub fn take_pg_tid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_tid, ::std::string::String::new())
    }

    // string vbank_holder = 14;


    pub fn get_vbank_holder(&self) -> &str {
        &self.vbank_holder
    }
    pub fn clear_vbank_holder(&mut self) {
        self.vbank_holder.clear();
    }

    // Param is passed by value, moved
    pub fn set_vbank_holder(&mut self, v: ::std::string::String) {
        self.vbank_holder = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vbank_holder(&mut self) -> &mut ::std::string::String {
        &mut self.vbank_holder
    }

    // Take field
    pub fn take_vbank_holder(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vbank_holder, ::std::string::String::new())
    }

    // string vbank_name = 15;


    pub fn get_vbank_name(&self) -> &str {
        &self.vbank_name
    }
    pub fn clear_vbank_name(&mut self) {
        self.vbank_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_vbank_name(&mut self, v: ::std::string::String) {
        self.vbank_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vbank_name(&mut self) -> &mut ::std::string::String {
        &mut self.vbank_name
    }

    // Take field
    pub fn take_vbank_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vbank_name, ::std::string::String::new())
    }

    // string currency = 16;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // string buyer_name = 17;


    pub fn get_buyer_name(&self) -> &str {
        &self.buyer_name
    }
    pub fn clear_buyer_name(&mut self) {
        self.buyer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer_name(&mut self, v: ::std::string::String) {
        self.buyer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer_name(&mut self) -> &mut ::std::string::String {
        &mut self.buyer_name
    }

    // Take field
    pub fn take_buyer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer_name, ::std::string::String::new())
    }

    // string card_number = 18;


    pub fn get_card_number(&self) -> &str {
        &self.card_number
    }
    pub fn clear_card_number(&mut self) {
        self.card_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_number(&mut self, v: ::std::string::String) {
        self.card_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_number(&mut self) -> &mut ::std::string::String {
        &mut self.card_number
    }

    // Take field
    pub fn take_card_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_number, ::std::string::String::new())
    }

    // int32 started_at = 19;


    pub fn get_started_at(&self) -> i32 {
        self.started_at
    }
    pub fn clear_started_at(&mut self) {
        self.started_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_started_at(&mut self, v: i32) {
        self.started_at = v;
    }

    // string merchant_uid = 20;


    pub fn get_merchant_uid(&self) -> &str {
        &self.merchant_uid
    }
    pub fn clear_merchant_uid(&mut self) {
        self.merchant_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_merchant_uid(&mut self, v: ::std::string::String) {
        self.merchant_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_merchant_uid(&mut self) -> &mut ::std::string::String {
        &mut self.merchant_uid
    }

    // Take field
    pub fn take_merchant_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.merchant_uid, ::std::string::String::new())
    }

    // string vbank_num = 21;


    pub fn get_vbank_num(&self) -> &str {
        &self.vbank_num
    }
    pub fn clear_vbank_num(&mut self) {
        self.vbank_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_vbank_num(&mut self, v: ::std::string::String) {
        self.vbank_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vbank_num(&mut self) -> &mut ::std::string::String {
        &mut self.vbank_num
    }

    // Take field
    pub fn take_vbank_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vbank_num, ::std::string::String::new())
    }

    // string customer_uid = 22;


    pub fn get_customer_uid(&self) -> &str {
        &self.customer_uid
    }
    pub fn clear_customer_uid(&mut self) {
        self.customer_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid(&mut self, v: ::std::string::String) {
        self.customer_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_uid(&mut self) -> &mut ::std::string::String {
        &mut self.customer_uid
    }

    // Take field
    pub fn take_customer_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_uid, ::std::string::String::new())
    }

    // string fail_reason = 23;


    pub fn get_fail_reason(&self) -> &str {
        &self.fail_reason
    }
    pub fn clear_fail_reason(&mut self) {
        self.fail_reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_fail_reason(&mut self, v: ::std::string::String) {
        self.fail_reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fail_reason(&mut self) -> &mut ::std::string::String {
        &mut self.fail_reason
    }

    // Take field
    pub fn take_fail_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fail_reason, ::std::string::String::new())
    }

    // string imp_uid = 24;


    pub fn get_imp_uid(&self) -> &str {
        &self.imp_uid
    }
    pub fn clear_imp_uid(&mut self) {
        self.imp_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_imp_uid(&mut self, v: ::std::string::String) {
        self.imp_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_imp_uid(&mut self) -> &mut ::std::string::String {
        &mut self.imp_uid
    }

    // Take field
    pub fn take_imp_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.imp_uid, ::std::string::String::new())
    }

    // string buyer_postcode = 25;


    pub fn get_buyer_postcode(&self) -> &str {
        &self.buyer_postcode
    }
    pub fn clear_buyer_postcode(&mut self) {
        self.buyer_postcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer_postcode(&mut self, v: ::std::string::String) {
        self.buyer_postcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer_postcode(&mut self) -> &mut ::std::string::String {
        &mut self.buyer_postcode
    }

    // Take field
    pub fn take_buyer_postcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer_postcode, ::std::string::String::new())
    }

    // int32 paid_at = 26;


    pub fn get_paid_at(&self) -> i32 {
        self.paid_at
    }
    pub fn clear_paid_at(&mut self) {
        self.paid_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_paid_at(&mut self, v: i32) {
        self.paid_at = v;
    }

    // string pg_provider = 27;


    pub fn get_pg_provider(&self) -> &str {
        &self.pg_provider
    }
    pub fn clear_pg_provider(&mut self) {
        self.pg_provider.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_provider(&mut self, v: ::std::string::String) {
        self.pg_provider = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_provider(&mut self) -> &mut ::std::string::String {
        &mut self.pg_provider
    }

    // Take field
    pub fn take_pg_provider(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_provider, ::std::string::String::new())
    }

    // string bank_name = 28;


    pub fn get_bank_name(&self) -> &str {
        &self.bank_name
    }
    pub fn clear_bank_name(&mut self) {
        self.bank_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_bank_name(&mut self, v: ::std::string::String) {
        self.bank_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bank_name(&mut self) -> &mut ::std::string::String {
        &mut self.bank_name
    }

    // Take field
    pub fn take_bank_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bank_name, ::std::string::String::new())
    }

    // int32 vbank_issued_at = 29;


    pub fn get_vbank_issued_at(&self) -> i32 {
        self.vbank_issued_at
    }
    pub fn clear_vbank_issued_at(&mut self) {
        self.vbank_issued_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_vbank_issued_at(&mut self, v: i32) {
        self.vbank_issued_at = v;
    }

    // string vbank_code = 30;


    pub fn get_vbank_code(&self) -> &str {
        &self.vbank_code
    }
    pub fn clear_vbank_code(&mut self) {
        self.vbank_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_vbank_code(&mut self, v: ::std::string::String) {
        self.vbank_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vbank_code(&mut self) -> &mut ::std::string::String {
        &mut self.vbank_code
    }

    // Take field
    pub fn take_vbank_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vbank_code, ::std::string::String::new())
    }

    // string receipt_url = 31;


    pub fn get_receipt_url(&self) -> &str {
        &self.receipt_url
    }
    pub fn clear_receipt_url(&mut self) {
        self.receipt_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_receipt_url(&mut self, v: ::std::string::String) {
        self.receipt_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receipt_url(&mut self) -> &mut ::std::string::String {
        &mut self.receipt_url
    }

    // Take field
    pub fn take_receipt_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receipt_url, ::std::string::String::new())
    }

    // int32 card_quota = 32;


    pub fn get_card_quota(&self) -> i32 {
        self.card_quota
    }
    pub fn clear_card_quota(&mut self) {
        self.card_quota = 0;
    }

    // Param is passed by value, moved
    pub fn set_card_quota(&mut self, v: i32) {
        self.card_quota = v;
    }

    // string buyer_email = 33;


    pub fn get_buyer_email(&self) -> &str {
        &self.buyer_email
    }
    pub fn clear_buyer_email(&mut self) {
        self.buyer_email.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer_email(&mut self, v: ::std::string::String) {
        self.buyer_email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer_email(&mut self) -> &mut ::std::string::String {
        &mut self.buyer_email
    }

    // Take field
    pub fn take_buyer_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer_email, ::std::string::String::new())
    }

    // string user_agent = 34;


    pub fn get_user_agent(&self) -> &str {
        &self.user_agent
    }
    pub fn clear_user_agent(&mut self) {
        self.user_agent.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_agent(&mut self, v: ::std::string::String) {
        self.user_agent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_agent(&mut self) -> &mut ::std::string::String {
        &mut self.user_agent
    }

    // Take field
    pub fn take_user_agent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.user_agent, ::std::string::String::new())
    }

    // string status = 35;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    // string cancel_reason = 36;


    pub fn get_cancel_reason(&self) -> &str {
        &self.cancel_reason
    }
    pub fn clear_cancel_reason(&mut self) {
        self.cancel_reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_cancel_reason(&mut self, v: ::std::string::String) {
        self.cancel_reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cancel_reason(&mut self) -> &mut ::std::string::String {
        &mut self.cancel_reason
    }

    // Take field
    pub fn take_cancel_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cancel_reason, ::std::string::String::new())
    }

    // string custom_data = 37;


    pub fn get_custom_data(&self) -> &str {
        &self.custom_data
    }
    pub fn clear_custom_data(&mut self) {
        self.custom_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom_data(&mut self, v: ::std::string::String) {
        self.custom_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom_data(&mut self) -> &mut ::std::string::String {
        &mut self.custom_data
    }

    // Take field
    pub fn take_custom_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom_data, ::std::string::String::new())
    }

    // bool cash_receipt_issued = 38;


    pub fn get_cash_receipt_issued(&self) -> bool {
        self.cash_receipt_issued
    }
    pub fn clear_cash_receipt_issued(&mut self) {
        self.cash_receipt_issued = false;
    }

    // Param is passed by value, moved
    pub fn set_cash_receipt_issued(&mut self, v: bool) {
        self.cash_receipt_issued = v;
    }

    // int32 card_type = 39;


    pub fn get_card_type(&self) -> i32 {
        self.card_type
    }
    pub fn clear_card_type(&mut self) {
        self.card_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_card_type(&mut self, v: i32) {
        self.card_type = v;
    }

    // string buyer_tel = 40;


    pub fn get_buyer_tel(&self) -> &str {
        &self.buyer_tel
    }
    pub fn clear_buyer_tel(&mut self) {
        self.buyer_tel.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer_tel(&mut self, v: ::std::string::String) {
        self.buyer_tel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer_tel(&mut self) -> &mut ::std::string::String {
        &mut self.buyer_tel
    }

    // Take field
    pub fn take_buyer_tel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer_tel, ::std::string::String::new())
    }

    // int32 amount = 41;


    pub fn get_amount(&self) -> i32 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i32) {
        self.amount = v;
    }

    // string name = 42;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string pay_method = 43;


    pub fn get_pay_method(&self) -> &str {
        &self.pay_method
    }
    pub fn clear_pay_method(&mut self) {
        self.pay_method.clear();
    }

    // Param is passed by value, moved
    pub fn set_pay_method(&mut self, v: ::std::string::String) {
        self.pay_method = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pay_method(&mut self) -> &mut ::std::string::String {
        &mut self.pay_method
    }

    // Take field
    pub fn take_pay_method(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pay_method, ::std::string::String::new())
    }

    // string channel = 44;


    pub fn get_channel(&self) -> &str {
        &self.channel
    }
    pub fn clear_channel(&mut self) {
        self.channel.clear();
    }

    // Param is passed by value, moved
    pub fn set_channel(&mut self, v: ::std::string::String) {
        self.channel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel(&mut self) -> &mut ::std::string::String {
        &mut self.channel
    }

    // Take field
    pub fn take_channel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.channel, ::std::string::String::new())
    }

    // repeated string cancel_receipt_urls = 45;


    pub fn get_cancel_receipt_urls(&self) -> &[::std::string::String] {
        &self.cancel_receipt_urls
    }
    pub fn clear_cancel_receipt_urls(&mut self) {
        self.cancel_receipt_urls.clear();
    }

    // Param is passed by value, moved
    pub fn set_cancel_receipt_urls(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.cancel_receipt_urls = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cancel_receipt_urls(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.cancel_receipt_urls
    }

    // Take field
    pub fn take_cancel_receipt_urls(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.cancel_receipt_urls, ::protobuf::RepeatedField::new())
    }

    // repeated .subscribe_customers.CancelHistory cancel_history = 46;


    pub fn get_cancel_history(&self) -> &[CancelHistory] {
        &self.cancel_history
    }
    pub fn clear_cancel_history(&mut self) {
        self.cancel_history.clear();
    }

    // Param is passed by value, moved
    pub fn set_cancel_history(&mut self, v: ::protobuf::RepeatedField<CancelHistory>) {
        self.cancel_history = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cancel_history(&mut self) -> &mut ::protobuf::RepeatedField<CancelHistory> {
        &mut self.cancel_history
    }

    // Take field
    pub fn take_cancel_history(&mut self) -> ::protobuf::RepeatedField<CancelHistory> {
        ::std::mem::replace(&mut self.cancel_history, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PaymentResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.cancel_history {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.cancel_amount = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bank_code)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.vbank_date = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_code)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_uid_usage)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_id)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.escrow = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.failed_at = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer_addr)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.apply_num)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_name)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.cancelled_at = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_tid)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vbank_holder)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vbank_name)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer_name)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_number)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.started_at = tmp;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.merchant_uid)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vbank_num)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_uid)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fail_reason)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.imp_uid)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer_postcode)?;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.paid_at = tmp;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_provider)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bank_name)?;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.vbank_issued_at = tmp;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vbank_code)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receipt_url)?;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.card_quota = tmp;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer_email)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user_agent)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cancel_reason)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom_data)?;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.cash_receipt_issued = tmp;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.card_type = tmp;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer_tel)?;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.amount = tmp;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pay_method)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.channel)?;
                },
                45 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.cancel_receipt_urls)?;
                },
                46 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cancel_history)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cancel_amount != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cancel_amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bank_code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bank_code);
        }
        if self.vbank_date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.vbank_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.card_code.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.card_code);
        }
        if !self.customer_uid_usage.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.customer_uid_usage);
        }
        if !self.pg_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.pg_id);
        }
        if self.escrow != false {
            my_size += 2;
        }
        if self.failed_at != 0 {
            my_size += ::protobuf::rt::value_size(8, self.failed_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.buyer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.buyer_addr);
        }
        if !self.apply_num.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.apply_num);
        }
        if !self.card_name.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.card_name);
        }
        if self.cancelled_at != 0 {
            my_size += ::protobuf::rt::value_size(12, self.cancelled_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.pg_tid.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.pg_tid);
        }
        if !self.vbank_holder.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.vbank_holder);
        }
        if !self.vbank_name.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.vbank_name);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.currency);
        }
        if !self.buyer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.buyer_name);
        }
        if !self.card_number.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.card_number);
        }
        if self.started_at != 0 {
            my_size += ::protobuf::rt::value_size(19, self.started_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.merchant_uid);
        }
        if !self.vbank_num.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.vbank_num);
        }
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.customer_uid);
        }
        if !self.fail_reason.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.fail_reason);
        }
        if !self.imp_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.imp_uid);
        }
        if !self.buyer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.buyer_postcode);
        }
        if self.paid_at != 0 {
            my_size += ::protobuf::rt::value_size(26, self.paid_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.pg_provider.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.pg_provider);
        }
        if !self.bank_name.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.bank_name);
        }
        if self.vbank_issued_at != 0 {
            my_size += ::protobuf::rt::value_size(29, self.vbank_issued_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.vbank_code.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.vbank_code);
        }
        if !self.receipt_url.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.receipt_url);
        }
        if self.card_quota != 0 {
            my_size += ::protobuf::rt::value_size(32, self.card_quota, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.buyer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.buyer_email);
        }
        if !self.user_agent.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.user_agent);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.status);
        }
        if !self.cancel_reason.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.cancel_reason);
        }
        if !self.custom_data.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.custom_data);
        }
        if self.cash_receipt_issued != false {
            my_size += 3;
        }
        if self.card_type != 0 {
            my_size += ::protobuf::rt::value_size(39, self.card_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.buyer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.buyer_tel);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(41, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.name);
        }
        if !self.pay_method.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.pay_method);
        }
        if !self.channel.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.channel);
        }
        for value in &self.cancel_receipt_urls {
            my_size += ::protobuf::rt::string_size(45, &value);
        };
        for value in &self.cancel_history {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.cancel_amount != 0 {
            os.write_int32(1, self.cancel_amount)?;
        }
        if !self.bank_code.is_empty() {
            os.write_string(2, &self.bank_code)?;
        }
        if self.vbank_date != 0 {
            os.write_int32(3, self.vbank_date)?;
        }
        if !self.card_code.is_empty() {
            os.write_string(4, &self.card_code)?;
        }
        if !self.customer_uid_usage.is_empty() {
            os.write_string(5, &self.customer_uid_usage)?;
        }
        if !self.pg_id.is_empty() {
            os.write_string(6, &self.pg_id)?;
        }
        if self.escrow != false {
            os.write_bool(7, self.escrow)?;
        }
        if self.failed_at != 0 {
            os.write_int32(8, self.failed_at)?;
        }
        if !self.buyer_addr.is_empty() {
            os.write_string(9, &self.buyer_addr)?;
        }
        if !self.apply_num.is_empty() {
            os.write_string(10, &self.apply_num)?;
        }
        if !self.card_name.is_empty() {
            os.write_string(11, &self.card_name)?;
        }
        if self.cancelled_at != 0 {
            os.write_int32(12, self.cancelled_at)?;
        }
        if !self.pg_tid.is_empty() {
            os.write_string(13, &self.pg_tid)?;
        }
        if !self.vbank_holder.is_empty() {
            os.write_string(14, &self.vbank_holder)?;
        }
        if !self.vbank_name.is_empty() {
            os.write_string(15, &self.vbank_name)?;
        }
        if !self.currency.is_empty() {
            os.write_string(16, &self.currency)?;
        }
        if !self.buyer_name.is_empty() {
            os.write_string(17, &self.buyer_name)?;
        }
        if !self.card_number.is_empty() {
            os.write_string(18, &self.card_number)?;
        }
        if self.started_at != 0 {
            os.write_int32(19, self.started_at)?;
        }
        if !self.merchant_uid.is_empty() {
            os.write_string(20, &self.merchant_uid)?;
        }
        if !self.vbank_num.is_empty() {
            os.write_string(21, &self.vbank_num)?;
        }
        if !self.customer_uid.is_empty() {
            os.write_string(22, &self.customer_uid)?;
        }
        if !self.fail_reason.is_empty() {
            os.write_string(23, &self.fail_reason)?;
        }
        if !self.imp_uid.is_empty() {
            os.write_string(24, &self.imp_uid)?;
        }
        if !self.buyer_postcode.is_empty() {
            os.write_string(25, &self.buyer_postcode)?;
        }
        if self.paid_at != 0 {
            os.write_int32(26, self.paid_at)?;
        }
        if !self.pg_provider.is_empty() {
            os.write_string(27, &self.pg_provider)?;
        }
        if !self.bank_name.is_empty() {
            os.write_string(28, &self.bank_name)?;
        }
        if self.vbank_issued_at != 0 {
            os.write_int32(29, self.vbank_issued_at)?;
        }
        if !self.vbank_code.is_empty() {
            os.write_string(30, &self.vbank_code)?;
        }
        if !self.receipt_url.is_empty() {
            os.write_string(31, &self.receipt_url)?;
        }
        if self.card_quota != 0 {
            os.write_int32(32, self.card_quota)?;
        }
        if !self.buyer_email.is_empty() {
            os.write_string(33, &self.buyer_email)?;
        }
        if !self.user_agent.is_empty() {
            os.write_string(34, &self.user_agent)?;
        }
        if !self.status.is_empty() {
            os.write_string(35, &self.status)?;
        }
        if !self.cancel_reason.is_empty() {
            os.write_string(36, &self.cancel_reason)?;
        }
        if !self.custom_data.is_empty() {
            os.write_string(37, &self.custom_data)?;
        }
        if self.cash_receipt_issued != false {
            os.write_bool(38, self.cash_receipt_issued)?;
        }
        if self.card_type != 0 {
            os.write_int32(39, self.card_type)?;
        }
        if !self.buyer_tel.is_empty() {
            os.write_string(40, &self.buyer_tel)?;
        }
        if self.amount != 0 {
            os.write_int32(41, self.amount)?;
        }
        if !self.name.is_empty() {
            os.write_string(42, &self.name)?;
        }
        if !self.pay_method.is_empty() {
            os.write_string(43, &self.pay_method)?;
        }
        if !self.channel.is_empty() {
            os.write_string(44, &self.channel)?;
        }
        for v in &self.cancel_receipt_urls {
            os.write_string(45, &v)?;
        };
        for v in &self.cancel_history {
            os.write_tag(46, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentResponse {
        PaymentResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "cancel_amount",
                |m: &PaymentResponse| { &m.cancel_amount },
                |m: &mut PaymentResponse| { &mut m.cancel_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bank_code",
                |m: &PaymentResponse| { &m.bank_code },
                |m: &mut PaymentResponse| { &mut m.bank_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "vbank_date",
                |m: &PaymentResponse| { &m.vbank_date },
                |m: &mut PaymentResponse| { &mut m.vbank_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_code",
                |m: &PaymentResponse| { &m.card_code },
                |m: &mut PaymentResponse| { &mut m.card_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid_usage",
                |m: &PaymentResponse| { &m.customer_uid_usage },
                |m: &mut PaymentResponse| { &mut m.customer_uid_usage },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_id",
                |m: &PaymentResponse| { &m.pg_id },
                |m: &mut PaymentResponse| { &mut m.pg_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "escrow",
                |m: &PaymentResponse| { &m.escrow },
                |m: &mut PaymentResponse| { &mut m.escrow },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "failed_at",
                |m: &PaymentResponse| { &m.failed_at },
                |m: &mut PaymentResponse| { &mut m.failed_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer_addr",
                |m: &PaymentResponse| { &m.buyer_addr },
                |m: &mut PaymentResponse| { &mut m.buyer_addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "apply_num",
                |m: &PaymentResponse| { &m.apply_num },
                |m: &mut PaymentResponse| { &mut m.apply_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_name",
                |m: &PaymentResponse| { &m.card_name },
                |m: &mut PaymentResponse| { &mut m.card_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "cancelled_at",
                |m: &PaymentResponse| { &m.cancelled_at },
                |m: &mut PaymentResponse| { &mut m.cancelled_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_tid",
                |m: &PaymentResponse| { &m.pg_tid },
                |m: &mut PaymentResponse| { &mut m.pg_tid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "vbank_holder",
                |m: &PaymentResponse| { &m.vbank_holder },
                |m: &mut PaymentResponse| { &mut m.vbank_holder },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "vbank_name",
                |m: &PaymentResponse| { &m.vbank_name },
                |m: &mut PaymentResponse| { &mut m.vbank_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &PaymentResponse| { &m.currency },
                |m: &mut PaymentResponse| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer_name",
                |m: &PaymentResponse| { &m.buyer_name },
                |m: &mut PaymentResponse| { &mut m.buyer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_number",
                |m: &PaymentResponse| { &m.card_number },
                |m: &mut PaymentResponse| { &mut m.card_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "started_at",
                |m: &PaymentResponse| { &m.started_at },
                |m: &mut PaymentResponse| { &mut m.started_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "merchant_uid",
                |m: &PaymentResponse| { &m.merchant_uid },
                |m: &mut PaymentResponse| { &mut m.merchant_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "vbank_num",
                |m: &PaymentResponse| { &m.vbank_num },
                |m: &mut PaymentResponse| { &mut m.vbank_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid",
                |m: &PaymentResponse| { &m.customer_uid },
                |m: &mut PaymentResponse| { &mut m.customer_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fail_reason",
                |m: &PaymentResponse| { &m.fail_reason },
                |m: &mut PaymentResponse| { &mut m.fail_reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "imp_uid",
                |m: &PaymentResponse| { &m.imp_uid },
                |m: &mut PaymentResponse| { &mut m.imp_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer_postcode",
                |m: &PaymentResponse| { &m.buyer_postcode },
                |m: &mut PaymentResponse| { &mut m.buyer_postcode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "paid_at",
                |m: &PaymentResponse| { &m.paid_at },
                |m: &mut PaymentResponse| { &mut m.paid_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_provider",
                |m: &PaymentResponse| { &m.pg_provider },
                |m: &mut PaymentResponse| { &mut m.pg_provider },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bank_name",
                |m: &PaymentResponse| { &m.bank_name },
                |m: &mut PaymentResponse| { &mut m.bank_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "vbank_issued_at",
                |m: &PaymentResponse| { &m.vbank_issued_at },
                |m: &mut PaymentResponse| { &mut m.vbank_issued_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "vbank_code",
                |m: &PaymentResponse| { &m.vbank_code },
                |m: &mut PaymentResponse| { &mut m.vbank_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "receipt_url",
                |m: &PaymentResponse| { &m.receipt_url },
                |m: &mut PaymentResponse| { &mut m.receipt_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "card_quota",
                |m: &PaymentResponse| { &m.card_quota },
                |m: &mut PaymentResponse| { &mut m.card_quota },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer_email",
                |m: &PaymentResponse| { &m.buyer_email },
                |m: &mut PaymentResponse| { &mut m.buyer_email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "user_agent",
                |m: &PaymentResponse| { &m.user_agent },
                |m: &mut PaymentResponse| { &mut m.user_agent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status",
                |m: &PaymentResponse| { &m.status },
                |m: &mut PaymentResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cancel_reason",
                |m: &PaymentResponse| { &m.cancel_reason },
                |m: &mut PaymentResponse| { &mut m.cancel_reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "custom_data",
                |m: &PaymentResponse| { &m.custom_data },
                |m: &mut PaymentResponse| { &mut m.custom_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "cash_receipt_issued",
                |m: &PaymentResponse| { &m.cash_receipt_issued },
                |m: &mut PaymentResponse| { &mut m.cash_receipt_issued },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "card_type",
                |m: &PaymentResponse| { &m.card_type },
                |m: &mut PaymentResponse| { &mut m.card_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer_tel",
                |m: &PaymentResponse| { &m.buyer_tel },
                |m: &mut PaymentResponse| { &mut m.buyer_tel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "amount",
                |m: &PaymentResponse| { &m.amount },
                |m: &mut PaymentResponse| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &PaymentResponse| { &m.name },
                |m: &mut PaymentResponse| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pay_method",
                |m: &PaymentResponse| { &m.pay_method },
                |m: &mut PaymentResponse| { &mut m.pay_method },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "channel",
                |m: &PaymentResponse| { &m.channel },
                |m: &mut PaymentResponse| { &mut m.channel },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cancel_receipt_urls",
                |m: &PaymentResponse| { &m.cancel_receipt_urls },
                |m: &mut PaymentResponse| { &mut m.cancel_receipt_urls },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CancelHistory>>(
                "cancel_history",
                |m: &PaymentResponse| { &m.cancel_history },
                |m: &mut PaymentResponse| { &mut m.cancel_history },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentResponse>(
                "PaymentResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentResponse {
        static instance: ::protobuf::rt::LazyV2<PaymentResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentResponse::new)
    }
}

impl ::protobuf::Clear for PaymentResponse {
    fn clear(&mut self) {
        self.cancel_amount = 0;
        self.bank_code.clear();
        self.vbank_date = 0;
        self.card_code.clear();
        self.customer_uid_usage.clear();
        self.pg_id.clear();
        self.escrow = false;
        self.failed_at = 0;
        self.buyer_addr.clear();
        self.apply_num.clear();
        self.card_name.clear();
        self.cancelled_at = 0;
        self.pg_tid.clear();
        self.vbank_holder.clear();
        self.vbank_name.clear();
        self.currency.clear();
        self.buyer_name.clear();
        self.card_number.clear();
        self.started_at = 0;
        self.merchant_uid.clear();
        self.vbank_num.clear();
        self.customer_uid.clear();
        self.fail_reason.clear();
        self.imp_uid.clear();
        self.buyer_postcode.clear();
        self.paid_at = 0;
        self.pg_provider.clear();
        self.bank_name.clear();
        self.vbank_issued_at = 0;
        self.vbank_code.clear();
        self.receipt_url.clear();
        self.card_quota = 0;
        self.buyer_email.clear();
        self.user_agent.clear();
        self.status.clear();
        self.cancel_reason.clear();
        self.custom_data.clear();
        self.cash_receipt_issued = false;
        self.card_type = 0;
        self.buyer_tel.clear();
        self.amount = 0;
        self.name.clear();
        self.pay_method.clear();
        self.channel.clear();
        self.cancel_receipt_urls.clear();
        self.cancel_history.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CustomerBillingKey {
    // message fields
    pub card_code: ::std::string::String,
    pub card_name: ::std::string::String,
    pub card_number: ::std::string::String,
    pub card_type: i32,
    pub customer_addr: ::std::string::String,
    pub customer_email: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub customer_postcode: ::std::string::String,
    pub customer_tel: ::std::string::String,
    pub customer_uid: ::std::string::String,
    pub inserted: i32,
    pub pg_id: ::std::string::String,
    pub pg_provider: ::std::string::String,
    pub updated: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CustomerBillingKey {
    fn default() -> &'a CustomerBillingKey {
        <CustomerBillingKey as ::protobuf::Message>::default_instance()
    }
}

impl CustomerBillingKey {
    pub fn new() -> CustomerBillingKey {
        ::std::default::Default::default()
    }

    // string card_code = 1;


    pub fn get_card_code(&self) -> &str {
        &self.card_code
    }
    pub fn clear_card_code(&mut self) {
        self.card_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_code(&mut self, v: ::std::string::String) {
        self.card_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_code(&mut self) -> &mut ::std::string::String {
        &mut self.card_code
    }

    // Take field
    pub fn take_card_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_code, ::std::string::String::new())
    }

    // string card_name = 2;


    pub fn get_card_name(&self) -> &str {
        &self.card_name
    }
    pub fn clear_card_name(&mut self) {
        self.card_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_name(&mut self, v: ::std::string::String) {
        self.card_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_name(&mut self) -> &mut ::std::string::String {
        &mut self.card_name
    }

    // Take field
    pub fn take_card_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_name, ::std::string::String::new())
    }

    // string card_number = 3;


    pub fn get_card_number(&self) -> &str {
        &self.card_number
    }
    pub fn clear_card_number(&mut self) {
        self.card_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_number(&mut self, v: ::std::string::String) {
        self.card_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_number(&mut self) -> &mut ::std::string::String {
        &mut self.card_number
    }

    // Take field
    pub fn take_card_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_number, ::std::string::String::new())
    }

    // int32 card_type = 4;


    pub fn get_card_type(&self) -> i32 {
        self.card_type
    }
    pub fn clear_card_type(&mut self) {
        self.card_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_card_type(&mut self, v: i32) {
        self.card_type = v;
    }

    // string customer_addr = 5;


    pub fn get_customer_addr(&self) -> &str {
        &self.customer_addr
    }
    pub fn clear_customer_addr(&mut self) {
        self.customer_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_addr(&mut self, v: ::std::string::String) {
        self.customer_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_addr(&mut self) -> &mut ::std::string::String {
        &mut self.customer_addr
    }

    // Take field
    pub fn take_customer_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_addr, ::std::string::String::new())
    }

    // string customer_email = 6;


    pub fn get_customer_email(&self) -> &str {
        &self.customer_email
    }
    pub fn clear_customer_email(&mut self) {
        self.customer_email.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_email(&mut self, v: ::std::string::String) {
        self.customer_email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_email(&mut self) -> &mut ::std::string::String {
        &mut self.customer_email
    }

    // Take field
    pub fn take_customer_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_email, ::std::string::String::new())
    }

    // string customer_name = 7;


    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }
    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    // string customer_postcode = 8;


    pub fn get_customer_postcode(&self) -> &str {
        &self.customer_postcode
    }
    pub fn clear_customer_postcode(&mut self) {
        self.customer_postcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_postcode(&mut self, v: ::std::string::String) {
        self.customer_postcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_postcode(&mut self) -> &mut ::std::string::String {
        &mut self.customer_postcode
    }

    // Take field
    pub fn take_customer_postcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_postcode, ::std::string::String::new())
    }

    // string customer_tel = 9;


    pub fn get_customer_tel(&self) -> &str {
        &self.customer_tel
    }
    pub fn clear_customer_tel(&mut self) {
        self.customer_tel.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_tel(&mut self, v: ::std::string::String) {
        self.customer_tel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_tel(&mut self) -> &mut ::std::string::String {
        &mut self.customer_tel
    }

    // Take field
    pub fn take_customer_tel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_tel, ::std::string::String::new())
    }

    // string customer_uid = 10;


    pub fn get_customer_uid(&self) -> &str {
        &self.customer_uid
    }
    pub fn clear_customer_uid(&mut self) {
        self.customer_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid(&mut self, v: ::std::string::String) {
        self.customer_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_uid(&mut self) -> &mut ::std::string::String {
        &mut self.customer_uid
    }

    // Take field
    pub fn take_customer_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_uid, ::std::string::String::new())
    }

    // int32 inserted = 11;


    pub fn get_inserted(&self) -> i32 {
        self.inserted
    }
    pub fn clear_inserted(&mut self) {
        self.inserted = 0;
    }

    // Param is passed by value, moved
    pub fn set_inserted(&mut self, v: i32) {
        self.inserted = v;
    }

    // string pg_id = 12;


    pub fn get_pg_id(&self) -> &str {
        &self.pg_id
    }
    pub fn clear_pg_id(&mut self) {
        self.pg_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_id(&mut self, v: ::std::string::String) {
        self.pg_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_id(&mut self) -> &mut ::std::string::String {
        &mut self.pg_id
    }

    // Take field
    pub fn take_pg_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_id, ::std::string::String::new())
    }

    // string pg_provider = 13;


    pub fn get_pg_provider(&self) -> &str {
        &self.pg_provider
    }
    pub fn clear_pg_provider(&mut self) {
        self.pg_provider.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_provider(&mut self, v: ::std::string::String) {
        self.pg_provider = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_provider(&mut self) -> &mut ::std::string::String {
        &mut self.pg_provider
    }

    // Take field
    pub fn take_pg_provider(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_provider, ::std::string::String::new())
    }

    // int32 updated = 14;


    pub fn get_updated(&self) -> i32 {
        self.updated
    }
    pub fn clear_updated(&mut self) {
        self.updated = 0;
    }

    // Param is passed by value, moved
    pub fn set_updated(&mut self, v: i32) {
        self.updated = v;
    }
}

impl ::protobuf::Message for CustomerBillingKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_code)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_number)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.card_type = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_addr)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_email)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_name)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_postcode)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_tel)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_uid)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.inserted = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_id)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_provider)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.updated = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_code);
        }
        if !self.card_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.card_name);
        }
        if !self.card_number.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.card_number);
        }
        if self.card_type != 0 {
            my_size += ::protobuf::rt::value_size(4, self.card_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.customer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.customer_addr);
        }
        if !self.customer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.customer_email);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer_name);
        }
        if !self.customer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.customer_postcode);
        }
        if !self.customer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.customer_tel);
        }
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.customer_uid);
        }
        if self.inserted != 0 {
            my_size += ::protobuf::rt::value_size(11, self.inserted, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.pg_id.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.pg_id);
        }
        if !self.pg_provider.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.pg_provider);
        }
        if self.updated != 0 {
            my_size += ::protobuf::rt::value_size(14, self.updated, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_code.is_empty() {
            os.write_string(1, &self.card_code)?;
        }
        if !self.card_name.is_empty() {
            os.write_string(2, &self.card_name)?;
        }
        if !self.card_number.is_empty() {
            os.write_string(3, &self.card_number)?;
        }
        if self.card_type != 0 {
            os.write_int32(4, self.card_type)?;
        }
        if !self.customer_addr.is_empty() {
            os.write_string(5, &self.customer_addr)?;
        }
        if !self.customer_email.is_empty() {
            os.write_string(6, &self.customer_email)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(7, &self.customer_name)?;
        }
        if !self.customer_postcode.is_empty() {
            os.write_string(8, &self.customer_postcode)?;
        }
        if !self.customer_tel.is_empty() {
            os.write_string(9, &self.customer_tel)?;
        }
        if !self.customer_uid.is_empty() {
            os.write_string(10, &self.customer_uid)?;
        }
        if self.inserted != 0 {
            os.write_int32(11, self.inserted)?;
        }
        if !self.pg_id.is_empty() {
            os.write_string(12, &self.pg_id)?;
        }
        if !self.pg_provider.is_empty() {
            os.write_string(13, &self.pg_provider)?;
        }
        if self.updated != 0 {
            os.write_int32(14, self.updated)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CustomerBillingKey {
        CustomerBillingKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_code",
                |m: &CustomerBillingKey| { &m.card_code },
                |m: &mut CustomerBillingKey| { &mut m.card_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_name",
                |m: &CustomerBillingKey| { &m.card_name },
                |m: &mut CustomerBillingKey| { &mut m.card_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_number",
                |m: &CustomerBillingKey| { &m.card_number },
                |m: &mut CustomerBillingKey| { &mut m.card_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "card_type",
                |m: &CustomerBillingKey| { &m.card_type },
                |m: &mut CustomerBillingKey| { &mut m.card_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_addr",
                |m: &CustomerBillingKey| { &m.customer_addr },
                |m: &mut CustomerBillingKey| { &mut m.customer_addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_email",
                |m: &CustomerBillingKey| { &m.customer_email },
                |m: &mut CustomerBillingKey| { &mut m.customer_email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_name",
                |m: &CustomerBillingKey| { &m.customer_name },
                |m: &mut CustomerBillingKey| { &mut m.customer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_postcode",
                |m: &CustomerBillingKey| { &m.customer_postcode },
                |m: &mut CustomerBillingKey| { &mut m.customer_postcode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_tel",
                |m: &CustomerBillingKey| { &m.customer_tel },
                |m: &mut CustomerBillingKey| { &mut m.customer_tel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid",
                |m: &CustomerBillingKey| { &m.customer_uid },
                |m: &mut CustomerBillingKey| { &mut m.customer_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "inserted",
                |m: &CustomerBillingKey| { &m.inserted },
                |m: &mut CustomerBillingKey| { &mut m.inserted },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_id",
                |m: &CustomerBillingKey| { &m.pg_id },
                |m: &mut CustomerBillingKey| { &mut m.pg_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_provider",
                |m: &CustomerBillingKey| { &m.pg_provider },
                |m: &mut CustomerBillingKey| { &mut m.pg_provider },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "updated",
                |m: &CustomerBillingKey| { &m.updated },
                |m: &mut CustomerBillingKey| { &mut m.updated },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CustomerBillingKey>(
                "CustomerBillingKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CustomerBillingKey {
        static instance: ::protobuf::rt::LazyV2<CustomerBillingKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CustomerBillingKey::new)
    }
}

impl ::protobuf::Clear for CustomerBillingKey {
    fn clear(&mut self) {
        self.card_code.clear();
        self.card_name.clear();
        self.card_number.clear();
        self.card_type = 0;
        self.customer_addr.clear();
        self.customer_email.clear();
        self.customer_name.clear();
        self.customer_postcode.clear();
        self.customer_tel.clear();
        self.customer_uid.clear();
        self.inserted = 0;
        self.pg_id.clear();
        self.pg_provider.clear();
        self.updated = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CustomerBillingKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomerBillingKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMultipleCustomerBillingKeyRequest {
    // message fields
    pub customer_uid: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMultipleCustomerBillingKeyRequest {
    fn default() -> &'a GetMultipleCustomerBillingKeyRequest {
        <GetMultipleCustomerBillingKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMultipleCustomerBillingKeyRequest {
    pub fn new() -> GetMultipleCustomerBillingKeyRequest {
        ::std::default::Default::default()
    }

    // repeated string customer_uid = 1;


    pub fn get_customer_uid(&self) -> &[::std::string::String] {
        &self.customer_uid
    }
    pub fn clear_customer_uid(&mut self) {
        self.customer_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.customer_uid = v;
    }

    // Mutable pointer to the field.
    pub fn mut_customer_uid(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.customer_uid
    }

    // Take field
    pub fn take_customer_uid(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.customer_uid, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetMultipleCustomerBillingKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.customer_uid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.customer_uid {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.customer_uid {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMultipleCustomerBillingKeyRequest {
        GetMultipleCustomerBillingKeyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid",
                |m: &GetMultipleCustomerBillingKeyRequest| { &m.customer_uid },
                |m: &mut GetMultipleCustomerBillingKeyRequest| { &mut m.customer_uid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetMultipleCustomerBillingKeyRequest>(
                "GetMultipleCustomerBillingKeyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetMultipleCustomerBillingKeyRequest {
        static instance: ::protobuf::rt::LazyV2<GetMultipleCustomerBillingKeyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetMultipleCustomerBillingKeyRequest::new)
    }
}

impl ::protobuf::Clear for GetMultipleCustomerBillingKeyRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMultipleCustomerBillingKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMultipleCustomerBillingKeyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMultipleCustomerBillingKeyResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::RepeatedField<CustomerBillingKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMultipleCustomerBillingKeyResponse {
    fn default() -> &'a GetMultipleCustomerBillingKeyResponse {
        <GetMultipleCustomerBillingKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetMultipleCustomerBillingKeyResponse {
    pub fn new() -> GetMultipleCustomerBillingKeyResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // repeated .subscribe_customers.CustomerBillingKey response = 3;


    pub fn get_response(&self) -> &[CustomerBillingKey] {
        &self.response
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: ::protobuf::RepeatedField<CustomerBillingKey>) {
        self.response = v;
    }

    // Mutable pointer to the field.
    pub fn mut_response(&mut self) -> &mut ::protobuf::RepeatedField<CustomerBillingKey> {
        &mut self.response
    }

    // Take field
    pub fn take_response(&mut self) -> ::protobuf::RepeatedField<CustomerBillingKey> {
        ::std::mem::replace(&mut self.response, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetMultipleCustomerBillingKeyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        for value in &self.response {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        for v in &self.response {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMultipleCustomerBillingKeyResponse {
        GetMultipleCustomerBillingKeyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &GetMultipleCustomerBillingKeyResponse| { &m.code },
                |m: &mut GetMultipleCustomerBillingKeyResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &GetMultipleCustomerBillingKeyResponse| { &m.message },
                |m: &mut GetMultipleCustomerBillingKeyResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CustomerBillingKey>>(
                "response",
                |m: &GetMultipleCustomerBillingKeyResponse| { &m.response },
                |m: &mut GetMultipleCustomerBillingKeyResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetMultipleCustomerBillingKeyResponse>(
                "GetMultipleCustomerBillingKeyResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetMultipleCustomerBillingKeyResponse {
        static instance: ::protobuf::rt::LazyV2<GetMultipleCustomerBillingKeyResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetMultipleCustomerBillingKeyResponse::new)
    }
}

impl ::protobuf::Clear for GetMultipleCustomerBillingKeyResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMultipleCustomerBillingKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMultipleCustomerBillingKeyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteCustomerBillingKeyRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    pub reason: ::std::string::String,
    pub requester: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteCustomerBillingKeyRequest {
    fn default() -> &'a DeleteCustomerBillingKeyRequest {
        <DeleteCustomerBillingKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteCustomerBillingKeyRequest {
    pub fn new() -> DeleteCustomerBillingKeyRequest {
        ::std::default::Default::default()
    }

    // string customer_uid = 1;


    pub fn get_customer_uid(&self) -> &str {
        &self.customer_uid
    }
    pub fn clear_customer_uid(&mut self) {
        self.customer_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid(&mut self, v: ::std::string::String) {
        self.customer_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_uid(&mut self) -> &mut ::std::string::String {
        &mut self.customer_uid
    }

    // Take field
    pub fn take_customer_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_uid, ::std::string::String::new())
    }

    // string reason = 2;


    pub fn get_reason(&self) -> &str {
        &self.reason
    }
    pub fn clear_reason(&mut self) {
        self.reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        &mut self.reason
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reason, ::std::string::String::new())
    }

    // string requester = 3;


    pub fn get_requester(&self) -> &str {
        &self.requester
    }
    pub fn clear_requester(&mut self) {
        self.requester.clear();
    }

    // Param is passed by value, moved
    pub fn set_requester(&mut self, v: ::std::string::String) {
        self.requester = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_requester(&mut self) -> &mut ::std::string::String {
        &mut self.requester
    }

    // Take field
    pub fn take_requester(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.requester, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteCustomerBillingKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_uid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reason)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.requester)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        if !self.reason.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.reason);
        }
        if !self.requester.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.requester);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        if !self.reason.is_empty() {
            os.write_string(2, &self.reason)?;
        }
        if !self.requester.is_empty() {
            os.write_string(3, &self.requester)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteCustomerBillingKeyRequest {
        DeleteCustomerBillingKeyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid",
                |m: &DeleteCustomerBillingKeyRequest| { &m.customer_uid },
                |m: &mut DeleteCustomerBillingKeyRequest| { &mut m.customer_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reason",
                |m: &DeleteCustomerBillingKeyRequest| { &m.reason },
                |m: &mut DeleteCustomerBillingKeyRequest| { &mut m.reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "requester",
                |m: &DeleteCustomerBillingKeyRequest| { &m.requester },
                |m: &mut DeleteCustomerBillingKeyRequest| { &mut m.requester },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteCustomerBillingKeyRequest>(
                "DeleteCustomerBillingKeyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteCustomerBillingKeyRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteCustomerBillingKeyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteCustomerBillingKeyRequest::new)
    }
}

impl ::protobuf::Clear for DeleteCustomerBillingKeyRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.reason.clear();
        self.requester.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteCustomerBillingKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteCustomerBillingKeyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteCustomerBillingKeyResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<CustomerBillingKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteCustomerBillingKeyResponse {
    fn default() -> &'a DeleteCustomerBillingKeyResponse {
        <DeleteCustomerBillingKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteCustomerBillingKeyResponse {
    pub fn new() -> DeleteCustomerBillingKeyResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .subscribe_customers.CustomerBillingKey response = 3;


    pub fn get_response(&self) -> &CustomerBillingKey {
        self.response.as_ref().unwrap_or_else(|| <CustomerBillingKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: CustomerBillingKey) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut CustomerBillingKey {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> CustomerBillingKey {
        self.response.take().unwrap_or_else(|| CustomerBillingKey::new())
    }
}

impl ::protobuf::Message for DeleteCustomerBillingKeyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteCustomerBillingKeyResponse {
        DeleteCustomerBillingKeyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &DeleteCustomerBillingKeyResponse| { &m.code },
                |m: &mut DeleteCustomerBillingKeyResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &DeleteCustomerBillingKeyResponse| { &m.message },
                |m: &mut DeleteCustomerBillingKeyResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CustomerBillingKey>>(
                "response",
                |m: &DeleteCustomerBillingKeyResponse| { &m.response },
                |m: &mut DeleteCustomerBillingKeyResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteCustomerBillingKeyResponse>(
                "DeleteCustomerBillingKeyResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteCustomerBillingKeyResponse {
        static instance: ::protobuf::rt::LazyV2<DeleteCustomerBillingKeyResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteCustomerBillingKeyResponse::new)
    }
}

impl ::protobuf::Clear for DeleteCustomerBillingKeyResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteCustomerBillingKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteCustomerBillingKeyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetCustomerBillingKeyRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetCustomerBillingKeyRequest {
    fn default() -> &'a GetCustomerBillingKeyRequest {
        <GetCustomerBillingKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetCustomerBillingKeyRequest {
    pub fn new() -> GetCustomerBillingKeyRequest {
        ::std::default::Default::default()
    }

    // string customer_uid = 1;


    pub fn get_customer_uid(&self) -> &str {
        &self.customer_uid
    }
    pub fn clear_customer_uid(&mut self) {
        self.customer_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid(&mut self, v: ::std::string::String) {
        self.customer_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_uid(&mut self) -> &mut ::std::string::String {
        &mut self.customer_uid
    }

    // Take field
    pub fn take_customer_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_uid, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetCustomerBillingKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_uid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetCustomerBillingKeyRequest {
        GetCustomerBillingKeyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid",
                |m: &GetCustomerBillingKeyRequest| { &m.customer_uid },
                |m: &mut GetCustomerBillingKeyRequest| { &mut m.customer_uid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetCustomerBillingKeyRequest>(
                "GetCustomerBillingKeyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetCustomerBillingKeyRequest {
        static instance: ::protobuf::rt::LazyV2<GetCustomerBillingKeyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetCustomerBillingKeyRequest::new)
    }
}

impl ::protobuf::Clear for GetCustomerBillingKeyRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetCustomerBillingKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCustomerBillingKeyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetCustomerBillingKeyResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<CustomerBillingKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetCustomerBillingKeyResponse {
    fn default() -> &'a GetCustomerBillingKeyResponse {
        <GetCustomerBillingKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetCustomerBillingKeyResponse {
    pub fn new() -> GetCustomerBillingKeyResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .subscribe_customers.CustomerBillingKey response = 3;


    pub fn get_response(&self) -> &CustomerBillingKey {
        self.response.as_ref().unwrap_or_else(|| <CustomerBillingKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: CustomerBillingKey) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut CustomerBillingKey {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> CustomerBillingKey {
        self.response.take().unwrap_or_else(|| CustomerBillingKey::new())
    }
}

impl ::protobuf::Message for GetCustomerBillingKeyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetCustomerBillingKeyResponse {
        GetCustomerBillingKeyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &GetCustomerBillingKeyResponse| { &m.code },
                |m: &mut GetCustomerBillingKeyResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &GetCustomerBillingKeyResponse| { &m.message },
                |m: &mut GetCustomerBillingKeyResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CustomerBillingKey>>(
                "response",
                |m: &GetCustomerBillingKeyResponse| { &m.response },
                |m: &mut GetCustomerBillingKeyResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetCustomerBillingKeyResponse>(
                "GetCustomerBillingKeyResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetCustomerBillingKeyResponse {
        static instance: ::protobuf::rt::LazyV2<GetCustomerBillingKeyResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetCustomerBillingKeyResponse::new)
    }
}

impl ::protobuf::Clear for GetCustomerBillingKeyResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetCustomerBillingKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCustomerBillingKeyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InsertCustomerBillingKeyRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    pub pg: ::std::string::String,
    pub card_number: ::std::string::String,
    pub expiry: ::std::string::String,
    pub birth: ::std::string::String,
    pub pwd_2digit: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub customer_tel: ::std::string::String,
    pub customer_email: ::std::string::String,
    pub customer_addr: ::std::string::String,
    pub customer_postcode: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InsertCustomerBillingKeyRequest {
    fn default() -> &'a InsertCustomerBillingKeyRequest {
        <InsertCustomerBillingKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl InsertCustomerBillingKeyRequest {
    pub fn new() -> InsertCustomerBillingKeyRequest {
        ::std::default::Default::default()
    }

    // string customer_uid = 1;


    pub fn get_customer_uid(&self) -> &str {
        &self.customer_uid
    }
    pub fn clear_customer_uid(&mut self) {
        self.customer_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid(&mut self, v: ::std::string::String) {
        self.customer_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_uid(&mut self) -> &mut ::std::string::String {
        &mut self.customer_uid
    }

    // Take field
    pub fn take_customer_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_uid, ::std::string::String::new())
    }

    // string pg = 2;


    pub fn get_pg(&self) -> &str {
        &self.pg
    }
    pub fn clear_pg(&mut self) {
        self.pg.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg(&mut self, v: ::std::string::String) {
        self.pg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg(&mut self) -> &mut ::std::string::String {
        &mut self.pg
    }

    // Take field
    pub fn take_pg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg, ::std::string::String::new())
    }

    // string card_number = 3;


    pub fn get_card_number(&self) -> &str {
        &self.card_number
    }
    pub fn clear_card_number(&mut self) {
        self.card_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_number(&mut self, v: ::std::string::String) {
        self.card_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_number(&mut self) -> &mut ::std::string::String {
        &mut self.card_number
    }

    // Take field
    pub fn take_card_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_number, ::std::string::String::new())
    }

    // string expiry = 4;


    pub fn get_expiry(&self) -> &str {
        &self.expiry
    }
    pub fn clear_expiry(&mut self) {
        self.expiry.clear();
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: ::std::string::String) {
        self.expiry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expiry(&mut self) -> &mut ::std::string::String {
        &mut self.expiry
    }

    // Take field
    pub fn take_expiry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.expiry, ::std::string::String::new())
    }

    // string birth = 5;


    pub fn get_birth(&self) -> &str {
        &self.birth
    }
    pub fn clear_birth(&mut self) {
        self.birth.clear();
    }

    // Param is passed by value, moved
    pub fn set_birth(&mut self, v: ::std::string::String) {
        self.birth = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_birth(&mut self) -> &mut ::std::string::String {
        &mut self.birth
    }

    // Take field
    pub fn take_birth(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.birth, ::std::string::String::new())
    }

    // string pwd_2digit = 6;


    pub fn get_pwd_2digit(&self) -> &str {
        &self.pwd_2digit
    }
    pub fn clear_pwd_2digit(&mut self) {
        self.pwd_2digit.clear();
    }

    // Param is passed by value, moved
    pub fn set_pwd_2digit(&mut self, v: ::std::string::String) {
        self.pwd_2digit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pwd_2digit(&mut self) -> &mut ::std::string::String {
        &mut self.pwd_2digit
    }

    // Take field
    pub fn take_pwd_2digit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pwd_2digit, ::std::string::String::new())
    }

    // string customer_name = 7;


    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }
    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    // string customer_tel = 8;


    pub fn get_customer_tel(&self) -> &str {
        &self.customer_tel
    }
    pub fn clear_customer_tel(&mut self) {
        self.customer_tel.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_tel(&mut self, v: ::std::string::String) {
        self.customer_tel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_tel(&mut self) -> &mut ::std::string::String {
        &mut self.customer_tel
    }

    // Take field
    pub fn take_customer_tel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_tel, ::std::string::String::new())
    }

    // string customer_email = 9;


    pub fn get_customer_email(&self) -> &str {
        &self.customer_email
    }
    pub fn clear_customer_email(&mut self) {
        self.customer_email.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_email(&mut self, v: ::std::string::String) {
        self.customer_email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_email(&mut self) -> &mut ::std::string::String {
        &mut self.customer_email
    }

    // Take field
    pub fn take_customer_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_email, ::std::string::String::new())
    }

    // string customer_addr = 10;


    pub fn get_customer_addr(&self) -> &str {
        &self.customer_addr
    }
    pub fn clear_customer_addr(&mut self) {
        self.customer_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_addr(&mut self, v: ::std::string::String) {
        self.customer_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_addr(&mut self) -> &mut ::std::string::String {
        &mut self.customer_addr
    }

    // Take field
    pub fn take_customer_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_addr, ::std::string::String::new())
    }

    // string customer_postcode = 11;


    pub fn get_customer_postcode(&self) -> &str {
        &self.customer_postcode
    }
    pub fn clear_customer_postcode(&mut self) {
        self.customer_postcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_postcode(&mut self, v: ::std::string::String) {
        self.customer_postcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_postcode(&mut self) -> &mut ::std::string::String {
        &mut self.customer_postcode
    }

    // Take field
    pub fn take_customer_postcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_postcode, ::std::string::String::new())
    }
}

impl ::protobuf::Message for InsertCustomerBillingKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_uid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_number)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.expiry)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.birth)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pwd_2digit)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_name)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_tel)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_email)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_addr)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_postcode)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        if !self.pg.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pg);
        }
        if !self.card_number.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.card_number);
        }
        if !self.expiry.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.expiry);
        }
        if !self.birth.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.birth);
        }
        if !self.pwd_2digit.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.pwd_2digit);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer_name);
        }
        if !self.customer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.customer_tel);
        }
        if !self.customer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.customer_email);
        }
        if !self.customer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.customer_addr);
        }
        if !self.customer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.customer_postcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        if !self.pg.is_empty() {
            os.write_string(2, &self.pg)?;
        }
        if !self.card_number.is_empty() {
            os.write_string(3, &self.card_number)?;
        }
        if !self.expiry.is_empty() {
            os.write_string(4, &self.expiry)?;
        }
        if !self.birth.is_empty() {
            os.write_string(5, &self.birth)?;
        }
        if !self.pwd_2digit.is_empty() {
            os.write_string(6, &self.pwd_2digit)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(7, &self.customer_name)?;
        }
        if !self.customer_tel.is_empty() {
            os.write_string(8, &self.customer_tel)?;
        }
        if !self.customer_email.is_empty() {
            os.write_string(9, &self.customer_email)?;
        }
        if !self.customer_addr.is_empty() {
            os.write_string(10, &self.customer_addr)?;
        }
        if !self.customer_postcode.is_empty() {
            os.write_string(11, &self.customer_postcode)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InsertCustomerBillingKeyRequest {
        InsertCustomerBillingKeyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid",
                |m: &InsertCustomerBillingKeyRequest| { &m.customer_uid },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg",
                |m: &InsertCustomerBillingKeyRequest| { &m.pg },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.pg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_number",
                |m: &InsertCustomerBillingKeyRequest| { &m.card_number },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.card_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "expiry",
                |m: &InsertCustomerBillingKeyRequest| { &m.expiry },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.expiry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "birth",
                |m: &InsertCustomerBillingKeyRequest| { &m.birth },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.birth },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pwd_2digit",
                |m: &InsertCustomerBillingKeyRequest| { &m.pwd_2digit },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.pwd_2digit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_name",
                |m: &InsertCustomerBillingKeyRequest| { &m.customer_name },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_tel",
                |m: &InsertCustomerBillingKeyRequest| { &m.customer_tel },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_tel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_email",
                |m: &InsertCustomerBillingKeyRequest| { &m.customer_email },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_addr",
                |m: &InsertCustomerBillingKeyRequest| { &m.customer_addr },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_postcode",
                |m: &InsertCustomerBillingKeyRequest| { &m.customer_postcode },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_postcode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InsertCustomerBillingKeyRequest>(
                "InsertCustomerBillingKeyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InsertCustomerBillingKeyRequest {
        static instance: ::protobuf::rt::LazyV2<InsertCustomerBillingKeyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InsertCustomerBillingKeyRequest::new)
    }
}

impl ::protobuf::Clear for InsertCustomerBillingKeyRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.pg.clear();
        self.card_number.clear();
        self.expiry.clear();
        self.birth.clear();
        self.pwd_2digit.clear();
        self.customer_name.clear();
        self.customer_tel.clear();
        self.customer_email.clear();
        self.customer_addr.clear();
        self.customer_postcode.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InsertCustomerBillingKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InsertCustomerBillingKeyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InsertCustomerBillingKeyResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<CustomerBillingKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InsertCustomerBillingKeyResponse {
    fn default() -> &'a InsertCustomerBillingKeyResponse {
        <InsertCustomerBillingKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl InsertCustomerBillingKeyResponse {
    pub fn new() -> InsertCustomerBillingKeyResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .subscribe_customers.CustomerBillingKey response = 3;


    pub fn get_response(&self) -> &CustomerBillingKey {
        self.response.as_ref().unwrap_or_else(|| <CustomerBillingKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: CustomerBillingKey) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut CustomerBillingKey {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> CustomerBillingKey {
        self.response.take().unwrap_or_else(|| CustomerBillingKey::new())
    }
}

impl ::protobuf::Message for InsertCustomerBillingKeyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InsertCustomerBillingKeyResponse {
        InsertCustomerBillingKeyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &InsertCustomerBillingKeyResponse| { &m.code },
                |m: &mut InsertCustomerBillingKeyResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &InsertCustomerBillingKeyResponse| { &m.message },
                |m: &mut InsertCustomerBillingKeyResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CustomerBillingKey>>(
                "response",
                |m: &InsertCustomerBillingKeyResponse| { &m.response },
                |m: &mut InsertCustomerBillingKeyResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InsertCustomerBillingKeyResponse>(
                "InsertCustomerBillingKeyResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InsertCustomerBillingKeyResponse {
        static instance: ::protobuf::rt::LazyV2<InsertCustomerBillingKeyResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InsertCustomerBillingKeyResponse::new)
    }
}

impl ::protobuf::Clear for InsertCustomerBillingKeyResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InsertCustomerBillingKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InsertCustomerBillingKeyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPaidByBillingKeyListRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    pub page: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPaidByBillingKeyListRequest {
    fn default() -> &'a GetPaidByBillingKeyListRequest {
        <GetPaidByBillingKeyListRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPaidByBillingKeyListRequest {
    pub fn new() -> GetPaidByBillingKeyListRequest {
        ::std::default::Default::default()
    }

    // string customer_uid = 1;


    pub fn get_customer_uid(&self) -> &str {
        &self.customer_uid
    }
    pub fn clear_customer_uid(&mut self) {
        self.customer_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid(&mut self, v: ::std::string::String) {
        self.customer_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_uid(&mut self) -> &mut ::std::string::String {
        &mut self.customer_uid
    }

    // Take field
    pub fn take_customer_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_uid, ::std::string::String::new())
    }

    // int32 page = 2;


    pub fn get_page(&self) -> i32 {
        self.page
    }
    pub fn clear_page(&mut self) {
        self.page = 0;
    }

    // Param is passed by value, moved
    pub fn set_page(&mut self, v: i32) {
        self.page = v;
    }
}

impl ::protobuf::Message for GetPaidByBillingKeyListRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_uid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        if self.page != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        if self.page != 0 {
            os.write_int32(2, self.page)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetPaidByBillingKeyListRequest {
        GetPaidByBillingKeyListRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid",
                |m: &GetPaidByBillingKeyListRequest| { &m.customer_uid },
                |m: &mut GetPaidByBillingKeyListRequest| { &mut m.customer_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page",
                |m: &GetPaidByBillingKeyListRequest| { &m.page },
                |m: &mut GetPaidByBillingKeyListRequest| { &mut m.page },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetPaidByBillingKeyListRequest>(
                "GetPaidByBillingKeyListRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetPaidByBillingKeyListRequest {
        static instance: ::protobuf::rt::LazyV2<GetPaidByBillingKeyListRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetPaidByBillingKeyListRequest::new)
    }
}

impl ::protobuf::Clear for GetPaidByBillingKeyListRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.page = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPaidByBillingKeyListRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaidByBillingKeyListRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NestedGetPaidByBillingKeyListResponse {
    // message fields
    pub total: i32,
    pub previous: i32,
    pub next: i32,
    pub list: ::protobuf::RepeatedField<PaymentResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NestedGetPaidByBillingKeyListResponse {
    fn default() -> &'a NestedGetPaidByBillingKeyListResponse {
        <NestedGetPaidByBillingKeyListResponse as ::protobuf::Message>::default_instance()
    }
}

impl NestedGetPaidByBillingKeyListResponse {
    pub fn new() -> NestedGetPaidByBillingKeyListResponse {
        ::std::default::Default::default()
    }

    // int32 total = 1;


    pub fn get_total(&self) -> i32 {
        self.total
    }
    pub fn clear_total(&mut self) {
        self.total = 0;
    }

    // Param is passed by value, moved
    pub fn set_total(&mut self, v: i32) {
        self.total = v;
    }

    // int32 previous = 2;


    pub fn get_previous(&self) -> i32 {
        self.previous
    }
    pub fn clear_previous(&mut self) {
        self.previous = 0;
    }

    // Param is passed by value, moved
    pub fn set_previous(&mut self, v: i32) {
        self.previous = v;
    }

    // int32 next = 3;


    pub fn get_next(&self) -> i32 {
        self.next
    }
    pub fn clear_next(&mut self) {
        self.next = 0;
    }

    // Param is passed by value, moved
    pub fn set_next(&mut self, v: i32) {
        self.next = v;
    }

    // repeated .subscribe_customers.PaymentResponse list = 4;


    pub fn get_list(&self) -> &[PaymentResponse] {
        &self.list
    }
    pub fn clear_list(&mut self) {
        self.list.clear();
    }

    // Param is passed by value, moved
    pub fn set_list(&mut self, v: ::protobuf::RepeatedField<PaymentResponse>) {
        self.list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_list(&mut self) -> &mut ::protobuf::RepeatedField<PaymentResponse> {
        &mut self.list
    }

    // Take field
    pub fn take_list(&mut self) -> ::protobuf::RepeatedField<PaymentResponse> {
        ::std::mem::replace(&mut self.list, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for NestedGetPaidByBillingKeyListResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.total = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.previous = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.next = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.previous != 0 {
            my_size += ::protobuf::rt::value_size(2, self.previous, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next != 0 {
            my_size += ::protobuf::rt::value_size(3, self.next, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total != 0 {
            os.write_int32(1, self.total)?;
        }
        if self.previous != 0 {
            os.write_int32(2, self.previous)?;
        }
        if self.next != 0 {
            os.write_int32(3, self.next)?;
        }
        for v in &self.list {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NestedGetPaidByBillingKeyListResponse {
        NestedGetPaidByBillingKeyListResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "total",
                |m: &NestedGetPaidByBillingKeyListResponse| { &m.total },
                |m: &mut NestedGetPaidByBillingKeyListResponse| { &mut m.total },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "previous",
                |m: &NestedGetPaidByBillingKeyListResponse| { &m.previous },
                |m: &mut NestedGetPaidByBillingKeyListResponse| { &mut m.previous },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "next",
                |m: &NestedGetPaidByBillingKeyListResponse| { &m.next },
                |m: &mut NestedGetPaidByBillingKeyListResponse| { &mut m.next },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PaymentResponse>>(
                "list",
                |m: &NestedGetPaidByBillingKeyListResponse| { &m.list },
                |m: &mut NestedGetPaidByBillingKeyListResponse| { &mut m.list },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NestedGetPaidByBillingKeyListResponse>(
                "NestedGetPaidByBillingKeyListResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NestedGetPaidByBillingKeyListResponse {
        static instance: ::protobuf::rt::LazyV2<NestedGetPaidByBillingKeyListResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NestedGetPaidByBillingKeyListResponse::new)
    }
}

impl ::protobuf::Clear for NestedGetPaidByBillingKeyListResponse {
    fn clear(&mut self) {
        self.total = 0;
        self.previous = 0;
        self.next = 0;
        self.list.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NestedGetPaidByBillingKeyListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NestedGetPaidByBillingKeyListResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPaidByBillingKeyListResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<NestedGetPaidByBillingKeyListResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPaidByBillingKeyListResponse {
    fn default() -> &'a GetPaidByBillingKeyListResponse {
        <GetPaidByBillingKeyListResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPaidByBillingKeyListResponse {
    pub fn new() -> GetPaidByBillingKeyListResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .subscribe_customers.NestedGetPaidByBillingKeyListResponse response = 3;


    pub fn get_response(&self) -> &NestedGetPaidByBillingKeyListResponse {
        self.response.as_ref().unwrap_or_else(|| <NestedGetPaidByBillingKeyListResponse as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: NestedGetPaidByBillingKeyListResponse) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut NestedGetPaidByBillingKeyListResponse {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> NestedGetPaidByBillingKeyListResponse {
        self.response.take().unwrap_or_else(|| NestedGetPaidByBillingKeyListResponse::new())
    }
}

impl ::protobuf::Message for GetPaidByBillingKeyListResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetPaidByBillingKeyListResponse {
        GetPaidByBillingKeyListResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &GetPaidByBillingKeyListResponse| { &m.code },
                |m: &mut GetPaidByBillingKeyListResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &GetPaidByBillingKeyListResponse| { &m.message },
                |m: &mut GetPaidByBillingKeyListResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NestedGetPaidByBillingKeyListResponse>>(
                "response",
                |m: &GetPaidByBillingKeyListResponse| { &m.response },
                |m: &mut GetPaidByBillingKeyListResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetPaidByBillingKeyListResponse>(
                "GetPaidByBillingKeyListResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetPaidByBillingKeyListResponse {
        static instance: ::protobuf::rt::LazyV2<GetPaidByBillingKeyListResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetPaidByBillingKeyListResponse::new)
    }
}

impl ::protobuf::Clear for GetPaidByBillingKeyListResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPaidByBillingKeyListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaidByBillingKeyListResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-subscribe_customers/subscribe_customers.proto\x12\x13subscribe_custom\
    ers\"\x9a\x01\n\rCancelHistory\x12\x15\n\x06pg_tid\x18\x01\x20\x01(\tR\
    \x05pgTid\x12\x16\n\x06amount\x18\x02\x20\x01(\x05R\x06amount\x12!\n\x0c\
    cancelled_at\x18\x03\x20\x01(\x05R\x0bcancelledAt\x12\x16\n\x06reason\
    \x18\x04\x20\x01(\tR\x06reason\x12\x1f\n\x0breceipt_url\x18\x05\x20\x01(\
    \tR\nreceiptUrl\"\xe1\x0b\n\x0fPaymentResponse\x12#\n\rcancel_amount\x18\
    \x01\x20\x01(\x05R\x0ccancelAmount\x12\x1b\n\tbank_code\x18\x02\x20\x01(\
    \tR\x08bankCode\x12\x1d\n\nvbank_date\x18\x03\x20\x01(\x05R\tvbankDate\
    \x12\x1b\n\tcard_code\x18\x04\x20\x01(\tR\x08cardCode\x12,\n\x12customer\
    _uid_usage\x18\x05\x20\x01(\tR\x10customerUidUsage\x12\x13\n\x05pg_id\
    \x18\x06\x20\x01(\tR\x04pgId\x12\x16\n\x06escrow\x18\x07\x20\x01(\x08R\
    \x06escrow\x12\x1b\n\tfailed_at\x18\x08\x20\x01(\x05R\x08failedAt\x12\
    \x1d\n\nbuyer_addr\x18\t\x20\x01(\tR\tbuyerAddr\x12\x1b\n\tapply_num\x18\
    \n\x20\x01(\tR\x08applyNum\x12\x1b\n\tcard_name\x18\x0b\x20\x01(\tR\x08c\
    ardName\x12!\n\x0ccancelled_at\x18\x0c\x20\x01(\x05R\x0bcancelledAt\x12\
    \x15\n\x06pg_tid\x18\r\x20\x01(\tR\x05pgTid\x12!\n\x0cvbank_holder\x18\
    \x0e\x20\x01(\tR\x0bvbankHolder\x12\x1d\n\nvbank_name\x18\x0f\x20\x01(\t\
    R\tvbankName\x12\x1a\n\x08currency\x18\x10\x20\x01(\tR\x08currency\x12\
    \x1d\n\nbuyer_name\x18\x11\x20\x01(\tR\tbuyerName\x12\x1f\n\x0bcard_numb\
    er\x18\x12\x20\x01(\tR\ncardNumber\x12\x1d\n\nstarted_at\x18\x13\x20\x01\
    (\x05R\tstartedAt\x12!\n\x0cmerchant_uid\x18\x14\x20\x01(\tR\x0bmerchant\
    Uid\x12\x1b\n\tvbank_num\x18\x15\x20\x01(\tR\x08vbankNum\x12!\n\x0ccusto\
    mer_uid\x18\x16\x20\x01(\tR\x0bcustomerUid\x12\x1f\n\x0bfail_reason\x18\
    \x17\x20\x01(\tR\nfailReason\x12\x17\n\x07imp_uid\x18\x18\x20\x01(\tR\
    \x06impUid\x12%\n\x0ebuyer_postcode\x18\x19\x20\x01(\tR\rbuyerPostcode\
    \x12\x17\n\x07paid_at\x18\x1a\x20\x01(\x05R\x06paidAt\x12\x1f\n\x0bpg_pr\
    ovider\x18\x1b\x20\x01(\tR\npgProvider\x12\x1b\n\tbank_name\x18\x1c\x20\
    \x01(\tR\x08bankName\x12&\n\x0fvbank_issued_at\x18\x1d\x20\x01(\x05R\rvb\
    ankIssuedAt\x12\x1d\n\nvbank_code\x18\x1e\x20\x01(\tR\tvbankCode\x12\x1f\
    \n\x0breceipt_url\x18\x1f\x20\x01(\tR\nreceiptUrl\x12\x1d\n\ncard_quota\
    \x18\x20\x20\x01(\x05R\tcardQuota\x12\x1f\n\x0bbuyer_email\x18!\x20\x01(\
    \tR\nbuyerEmail\x12\x1d\n\nuser_agent\x18\"\x20\x01(\tR\tuserAgent\x12\
    \x16\n\x06status\x18#\x20\x01(\tR\x06status\x12#\n\rcancel_reason\x18$\
    \x20\x01(\tR\x0ccancelReason\x12\x1f\n\x0bcustom_data\x18%\x20\x01(\tR\n\
    customData\x12.\n\x13cash_receipt_issued\x18&\x20\x01(\x08R\x11cashRecei\
    ptIssued\x12\x1b\n\tcard_type\x18'\x20\x01(\x05R\x08cardType\x12\x1b\n\t\
    buyer_tel\x18(\x20\x01(\tR\x08buyerTel\x12\x16\n\x06amount\x18)\x20\x01(\
    \x05R\x06amount\x12\x12\n\x04name\x18*\x20\x01(\tR\x04name\x12\x1d\n\npa\
    y_method\x18+\x20\x01(\tR\tpayMethod\x12\x18\n\x07channel\x18,\x20\x01(\
    \tR\x07channel\x12.\n\x13cancel_receipt_urls\x18-\x20\x03(\tR\x11cancelR\
    eceiptUrls\x12I\n\x0ecancel_history\x18.\x20\x03(\x0b2\".subscribe_custo\
    mers.CancelHistoryR\rcancelHistory\"\xdc\x03\n\x12CustomerBillingKey\x12\
    \x1b\n\tcard_code\x18\x01\x20\x01(\tR\x08cardCode\x12\x1b\n\tcard_name\
    \x18\x02\x20\x01(\tR\x08cardName\x12\x1f\n\x0bcard_number\x18\x03\x20\
    \x01(\tR\ncardNumber\x12\x1b\n\tcard_type\x18\x04\x20\x01(\x05R\x08cardT\
    ype\x12#\n\rcustomer_addr\x18\x05\x20\x01(\tR\x0ccustomerAddr\x12%\n\x0e\
    customer_email\x18\x06\x20\x01(\tR\rcustomerEmail\x12#\n\rcustomer_name\
    \x18\x07\x20\x01(\tR\x0ccustomerName\x12+\n\x11customer_postcode\x18\x08\
    \x20\x01(\tR\x10customerPostcode\x12!\n\x0ccustomer_tel\x18\t\x20\x01(\t\
    R\x0bcustomerTel\x12!\n\x0ccustomer_uid\x18\n\x20\x01(\tR\x0bcustomerUid\
    \x12\x1a\n\x08inserted\x18\x0b\x20\x01(\x05R\x08inserted\x12\x13\n\x05pg\
    _id\x18\x0c\x20\x01(\tR\x04pgId\x12\x1f\n\x0bpg_provider\x18\r\x20\x01(\
    \tR\npgProvider\x12\x18\n\x07updated\x18\x0e\x20\x01(\x05R\x07updated\"I\
    \n$GetMultipleCustomerBillingKeyRequest\x12!\n\x0ccustomer_uid\x18\x01\
    \x20\x03(\tR\x0bcustomerUid\"\x9a\x01\n%GetMultipleCustomerBillingKeyRes\
    ponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07messa\
    ge\x18\x02\x20\x01(\tR\x07message\x12C\n\x08response\x18\x03\x20\x03(\
    \x0b2'.subscribe_customers.CustomerBillingKeyR\x08response\"z\n\x1fDelet\
    eCustomerBillingKeyRequest\x12!\n\x0ccustomer_uid\x18\x01\x20\x01(\tR\
    \x0bcustomerUid\x12\x16\n\x06reason\x18\x02\x20\x01(\tR\x06reason\x12\
    \x1c\n\trequester\x18\x03\x20\x01(\tR\trequester\"\x95\x01\n\x20DeleteCu\
    stomerBillingKeyResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\
    \x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\x12C\n\x08response\
    \x18\x03\x20\x01(\x0b2'.subscribe_customers.CustomerBillingKeyR\x08respo\
    nse\"A\n\x1cGetCustomerBillingKeyRequest\x12!\n\x0ccustomer_uid\x18\x01\
    \x20\x01(\tR\x0bcustomerUid\"\x92\x01\n\x1dGetCustomerBillingKeyResponse\
    \x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\
    \x18\x02\x20\x01(\tR\x07message\x12C\n\x08response\x18\x03\x20\x01(\x0b2\
    '.subscribe_customers.CustomerBillingKeyR\x08response\"\x83\x03\n\x1fIns\
    ertCustomerBillingKeyRequest\x12!\n\x0ccustomer_uid\x18\x01\x20\x01(\tR\
    \x0bcustomerUid\x12\x0e\n\x02pg\x18\x02\x20\x01(\tR\x02pg\x12\x1f\n\x0bc\
    ard_number\x18\x03\x20\x01(\tR\ncardNumber\x12\x16\n\x06expiry\x18\x04\
    \x20\x01(\tR\x06expiry\x12\x14\n\x05birth\x18\x05\x20\x01(\tR\x05birth\
    \x12\x1d\n\npwd_2digit\x18\x06\x20\x01(\tR\tpwd2digit\x12#\n\rcustomer_n\
    ame\x18\x07\x20\x01(\tR\x0ccustomerName\x12!\n\x0ccustomer_tel\x18\x08\
    \x20\x01(\tR\x0bcustomerTel\x12%\n\x0ecustomer_email\x18\t\x20\x01(\tR\r\
    customerEmail\x12#\n\rcustomer_addr\x18\n\x20\x01(\tR\x0ccustomerAddr\
    \x12+\n\x11customer_postcode\x18\x0b\x20\x01(\tR\x10customerPostcode\"\
    \x95\x01\n\x20InsertCustomerBillingKeyResponse\x12\x12\n\x04code\x18\x01\
    \x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07messa\
    ge\x12C\n\x08response\x18\x03\x20\x01(\x0b2'.subscribe_customers.Custome\
    rBillingKeyR\x08response\"W\n\x1eGetPaidByBillingKeyListRequest\x12!\n\
    \x0ccustomer_uid\x18\x01\x20\x01(\tR\x0bcustomerUid\x12\x12\n\x04page\
    \x18\x02\x20\x01(\x05R\x04page\"\xa7\x01\n%NestedGetPaidByBillingKeyList\
    Response\x12\x14\n\x05total\x18\x01\x20\x01(\x05R\x05total\x12\x1a\n\x08\
    previous\x18\x02\x20\x01(\x05R\x08previous\x12\x12\n\x04next\x18\x03\x20\
    \x01(\x05R\x04next\x128\n\x04list\x18\x04\x20\x03(\x0b2$.subscribe_custo\
    mers.PaymentResponseR\x04list\"\xa7\x01\n\x1fGetPaidByBillingKeyListResp\
    onse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07messag\
    e\x18\x02\x20\x01(\tR\x07message\x12V\n\x08response\x18\x03\x20\x01(\x0b\
    2:.subscribe_customers.NestedGetPaidByBillingKeyListResponseR\x08respons\
    eB;Z9github.com/iamport/interface/build/go/subscribe_customersJ\xe5/\n\
    \x07\x12\x05\0\0\x93\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x02\x12\x03\x01\0\x1c\n\x08\n\x01\x08\x12\x03\x03\0P\n\t\n\x02\x08\x0b\
    \x12\x03\x03\0P\n\n\n\x02\x04\0\x12\x04\x05\0\x0b\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x05\x08\x15\n\x0b\n\x04\x04\0\x02\0\x12\x03\x06\x04\x16\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x06\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x06\x0b\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x06\x14\x15\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x07\x04\x15\n\x0c\n\x05\x04\0\x02\x01\
    \x05\x12\x03\x07\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x07\n\x10\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x07\x13\x14\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\x08\x04\x1b\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x08\x04\t\
    \n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x08\n\x16\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03\x08\x19\x1a\n\x0b\n\x04\x04\0\x02\x03\x12\x03\t\x04\x16\
    \n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\t\x04\n\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x03\t\x0b\x11\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\t\x14\x15\n\
    \x0b\n\x04\x04\0\x02\x04\x12\x03\n\x04\x1b\n\x0c\n\x05\x04\0\x02\x04\x05\
    \x12\x03\n\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\n\x0b\x16\n\x0c\n\
    \x05\x04\0\x02\x04\x03\x12\x03\n\x19\x1a\n\n\n\x02\x04\x01\x12\x04\r\0<\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x17\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\x0e\x03\x1b\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0e\x03\x08\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0e\t\x16\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\x0e\x19\x1a\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0f\x03\x18\
    \n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0f\x03\t\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x0f\n\x13\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x0f\x16\x17\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x10\x03\x18\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03\x10\x03\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03\x10\t\x13\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x10\x16\x17\n\
    \x0b\n\x04\x04\x01\x02\x03\x12\x03\x11\x03\x18\n\x0c\n\x05\x04\x01\x02\
    \x03\x05\x12\x03\x11\x03\t\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x11\n\
    \x13\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x11\x16\x17\n\x0b\n\x04\x04\
    \x01\x02\x04\x12\x03\x12\x03!\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\
    \x12\x03\t\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x12\n\x1c\n\x0c\n\x05\
    \x04\x01\x02\x04\x03\x12\x03\x12\x1f\x20\n\x0b\n\x04\x04\x01\x02\x05\x12\
    \x03\x13\x03\x14\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03\x13\x03\t\n\x0c\
    \n\x05\x04\x01\x02\x05\x01\x12\x03\x13\n\x0f\n\x0c\n\x05\x04\x01\x02\x05\
    \x03\x12\x03\x13\x12\x13\n\x0b\n\x04\x04\x01\x02\x06\x12\x03\x14\x03\x13\
    \n\x0c\n\x05\x04\x01\x02\x06\x05\x12\x03\x14\x03\x07\n\x0c\n\x05\x04\x01\
    \x02\x06\x01\x12\x03\x14\x08\x0e\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03\
    \x14\x11\x12\n\x0b\n\x04\x04\x01\x02\x07\x12\x03\x15\x03\x17\n\x0c\n\x05\
    \x04\x01\x02\x07\x05\x12\x03\x15\x03\x08\n\x0c\n\x05\x04\x01\x02\x07\x01\
    \x12\x03\x15\t\x12\n\x0c\n\x05\x04\x01\x02\x07\x03\x12\x03\x15\x15\x16\n\
    \x0b\n\x04\x04\x01\x02\x08\x12\x03\x16\x03\x19\n\x0c\n\x05\x04\x01\x02\
    \x08\x05\x12\x03\x16\x03\t\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\x03\x16\n\
    \x14\n\x0c\n\x05\x04\x01\x02\x08\x03\x12\x03\x16\x17\x18\n\x0b\n\x04\x04\
    \x01\x02\t\x12\x03\x17\x03\x19\n\x0c\n\x05\x04\x01\x02\t\x05\x12\x03\x17\
    \x03\t\n\x0c\n\x05\x04\x01\x02\t\x01\x12\x03\x17\n\x13\n\x0c\n\x05\x04\
    \x01\x02\t\x03\x12\x03\x17\x16\x18\n\x0b\n\x04\x04\x01\x02\n\x12\x03\x18\
    \x03\x19\n\x0c\n\x05\x04\x01\x02\n\x05\x12\x03\x18\x03\t\n\x0c\n\x05\x04\
    \x01\x02\n\x01\x12\x03\x18\n\x13\n\x0c\n\x05\x04\x01\x02\n\x03\x12\x03\
    \x18\x16\x18\n\x0b\n\x04\x04\x01\x02\x0b\x12\x03\x19\x03\x1b\n\x0c\n\x05\
    \x04\x01\x02\x0b\x05\x12\x03\x19\x03\x08\n\x0c\n\x05\x04\x01\x02\x0b\x01\
    \x12\x03\x19\t\x15\n\x0c\n\x05\x04\x01\x02\x0b\x03\x12\x03\x19\x18\x1a\n\
    \x0b\n\x04\x04\x01\x02\x0c\x12\x03\x1a\x03\x16\n\x0c\n\x05\x04\x01\x02\
    \x0c\x05\x12\x03\x1a\x03\t\n\x0c\n\x05\x04\x01\x02\x0c\x01\x12\x03\x1a\n\
    \x10\n\x0c\n\x05\x04\x01\x02\x0c\x03\x12\x03\x1a\x13\x15\n\x0b\n\x04\x04\
    \x01\x02\r\x12\x03\x1b\x03\x1c\n\x0c\n\x05\x04\x01\x02\r\x05\x12\x03\x1b\
    \x03\t\n\x0c\n\x05\x04\x01\x02\r\x01\x12\x03\x1b\n\x16\n\x0c\n\x05\x04\
    \x01\x02\r\x03\x12\x03\x1b\x19\x1b\n\x0b\n\x04\x04\x01\x02\x0e\x12\x03\
    \x1c\x03\x1a\n\x0c\n\x05\x04\x01\x02\x0e\x05\x12\x03\x1c\x03\t\n\x0c\n\
    \x05\x04\x01\x02\x0e\x01\x12\x03\x1c\n\x14\n\x0c\n\x05\x04\x01\x02\x0e\
    \x03\x12\x03\x1c\x17\x19\n\x0b\n\x04\x04\x01\x02\x0f\x12\x03\x1d\x03\x18\
    \n\x0c\n\x05\x04\x01\x02\x0f\x05\x12\x03\x1d\x03\t\n\x0c\n\x05\x04\x01\
    \x02\x0f\x01\x12\x03\x1d\n\x12\n\x0c\n\x05\x04\x01\x02\x0f\x03\x12\x03\
    \x1d\x15\x17\n\x0b\n\x04\x04\x01\x02\x10\x12\x03\x1e\x03\x1a\n\x0c\n\x05\
    \x04\x01\x02\x10\x05\x12\x03\x1e\x03\t\n\x0c\n\x05\x04\x01\x02\x10\x01\
    \x12\x03\x1e\n\x14\n\x0c\n\x05\x04\x01\x02\x10\x03\x12\x03\x1e\x17\x19\n\
    \x0b\n\x04\x04\x01\x02\x11\x12\x03\x1f\x03\x1b\n\x0c\n\x05\x04\x01\x02\
    \x11\x05\x12\x03\x1f\x03\t\n\x0c\n\x05\x04\x01\x02\x11\x01\x12\x03\x1f\n\
    \x15\n\x0c\n\x05\x04\x01\x02\x11\x03\x12\x03\x1f\x18\x1a\n\x0b\n\x04\x04\
    \x01\x02\x12\x12\x03\x20\x03\x18\n\x0c\n\x05\x04\x01\x02\x12\x05\x12\x03\
    \x20\x03\x08\n\x0c\n\x05\x04\x01\x02\x12\x01\x12\x03\x20\t\x13\n\x0c\n\
    \x05\x04\x01\x02\x12\x03\x12\x03\x20\x15\x17\n\x0b\n\x04\x04\x01\x02\x13\
    \x12\x03!\x03\x1c\n\x0c\n\x05\x04\x01\x02\x13\x05\x12\x03!\x03\t\n\x0c\n\
    \x05\x04\x01\x02\x13\x01\x12\x03!\n\x16\n\x0c\n\x05\x04\x01\x02\x13\x03\
    \x12\x03!\x19\x1b\n\x0b\n\x04\x04\x01\x02\x14\x12\x03\"\x03\x19\n\x0c\n\
    \x05\x04\x01\x02\x14\x05\x12\x03\"\x03\t\n\x0c\n\x05\x04\x01\x02\x14\x01\
    \x12\x03\"\n\x13\n\x0c\n\x05\x04\x01\x02\x14\x03\x12\x03\"\x16\x18\n\x0b\
    \n\x04\x04\x01\x02\x15\x12\x03#\x03\x1b\n\x0c\n\x05\x04\x01\x02\x15\x05\
    \x12\x03#\x03\t\n\x0c\n\x05\x04\x01\x02\x15\x01\x12\x03#\n\x16\n\x0c\n\
    \x05\x04\x01\x02\x15\x03\x12\x03#\x18\x1a\n\x0b\n\x04\x04\x01\x02\x16\
    \x12\x03$\x03\x1b\n\x0c\n\x05\x04\x01\x02\x16\x05\x12\x03$\x03\t\n\x0c\n\
    \x05\x04\x01\x02\x16\x01\x12\x03$\n\x15\n\x0c\n\x05\x04\x01\x02\x16\x03\
    \x12\x03$\x18\x1a\n\x0b\n\x04\x04\x01\x02\x17\x12\x03%\x03\x16\n\x0c\n\
    \x05\x04\x01\x02\x17\x05\x12\x03%\x03\t\n\x0c\n\x05\x04\x01\x02\x17\x01\
    \x12\x03%\n\x11\n\x0c\n\x05\x04\x01\x02\x17\x03\x12\x03%\x13\x15\n\x0b\n\
    \x04\x04\x01\x02\x18\x12\x03&\x03\x1e\n\x0c\n\x05\x04\x01\x02\x18\x05\
    \x12\x03&\x03\t\n\x0c\n\x05\x04\x01\x02\x18\x01\x12\x03&\n\x18\n\x0c\n\
    \x05\x04\x01\x02\x18\x03\x12\x03&\x1b\x1d\n\x0b\n\x04\x04\x01\x02\x19\
    \x12\x03'\x03\x16\n\x0c\n\x05\x04\x01\x02\x19\x05\x12\x03'\x03\x08\n\x0c\
    \n\x05\x04\x01\x02\x19\x01\x12\x03'\t\x10\n\x0c\n\x05\x04\x01\x02\x19\
    \x03\x12\x03'\x13\x15\n\x0b\n\x04\x04\x01\x02\x1a\x12\x03(\x03\x1b\n\x0c\
    \n\x05\x04\x01\x02\x1a\x05\x12\x03(\x03\t\n\x0c\n\x05\x04\x01\x02\x1a\
    \x01\x12\x03(\n\x15\n\x0c\n\x05\x04\x01\x02\x1a\x03\x12\x03(\x18\x1a\n\
    \x0b\n\x04\x04\x01\x02\x1b\x12\x03)\x03\x19\n\x0c\n\x05\x04\x01\x02\x1b\
    \x05\x12\x03)\x03\t\n\x0c\n\x05\x04\x01\x02\x1b\x01\x12\x03)\n\x13\n\x0c\
    \n\x05\x04\x01\x02\x1b\x03\x12\x03)\x16\x18\n\x0b\n\x04\x04\x01\x02\x1c\
    \x12\x03*\x03\x1e\n\x0c\n\x05\x04\x01\x02\x1c\x05\x12\x03*\x03\x08\n\x0c\
    \n\x05\x04\x01\x02\x1c\x01\x12\x03*\t\x18\n\x0c\n\x05\x04\x01\x02\x1c\
    \x03\x12\x03*\x1b\x1d\n\x0b\n\x04\x04\x01\x02\x1d\x12\x03+\x03\x1a\n\x0c\
    \n\x05\x04\x01\x02\x1d\x05\x12\x03+\x03\t\n\x0c\n\x05\x04\x01\x02\x1d\
    \x01\x12\x03+\n\x14\n\x0c\n\x05\x04\x01\x02\x1d\x03\x12\x03+\x17\x19\n\
    \x0b\n\x04\x04\x01\x02\x1e\x12\x03,\x03\x1b\n\x0c\n\x05\x04\x01\x02\x1e\
    \x05\x12\x03,\x03\t\n\x0c\n\x05\x04\x01\x02\x1e\x01\x12\x03,\n\x15\n\x0c\
    \n\x05\x04\x01\x02\x1e\x03\x12\x03,\x18\x1a\n\x0b\n\x04\x04\x01\x02\x1f\
    \x12\x03-\x03\x19\n\x0c\n\x05\x04\x01\x02\x1f\x05\x12\x03-\x03\x08\n\x0c\
    \n\x05\x04\x01\x02\x1f\x01\x12\x03-\t\x13\n\x0c\n\x05\x04\x01\x02\x1f\
    \x03\x12\x03-\x16\x18\n\x0b\n\x04\x04\x01\x02\x20\x12\x03.\x03\x1b\n\x0c\
    \n\x05\x04\x01\x02\x20\x05\x12\x03.\x03\t\n\x0c\n\x05\x04\x01\x02\x20\
    \x01\x12\x03.\n\x15\n\x0c\n\x05\x04\x01\x02\x20\x03\x12\x03.\x18\x1a\n\
    \x0b\n\x04\x04\x01\x02!\x12\x03/\x03\x1a\n\x0c\n\x05\x04\x01\x02!\x05\
    \x12\x03/\x03\t\n\x0c\n\x05\x04\x01\x02!\x01\x12\x03/\n\x14\n\x0c\n\x05\
    \x04\x01\x02!\x03\x12\x03/\x17\x19\n\x0b\n\x04\x04\x01\x02\"\x12\x030\
    \x03\x16\n\x0c\n\x05\x04\x01\x02\"\x05\x12\x030\x03\t\n\x0c\n\x05\x04\
    \x01\x02\"\x01\x12\x030\n\x10\n\x0c\n\x05\x04\x01\x02\"\x03\x12\x030\x13\
    \x15\n\x0b\n\x04\x04\x01\x02#\x12\x031\x03\x1c\n\x0c\n\x05\x04\x01\x02#\
    \x05\x12\x031\x03\t\n\x0c\n\x05\x04\x01\x02#\x01\x12\x031\n\x17\n\x0c\n\
    \x05\x04\x01\x02#\x03\x12\x031\x19\x1b\n\x0b\n\x04\x04\x01\x02$\x12\x032\
    \x03\x1b\n\x0c\n\x05\x04\x01\x02$\x05\x12\x032\x03\t\n\x0c\n\x05\x04\x01\
    \x02$\x01\x12\x032\n\x15\n\x0c\n\x05\x04\x01\x02$\x03\x12\x032\x18\x1a\n\
    \x0b\n\x04\x04\x01\x02%\x12\x033\x03!\n\x0c\n\x05\x04\x01\x02%\x05\x12\
    \x033\x03\x07\n\x0c\n\x05\x04\x01\x02%\x01\x12\x033\x08\x1b\n\x0c\n\x05\
    \x04\x01\x02%\x03\x12\x033\x1e\x20\n\x0b\n\x04\x04\x01\x02&\x12\x034\x03\
    \x18\n\x0c\n\x05\x04\x01\x02&\x05\x12\x034\x03\x08\n\x0c\n\x05\x04\x01\
    \x02&\x01\x12\x034\t\x12\n\x0c\n\x05\x04\x01\x02&\x03\x12\x034\x15\x17\n\
    \x0b\n\x04\x04\x01\x02'\x12\x035\x03\x19\n\x0c\n\x05\x04\x01\x02'\x05\
    \x12\x035\x03\t\n\x0c\n\x05\x04\x01\x02'\x01\x12\x035\n\x13\n\x0c\n\x05\
    \x04\x01\x02'\x03\x12\x035\x16\x18\n\x0b\n\x04\x04\x01\x02(\x12\x036\x03\
    \x15\n\x0c\n\x05\x04\x01\x02(\x05\x12\x036\x03\x08\n\x0c\n\x05\x04\x01\
    \x02(\x01\x12\x036\t\x0f\n\x0c\n\x05\x04\x01\x02(\x03\x12\x036\x12\x14\n\
    \x0b\n\x04\x04\x01\x02)\x12\x037\x03\x14\n\x0c\n\x05\x04\x01\x02)\x05\
    \x12\x037\x03\t\n\x0c\n\x05\x04\x01\x02)\x01\x12\x037\n\x0e\n\x0c\n\x05\
    \x04\x01\x02)\x03\x12\x037\x11\x13\n\x0b\n\x04\x04\x01\x02*\x12\x038\x03\
    \x1a\n\x0c\n\x05\x04\x01\x02*\x05\x12\x038\x03\t\n\x0c\n\x05\x04\x01\x02\
    *\x01\x12\x038\n\x14\n\x0c\n\x05\x04\x01\x02*\x03\x12\x038\x17\x19\n\x0b\
    \n\x04\x04\x01\x02+\x12\x039\x03\x17\n\x0c\n\x05\x04\x01\x02+\x05\x12\
    \x039\x03\t\n\x0c\n\x05\x04\x01\x02+\x01\x12\x039\n\x11\n\x0c\n\x05\x04\
    \x01\x02+\x03\x12\x039\x14\x16\n\x0b\n\x04\x04\x01\x02,\x12\x03:\x03,\n\
    \x0c\n\x05\x04\x01\x02,\x04\x12\x03:\x03\x0b\n\x0c\n\x05\x04\x01\x02,\
    \x05\x12\x03:\x0c\x12\n\x0c\n\x05\x04\x01\x02,\x01\x12\x03:\x13&\n\x0c\n\
    \x05\x04\x01\x02,\x03\x12\x03:)+\n\x0b\n\x04\x04\x01\x02-\x12\x03;\x03.\
    \n\x0c\n\x05\x04\x01\x02-\x04\x12\x03;\x03\x0b\n\x0c\n\x05\x04\x01\x02-\
    \x06\x12\x03;\x0c\x19\n\x0c\n\x05\x04\x01\x02-\x01\x12\x03;\x1a(\n\x0c\n\
    \x05\x04\x01\x02-\x03\x12\x03;+-\n\n\n\x02\x04\x02\x12\x04>\0M\x01\n\n\n\
    \x03\x04\x02\x01\x12\x03>\x08\x1a\n\x0b\n\x04\x04\x02\x02\0\x12\x03?\x06\
    \x1b\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03?\x06\x0c\n\x0c\n\x05\x04\x02\
    \x02\0\x01\x12\x03?\r\x16\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03?\x19\x1a\
    \n\x0b\n\x04\x04\x02\x02\x01\x12\x03@\x06\x1b\n\x0c\n\x05\x04\x02\x02\
    \x01\x05\x12\x03@\x06\x0c\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03@\r\x16\
    \n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03@\x19\x1a\n\x0b\n\x04\x04\x02\
    \x02\x02\x12\x03A\x06\x1d\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03A\x06\
    \x0c\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03A\r\x18\n\x0c\n\x05\x04\x02\
    \x02\x02\x03\x12\x03A\x1b\x1c\n\x0b\n\x04\x04\x02\x02\x03\x12\x03B\x06\
    \x1a\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03B\x06\x0b\n\x0c\n\x05\x04\
    \x02\x02\x03\x01\x12\x03B\x0c\x15\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\
    \x03B\x18\x19\n\x0b\n\x04\x04\x02\x02\x04\x12\x03C\x06\x1f\n\x0c\n\x05\
    \x04\x02\x02\x04\x05\x12\x03C\x06\x0c\n\x0c\n\x05\x04\x02\x02\x04\x01\
    \x12\x03C\r\x1a\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03C\x1d\x1e\n\x0b\n\
    \x04\x04\x02\x02\x05\x12\x03D\x06\x20\n\x0c\n\x05\x04\x02\x02\x05\x05\
    \x12\x03D\x06\x0c\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03D\r\x1b\n\x0c\n\
    \x05\x04\x02\x02\x05\x03\x12\x03D\x1e\x1f\n\x0b\n\x04\x04\x02\x02\x06\
    \x12\x03E\x06\x1f\n\x0c\n\x05\x04\x02\x02\x06\x05\x12\x03E\x06\x0c\n\x0c\
    \n\x05\x04\x02\x02\x06\x01\x12\x03E\r\x1a\n\x0c\n\x05\x04\x02\x02\x06\
    \x03\x12\x03E\x1d\x1e\n\x0b\n\x04\x04\x02\x02\x07\x12\x03F\x06#\n\x0c\n\
    \x05\x04\x02\x02\x07\x05\x12\x03F\x06\x0c\n\x0c\n\x05\x04\x02\x02\x07\
    \x01\x12\x03F\r\x1e\n\x0c\n\x05\x04\x02\x02\x07\x03\x12\x03F!\"\n\x0b\n\
    \x04\x04\x02\x02\x08\x12\x03G\x06\x1e\n\x0c\n\x05\x04\x02\x02\x08\x05\
    \x12\x03G\x06\x0c\n\x0c\n\x05\x04\x02\x02\x08\x01\x12\x03G\r\x19\n\x0c\n\
    \x05\x04\x02\x02\x08\x03\x12\x03G\x1c\x1d\n\x0b\n\x04\x04\x02\x02\t\x12\
    \x03H\x06\x1f\n\x0c\n\x05\x04\x02\x02\t\x05\x12\x03H\x06\x0c\n\x0c\n\x05\
    \x04\x02\x02\t\x01\x12\x03H\r\x19\n\x0c\n\x05\x04\x02\x02\t\x03\x12\x03H\
    \x1c\x1e\n\x0b\n\x04\x04\x02\x02\n\x12\x03I\x06\x1a\n\x0c\n\x05\x04\x02\
    \x02\n\x05\x12\x03I\x06\x0b\n\x0c\n\x05\x04\x02\x02\n\x01\x12\x03I\x0c\
    \x14\n\x0c\n\x05\x04\x02\x02\n\x03\x12\x03I\x17\x19\n\x0b\n\x04\x04\x02\
    \x02\x0b\x12\x03J\x06\x18\n\x0c\n\x05\x04\x02\x02\x0b\x05\x12\x03J\x06\
    \x0c\n\x0c\n\x05\x04\x02\x02\x0b\x01\x12\x03J\r\x12\n\x0c\n\x05\x04\x02\
    \x02\x0b\x03\x12\x03J\x15\x17\n\x0b\n\x04\x04\x02\x02\x0c\x12\x03K\x06\
    \x1e\n\x0c\n\x05\x04\x02\x02\x0c\x05\x12\x03K\x06\x0c\n\x0c\n\x05\x04\
    \x02\x02\x0c\x01\x12\x03K\r\x18\n\x0c\n\x05\x04\x02\x02\x0c\x03\x12\x03K\
    \x1b\x1d\n\x0b\n\x04\x04\x02\x02\r\x12\x03L\x06\x19\n\x0c\n\x05\x04\x02\
    \x02\r\x05\x12\x03L\x06\x0b\n\x0c\n\x05\x04\x02\x02\r\x01\x12\x03L\x0c\
    \x13\n\x0c\n\x05\x04\x02\x02\r\x03\x12\x03L\x16\x18\n\n\n\x02\x04\x03\
    \x12\x04O\0Q\x01\n\n\n\x03\x04\x03\x01\x12\x03O\x08,\n\x0b\n\x04\x04\x03\
    \x02\0\x12\x03P\x04%\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03P\x04\x0c\n\
    \x0c\n\x05\x04\x03\x02\0\x05\x12\x03P\r\x13\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03P\x14\x20\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03P#$\n\n\n\x02\
    \x04\x04\x12\x04S\0W\x01\n\n\n\x03\x04\x04\x01\x12\x03S\x08-\n\x0b\n\x04\
    \x04\x04\x02\0\x12\x03T\x04\x13\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03T\
    \x04\t\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03T\n\x0e\n\x0c\n\x05\x04\x04\
    \x02\0\x03\x12\x03T\x11\x12\n\x0b\n\x04\x04\x04\x02\x01\x12\x03U\x04\x17\
    \n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03U\x04\n\n\x0c\n\x05\x04\x04\x02\
    \x01\x01\x12\x03U\x0b\x12\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03U\x15\
    \x16\n\x0b\n\x04\x04\x04\x02\x02\x12\x03V\x04-\n\x0c\n\x05\x04\x04\x02\
    \x02\x04\x12\x03V\x04\x0c\n\x0c\n\x05\x04\x04\x02\x02\x06\x12\x03V\r\x1f\
    \n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03V\x20(\n\x0c\n\x05\x04\x04\x02\
    \x02\x03\x12\x03V+,\n\n\n\x02\x04\x05\x12\x04Y\0]\x01\n\n\n\x03\x04\x05\
    \x01\x12\x03Y\x08'\n\x0b\n\x04\x04\x05\x02\0\x12\x03Z\x04\x1c\n\x0c\n\
    \x05\x04\x05\x02\0\x05\x12\x03Z\x04\n\n\x0c\n\x05\x04\x05\x02\0\x01\x12\
    \x03Z\x0b\x17\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03Z\x1a\x1b\n\x0b\n\x04\
    \x04\x05\x02\x01\x12\x03[\x04\x16\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\
    \x03[\x04\n\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03[\x0b\x11\n\x0c\n\x05\
    \x04\x05\x02\x01\x03\x12\x03[\x14\x15\n\x0b\n\x04\x04\x05\x02\x02\x12\
    \x03\\\x04\x19\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x03\\\x04\n\n\x0c\n\
    \x05\x04\x05\x02\x02\x01\x12\x03\\\x0b\x14\n\x0c\n\x05\x04\x05\x02\x02\
    \x03\x12\x03\\\x17\x18\n\n\n\x02\x04\x06\x12\x04_\0c\x01\n\n\n\x03\x04\
    \x06\x01\x12\x03_\x08(\n\x0b\n\x04\x04\x06\x02\0\x12\x03`\x04\x13\n\x0c\
    \n\x05\x04\x06\x02\0\x05\x12\x03`\x04\t\n\x0c\n\x05\x04\x06\x02\0\x01\
    \x12\x03`\n\x0e\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03`\x11\x12\n\x0b\n\
    \x04\x04\x06\x02\x01\x12\x03a\x04\x17\n\x0c\n\x05\x04\x06\x02\x01\x05\
    \x12\x03a\x04\n\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03a\x0b\x12\n\x0c\n\
    \x05\x04\x06\x02\x01\x03\x12\x03a\x15\x16\n\x0b\n\x04\x04\x06\x02\x02\
    \x12\x03b\x04$\n\x0c\n\x05\x04\x06\x02\x02\x06\x12\x03b\x04\x16\n\x0c\n\
    \x05\x04\x06\x02\x02\x01\x12\x03b\x17\x1f\n\x0c\n\x05\x04\x06\x02\x02\
    \x03\x12\x03b\"#\n\n\n\x02\x04\x07\x12\x04e\0g\x01\n\n\n\x03\x04\x07\x01\
    \x12\x03e\x08$\n\x0b\n\x04\x04\x07\x02\0\x12\x03f\x04\x1c\n\x0c\n\x05\
    \x04\x07\x02\0\x05\x12\x03f\x04\n\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03f\
    \x0b\x17\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03f\x1a\x1b\n\n\n\x02\x04\
    \x08\x12\x04i\0m\x01\n\n\n\x03\x04\x08\x01\x12\x03i\x08%\n\x0b\n\x04\x04\
    \x08\x02\0\x12\x03j\x04\x13\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03j\x04\t\
    \n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03j\n\x0e\n\x0c\n\x05\x04\x08\x02\0\
    \x03\x12\x03j\x11\x12\n\x0b\n\x04\x04\x08\x02\x01\x12\x03k\x04\x17\n\x0c\
    \n\x05\x04\x08\x02\x01\x05\x12\x03k\x04\n\n\x0c\n\x05\x04\x08\x02\x01\
    \x01\x12\x03k\x0b\x12\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03k\x15\x16\n\
    \x0b\n\x04\x04\x08\x02\x02\x12\x03l\x04$\n\x0c\n\x05\x04\x08\x02\x02\x06\
    \x12\x03l\x04\x16\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03l\x17\x1f\n\x0c\
    \n\x05\x04\x08\x02\x02\x03\x12\x03l\"#\n\n\n\x02\x04\t\x12\x04o\0{\x01\n\
    \n\n\x03\x04\t\x01\x12\x03o\x08'\n\x0b\n\x04\x04\t\x02\0\x12\x03p\x04\
    \x1c\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03p\x04\n\n\x0c\n\x05\x04\t\x02\0\
    \x01\x12\x03p\x0b\x17\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03p\x1a\x1b\n\x0b\
    \n\x04\x04\t\x02\x01\x12\x03q\x04\x12\n\x0c\n\x05\x04\t\x02\x01\x05\x12\
    \x03q\x04\n\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03q\x0b\r\n\x0c\n\x05\x04\
    \t\x02\x01\x03\x12\x03q\x10\x11\n\x0b\n\x04\x04\t\x02\x02\x12\x03r\x04\
    \x1b\n\x0c\n\x05\x04\t\x02\x02\x05\x12\x03r\x04\n\n\x0c\n\x05\x04\t\x02\
    \x02\x01\x12\x03r\x0b\x16\n\x0c\n\x05\x04\t\x02\x02\x03\x12\x03r\x19\x1a\
    \n\x0b\n\x04\x04\t\x02\x03\x12\x03s\x04\x16\n\x0c\n\x05\x04\t\x02\x03\
    \x05\x12\x03s\x04\n\n\x0c\n\x05\x04\t\x02\x03\x01\x12\x03s\x0b\x11\n\x0c\
    \n\x05\x04\t\x02\x03\x03\x12\x03s\x14\x15\n\x0b\n\x04\x04\t\x02\x04\x12\
    \x03t\x04\x15\n\x0c\n\x05\x04\t\x02\x04\x05\x12\x03t\x04\n\n\x0c\n\x05\
    \x04\t\x02\x04\x01\x12\x03t\x0b\x10\n\x0c\n\x05\x04\t\x02\x04\x03\x12\
    \x03t\x13\x14\n\x0b\n\x04\x04\t\x02\x05\x12\x03u\x04\x1a\n\x0c\n\x05\x04\
    \t\x02\x05\x05\x12\x03u\x04\n\n\x0c\n\x05\x04\t\x02\x05\x01\x12\x03u\x0b\
    \x15\n\x0c\n\x05\x04\t\x02\x05\x03\x12\x03u\x18\x19\n\x0b\n\x04\x04\t\
    \x02\x06\x12\x03v\x04\x1d\n\x0c\n\x05\x04\t\x02\x06\x05\x12\x03v\x04\n\n\
    \x0c\n\x05\x04\t\x02\x06\x01\x12\x03v\x0b\x18\n\x0c\n\x05\x04\t\x02\x06\
    \x03\x12\x03v\x1b\x1c\n\x0b\n\x04\x04\t\x02\x07\x12\x03w\x04\x1c\n\x0c\n\
    \x05\x04\t\x02\x07\x05\x12\x03w\x04\n\n\x0c\n\x05\x04\t\x02\x07\x01\x12\
    \x03w\x0b\x17\n\x0c\n\x05\x04\t\x02\x07\x03\x12\x03w\x1a\x1b\n\x0b\n\x04\
    \x04\t\x02\x08\x12\x03x\x04\x1e\n\x0c\n\x05\x04\t\x02\x08\x05\x12\x03x\
    \x04\n\n\x0c\n\x05\x04\t\x02\x08\x01\x12\x03x\x0b\x19\n\x0c\n\x05\x04\t\
    \x02\x08\x03\x12\x03x\x1c\x1d\n\x0b\n\x04\x04\t\x02\t\x12\x03y\x04\x1e\n\
    \x0c\n\x05\x04\t\x02\t\x05\x12\x03y\x04\n\n\x0c\n\x05\x04\t\x02\t\x01\
    \x12\x03y\x0b\x18\n\x0c\n\x05\x04\t\x02\t\x03\x12\x03y\x1b\x1d\n\x0b\n\
    \x04\x04\t\x02\n\x12\x03z\x04\"\n\x0c\n\x05\x04\t\x02\n\x05\x12\x03z\x04\
    \n\n\x0c\n\x05\x04\t\x02\n\x01\x12\x03z\x0b\x1c\n\x0c\n\x05\x04\t\x02\n\
    \x03\x12\x03z\x1f!\n\x0b\n\x02\x04\n\x12\x05}\0\x81\x01\x01\n\n\n\x03\
    \x04\n\x01\x12\x03}\x08(\n\x0b\n\x04\x04\n\x02\0\x12\x03~\x04\x13\n\x0c\
    \n\x05\x04\n\x02\0\x05\x12\x03~\x04\t\n\x0c\n\x05\x04\n\x02\0\x01\x12\
    \x03~\n\x0e\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03~\x11\x12\n\x0b\n\x04\x04\
    \n\x02\x01\x12\x03\x7f\x04\x17\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03\x7f\
    \x04\n\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03\x7f\x0b\x12\n\x0c\n\x05\x04\
    \n\x02\x01\x03\x12\x03\x7f\x15\x16\n\x0c\n\x04\x04\n\x02\x02\x12\x04\x80\
    \x01\x04$\n\r\n\x05\x04\n\x02\x02\x06\x12\x04\x80\x01\x04\x16\n\r\n\x05\
    \x04\n\x02\x02\x01\x12\x04\x80\x01\x17\x1f\n\r\n\x05\x04\n\x02\x02\x03\
    \x12\x04\x80\x01\"#\n\x0c\n\x02\x04\x0b\x12\x06\x83\x01\0\x86\x01\x01\n\
    \x0b\n\x03\x04\x0b\x01\x12\x04\x83\x01\x08&\n\x0c\n\x04\x04\x0b\x02\0\
    \x12\x04\x84\x01\x04\x1c\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\x84\x01\x04\
    \n\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\x84\x01\x0b\x17\n\r\n\x05\x04\x0b\
    \x02\0\x03\x12\x04\x84\x01\x1a\x1b\n\x0c\n\x04\x04\x0b\x02\x01\x12\x04\
    \x85\x01\x04\x13\n\r\n\x05\x04\x0b\x02\x01\x05\x12\x04\x85\x01\x04\t\n\r\
    \n\x05\x04\x0b\x02\x01\x01\x12\x04\x85\x01\n\x0e\n\r\n\x05\x04\x0b\x02\
    \x01\x03\x12\x04\x85\x01\x11\x12\n\x0c\n\x02\x04\x0c\x12\x06\x88\x01\0\
    \x8d\x01\x01\n\x0b\n\x03\x04\x0c\x01\x12\x04\x88\x01\x08-\n\x0c\n\x04\
    \x04\x0c\x02\0\x12\x04\x89\x01\x04\x14\n\r\n\x05\x04\x0c\x02\0\x05\x12\
    \x04\x89\x01\x04\t\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\x89\x01\n\x0f\n\r\
    \n\x05\x04\x0c\x02\0\x03\x12\x04\x89\x01\x12\x13\n\x0c\n\x04\x04\x0c\x02\
    \x01\x12\x04\x8a\x01\x04\x17\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\x8a\
    \x01\x04\t\n\r\n\x05\x04\x0c\x02\x01\x01\x12\x04\x8a\x01\n\x12\n\r\n\x05\
    \x04\x0c\x02\x01\x03\x12\x04\x8a\x01\x15\x16\n\x0c\n\x04\x04\x0c\x02\x02\
    \x12\x04\x8b\x01\x04\x13\n\r\n\x05\x04\x0c\x02\x02\x05\x12\x04\x8b\x01\
    \x04\t\n\r\n\x05\x04\x0c\x02\x02\x01\x12\x04\x8b\x01\n\x0e\n\r\n\x05\x04\
    \x0c\x02\x02\x03\x12\x04\x8b\x01\x11\x12\n\x0c\n\x04\x04\x0c\x02\x03\x12\
    \x04\x8c\x01\x04&\n\r\n\x05\x04\x0c\x02\x03\x04\x12\x04\x8c\x01\x04\x0c\
    \n\r\n\x05\x04\x0c\x02\x03\x06\x12\x04\x8c\x01\r\x1c\n\r\n\x05\x04\x0c\
    \x02\x03\x01\x12\x04\x8c\x01\x1d!\n\r\n\x05\x04\x0c\x02\x03\x03\x12\x04\
    \x8c\x01$%\n\x0c\n\x02\x04\r\x12\x06\x8f\x01\0\x93\x01\x01\n\x0b\n\x03\
    \x04\r\x01\x12\x04\x8f\x01\x08'\n\x0c\n\x04\x04\r\x02\0\x12\x04\x90\x01\
    \x04\x13\n\r\n\x05\x04\r\x02\0\x05\x12\x04\x90\x01\x04\t\n\r\n\x05\x04\r\
    \x02\0\x01\x12\x04\x90\x01\n\x0e\n\r\n\x05\x04\r\x02\0\x03\x12\x04\x90\
    \x01\x11\x12\n\x0c\n\x04\x04\r\x02\x01\x12\x04\x91\x01\x04\x17\n\r\n\x05\
    \x04\r\x02\x01\x05\x12\x04\x91\x01\x04\n\n\r\n\x05\x04\r\x02\x01\x01\x12\
    \x04\x91\x01\x0b\x12\n\r\n\x05\x04\r\x02\x01\x03\x12\x04\x91\x01\x15\x16\
    \n\x0c\n\x04\x04\r\x02\x02\x12\x04\x92\x01\x047\n\r\n\x05\x04\r\x02\x02\
    \x06\x12\x04\x92\x01\x04)\n\r\n\x05\x04\r\x02\x02\x01\x12\x04\x92\x01*2\
    \n\r\n\x05\x04\r\x02\x02\x03\x12\x04\x92\x0156b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
