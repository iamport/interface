// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `subscribe_customers/subscribe_customers.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct CustomerBillingKey {
    // message fields
    pub card_code: ::std::string::String,
    pub card_name: ::std::string::String,
    pub card_number: ::std::string::String,
    pub card_type: i32,
    pub customer_addr: ::std::string::String,
    pub customer_email: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub customer_postcode: ::std::string::String,
    pub customer_tel: ::std::string::String,
    pub customer_uid: ::std::string::String,
    pub inserted: i32,
    pub pg_id: ::std::string::String,
    pub pg_provider: ::std::string::String,
    pub updated: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CustomerBillingKey {
    fn default() -> &'a CustomerBillingKey {
        <CustomerBillingKey as ::protobuf::Message>::default_instance()
    }
}

impl CustomerBillingKey {
    pub fn new() -> CustomerBillingKey {
        ::std::default::Default::default()
    }

    // string card_code = 1;


    pub fn get_card_code(&self) -> &str {
        &self.card_code
    }
    pub fn clear_card_code(&mut self) {
        self.card_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_code(&mut self, v: ::std::string::String) {
        self.card_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_code(&mut self) -> &mut ::std::string::String {
        &mut self.card_code
    }

    // Take field
    pub fn take_card_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_code, ::std::string::String::new())
    }

    // string card_name = 2;


    pub fn get_card_name(&self) -> &str {
        &self.card_name
    }
    pub fn clear_card_name(&mut self) {
        self.card_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_name(&mut self, v: ::std::string::String) {
        self.card_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_name(&mut self) -> &mut ::std::string::String {
        &mut self.card_name
    }

    // Take field
    pub fn take_card_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_name, ::std::string::String::new())
    }

    // string card_number = 3;


    pub fn get_card_number(&self) -> &str {
        &self.card_number
    }
    pub fn clear_card_number(&mut self) {
        self.card_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_number(&mut self, v: ::std::string::String) {
        self.card_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_number(&mut self) -> &mut ::std::string::String {
        &mut self.card_number
    }

    // Take field
    pub fn take_card_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_number, ::std::string::String::new())
    }

    // int32 card_type = 4;


    pub fn get_card_type(&self) -> i32 {
        self.card_type
    }
    pub fn clear_card_type(&mut self) {
        self.card_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_card_type(&mut self, v: i32) {
        self.card_type = v;
    }

    // string customer_addr = 5;


    pub fn get_customer_addr(&self) -> &str {
        &self.customer_addr
    }
    pub fn clear_customer_addr(&mut self) {
        self.customer_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_addr(&mut self, v: ::std::string::String) {
        self.customer_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_addr(&mut self) -> &mut ::std::string::String {
        &mut self.customer_addr
    }

    // Take field
    pub fn take_customer_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_addr, ::std::string::String::new())
    }

    // string customer_email = 6;


    pub fn get_customer_email(&self) -> &str {
        &self.customer_email
    }
    pub fn clear_customer_email(&mut self) {
        self.customer_email.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_email(&mut self, v: ::std::string::String) {
        self.customer_email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_email(&mut self) -> &mut ::std::string::String {
        &mut self.customer_email
    }

    // Take field
    pub fn take_customer_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_email, ::std::string::String::new())
    }

    // string customer_name = 7;


    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }
    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    // string customer_postcode = 8;


    pub fn get_customer_postcode(&self) -> &str {
        &self.customer_postcode
    }
    pub fn clear_customer_postcode(&mut self) {
        self.customer_postcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_postcode(&mut self, v: ::std::string::String) {
        self.customer_postcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_postcode(&mut self) -> &mut ::std::string::String {
        &mut self.customer_postcode
    }

    // Take field
    pub fn take_customer_postcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_postcode, ::std::string::String::new())
    }

    // string customer_tel = 9;


    pub fn get_customer_tel(&self) -> &str {
        &self.customer_tel
    }
    pub fn clear_customer_tel(&mut self) {
        self.customer_tel.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_tel(&mut self, v: ::std::string::String) {
        self.customer_tel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_tel(&mut self) -> &mut ::std::string::String {
        &mut self.customer_tel
    }

    // Take field
    pub fn take_customer_tel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_tel, ::std::string::String::new())
    }

    // string customer_uid = 10;


    pub fn get_customer_uid(&self) -> &str {
        &self.customer_uid
    }
    pub fn clear_customer_uid(&mut self) {
        self.customer_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid(&mut self, v: ::std::string::String) {
        self.customer_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_uid(&mut self) -> &mut ::std::string::String {
        &mut self.customer_uid
    }

    // Take field
    pub fn take_customer_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_uid, ::std::string::String::new())
    }

    // int32 inserted = 11;


    pub fn get_inserted(&self) -> i32 {
        self.inserted
    }
    pub fn clear_inserted(&mut self) {
        self.inserted = 0;
    }

    // Param is passed by value, moved
    pub fn set_inserted(&mut self, v: i32) {
        self.inserted = v;
    }

    // string pg_id = 12;


    pub fn get_pg_id(&self) -> &str {
        &self.pg_id
    }
    pub fn clear_pg_id(&mut self) {
        self.pg_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_id(&mut self, v: ::std::string::String) {
        self.pg_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_id(&mut self) -> &mut ::std::string::String {
        &mut self.pg_id
    }

    // Take field
    pub fn take_pg_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_id, ::std::string::String::new())
    }

    // string pg_provider = 13;


    pub fn get_pg_provider(&self) -> &str {
        &self.pg_provider
    }
    pub fn clear_pg_provider(&mut self) {
        self.pg_provider.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_provider(&mut self, v: ::std::string::String) {
        self.pg_provider = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_provider(&mut self) -> &mut ::std::string::String {
        &mut self.pg_provider
    }

    // Take field
    pub fn take_pg_provider(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_provider, ::std::string::String::new())
    }

    // int32 updated = 14;


    pub fn get_updated(&self) -> i32 {
        self.updated
    }
    pub fn clear_updated(&mut self) {
        self.updated = 0;
    }

    // Param is passed by value, moved
    pub fn set_updated(&mut self, v: i32) {
        self.updated = v;
    }
}

impl ::protobuf::Message for CustomerBillingKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_code)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_number)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.card_type = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_addr)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_email)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_name)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_postcode)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_tel)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_uid)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.inserted = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_id)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_provider)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.updated = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_code);
        }
        if !self.card_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.card_name);
        }
        if !self.card_number.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.card_number);
        }
        if self.card_type != 0 {
            my_size += ::protobuf::rt::value_size(4, self.card_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.customer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.customer_addr);
        }
        if !self.customer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.customer_email);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer_name);
        }
        if !self.customer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.customer_postcode);
        }
        if !self.customer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.customer_tel);
        }
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.customer_uid);
        }
        if self.inserted != 0 {
            my_size += ::protobuf::rt::value_size(11, self.inserted, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.pg_id.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.pg_id);
        }
        if !self.pg_provider.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.pg_provider);
        }
        if self.updated != 0 {
            my_size += ::protobuf::rt::value_size(14, self.updated, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_code.is_empty() {
            os.write_string(1, &self.card_code)?;
        }
        if !self.card_name.is_empty() {
            os.write_string(2, &self.card_name)?;
        }
        if !self.card_number.is_empty() {
            os.write_string(3, &self.card_number)?;
        }
        if self.card_type != 0 {
            os.write_int32(4, self.card_type)?;
        }
        if !self.customer_addr.is_empty() {
            os.write_string(5, &self.customer_addr)?;
        }
        if !self.customer_email.is_empty() {
            os.write_string(6, &self.customer_email)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(7, &self.customer_name)?;
        }
        if !self.customer_postcode.is_empty() {
            os.write_string(8, &self.customer_postcode)?;
        }
        if !self.customer_tel.is_empty() {
            os.write_string(9, &self.customer_tel)?;
        }
        if !self.customer_uid.is_empty() {
            os.write_string(10, &self.customer_uid)?;
        }
        if self.inserted != 0 {
            os.write_int32(11, self.inserted)?;
        }
        if !self.pg_id.is_empty() {
            os.write_string(12, &self.pg_id)?;
        }
        if !self.pg_provider.is_empty() {
            os.write_string(13, &self.pg_provider)?;
        }
        if self.updated != 0 {
            os.write_int32(14, self.updated)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CustomerBillingKey {
        CustomerBillingKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_code",
                |m: &CustomerBillingKey| { &m.card_code },
                |m: &mut CustomerBillingKey| { &mut m.card_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_name",
                |m: &CustomerBillingKey| { &m.card_name },
                |m: &mut CustomerBillingKey| { &mut m.card_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_number",
                |m: &CustomerBillingKey| { &m.card_number },
                |m: &mut CustomerBillingKey| { &mut m.card_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "card_type",
                |m: &CustomerBillingKey| { &m.card_type },
                |m: &mut CustomerBillingKey| { &mut m.card_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_addr",
                |m: &CustomerBillingKey| { &m.customer_addr },
                |m: &mut CustomerBillingKey| { &mut m.customer_addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_email",
                |m: &CustomerBillingKey| { &m.customer_email },
                |m: &mut CustomerBillingKey| { &mut m.customer_email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_name",
                |m: &CustomerBillingKey| { &m.customer_name },
                |m: &mut CustomerBillingKey| { &mut m.customer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_postcode",
                |m: &CustomerBillingKey| { &m.customer_postcode },
                |m: &mut CustomerBillingKey| { &mut m.customer_postcode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_tel",
                |m: &CustomerBillingKey| { &m.customer_tel },
                |m: &mut CustomerBillingKey| { &mut m.customer_tel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid",
                |m: &CustomerBillingKey| { &m.customer_uid },
                |m: &mut CustomerBillingKey| { &mut m.customer_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "inserted",
                |m: &CustomerBillingKey| { &m.inserted },
                |m: &mut CustomerBillingKey| { &mut m.inserted },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_id",
                |m: &CustomerBillingKey| { &m.pg_id },
                |m: &mut CustomerBillingKey| { &mut m.pg_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_provider",
                |m: &CustomerBillingKey| { &m.pg_provider },
                |m: &mut CustomerBillingKey| { &mut m.pg_provider },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "updated",
                |m: &CustomerBillingKey| { &m.updated },
                |m: &mut CustomerBillingKey| { &mut m.updated },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CustomerBillingKey>(
                "CustomerBillingKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CustomerBillingKey {
        static instance: ::protobuf::rt::LazyV2<CustomerBillingKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CustomerBillingKey::new)
    }
}

impl ::protobuf::Clear for CustomerBillingKey {
    fn clear(&mut self) {
        self.card_code.clear();
        self.card_name.clear();
        self.card_number.clear();
        self.card_type = 0;
        self.customer_addr.clear();
        self.customer_email.clear();
        self.customer_name.clear();
        self.customer_postcode.clear();
        self.customer_tel.clear();
        self.customer_uid.clear();
        self.inserted = 0;
        self.pg_id.clear();
        self.pg_provider.clear();
        self.updated = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CustomerBillingKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomerBillingKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMultipleCustomerBillingKeyRequest {
    // message fields
    pub customer_uid: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMultipleCustomerBillingKeyRequest {
    fn default() -> &'a GetMultipleCustomerBillingKeyRequest {
        <GetMultipleCustomerBillingKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMultipleCustomerBillingKeyRequest {
    pub fn new() -> GetMultipleCustomerBillingKeyRequest {
        ::std::default::Default::default()
    }

    // repeated string customer_uid = 1;


    pub fn get_customer_uid(&self) -> &[::std::string::String] {
        &self.customer_uid
    }
    pub fn clear_customer_uid(&mut self) {
        self.customer_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.customer_uid = v;
    }

    // Mutable pointer to the field.
    pub fn mut_customer_uid(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.customer_uid
    }

    // Take field
    pub fn take_customer_uid(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.customer_uid, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetMultipleCustomerBillingKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.customer_uid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.customer_uid {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.customer_uid {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMultipleCustomerBillingKeyRequest {
        GetMultipleCustomerBillingKeyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid",
                |m: &GetMultipleCustomerBillingKeyRequest| { &m.customer_uid },
                |m: &mut GetMultipleCustomerBillingKeyRequest| { &mut m.customer_uid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetMultipleCustomerBillingKeyRequest>(
                "GetMultipleCustomerBillingKeyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetMultipleCustomerBillingKeyRequest {
        static instance: ::protobuf::rt::LazyV2<GetMultipleCustomerBillingKeyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetMultipleCustomerBillingKeyRequest::new)
    }
}

impl ::protobuf::Clear for GetMultipleCustomerBillingKeyRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMultipleCustomerBillingKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMultipleCustomerBillingKeyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMultipleCustomerBillingKeyResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::RepeatedField<CustomerBillingKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMultipleCustomerBillingKeyResponse {
    fn default() -> &'a GetMultipleCustomerBillingKeyResponse {
        <GetMultipleCustomerBillingKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetMultipleCustomerBillingKeyResponse {
    pub fn new() -> GetMultipleCustomerBillingKeyResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // repeated .subscribe_customers.CustomerBillingKey response = 3;


    pub fn get_response(&self) -> &[CustomerBillingKey] {
        &self.response
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: ::protobuf::RepeatedField<CustomerBillingKey>) {
        self.response = v;
    }

    // Mutable pointer to the field.
    pub fn mut_response(&mut self) -> &mut ::protobuf::RepeatedField<CustomerBillingKey> {
        &mut self.response
    }

    // Take field
    pub fn take_response(&mut self) -> ::protobuf::RepeatedField<CustomerBillingKey> {
        ::std::mem::replace(&mut self.response, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetMultipleCustomerBillingKeyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        for value in &self.response {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        for v in &self.response {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMultipleCustomerBillingKeyResponse {
        GetMultipleCustomerBillingKeyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &GetMultipleCustomerBillingKeyResponse| { &m.code },
                |m: &mut GetMultipleCustomerBillingKeyResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &GetMultipleCustomerBillingKeyResponse| { &m.message },
                |m: &mut GetMultipleCustomerBillingKeyResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CustomerBillingKey>>(
                "response",
                |m: &GetMultipleCustomerBillingKeyResponse| { &m.response },
                |m: &mut GetMultipleCustomerBillingKeyResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetMultipleCustomerBillingKeyResponse>(
                "GetMultipleCustomerBillingKeyResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetMultipleCustomerBillingKeyResponse {
        static instance: ::protobuf::rt::LazyV2<GetMultipleCustomerBillingKeyResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetMultipleCustomerBillingKeyResponse::new)
    }
}

impl ::protobuf::Clear for GetMultipleCustomerBillingKeyResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMultipleCustomerBillingKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMultipleCustomerBillingKeyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteCustomerBillingKeyRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    pub reason: ::std::string::String,
    pub requester: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteCustomerBillingKeyRequest {
    fn default() -> &'a DeleteCustomerBillingKeyRequest {
        <DeleteCustomerBillingKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteCustomerBillingKeyRequest {
    pub fn new() -> DeleteCustomerBillingKeyRequest {
        ::std::default::Default::default()
    }

    // string customer_uid = 1;


    pub fn get_customer_uid(&self) -> &str {
        &self.customer_uid
    }
    pub fn clear_customer_uid(&mut self) {
        self.customer_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid(&mut self, v: ::std::string::String) {
        self.customer_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_uid(&mut self) -> &mut ::std::string::String {
        &mut self.customer_uid
    }

    // Take field
    pub fn take_customer_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_uid, ::std::string::String::new())
    }

    // string reason = 2;


    pub fn get_reason(&self) -> &str {
        &self.reason
    }
    pub fn clear_reason(&mut self) {
        self.reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        &mut self.reason
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reason, ::std::string::String::new())
    }

    // string requester = 3;


    pub fn get_requester(&self) -> &str {
        &self.requester
    }
    pub fn clear_requester(&mut self) {
        self.requester.clear();
    }

    // Param is passed by value, moved
    pub fn set_requester(&mut self, v: ::std::string::String) {
        self.requester = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_requester(&mut self) -> &mut ::std::string::String {
        &mut self.requester
    }

    // Take field
    pub fn take_requester(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.requester, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteCustomerBillingKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_uid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reason)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.requester)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        if !self.reason.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.reason);
        }
        if !self.requester.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.requester);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        if !self.reason.is_empty() {
            os.write_string(2, &self.reason)?;
        }
        if !self.requester.is_empty() {
            os.write_string(3, &self.requester)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteCustomerBillingKeyRequest {
        DeleteCustomerBillingKeyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid",
                |m: &DeleteCustomerBillingKeyRequest| { &m.customer_uid },
                |m: &mut DeleteCustomerBillingKeyRequest| { &mut m.customer_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reason",
                |m: &DeleteCustomerBillingKeyRequest| { &m.reason },
                |m: &mut DeleteCustomerBillingKeyRequest| { &mut m.reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "requester",
                |m: &DeleteCustomerBillingKeyRequest| { &m.requester },
                |m: &mut DeleteCustomerBillingKeyRequest| { &mut m.requester },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteCustomerBillingKeyRequest>(
                "DeleteCustomerBillingKeyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteCustomerBillingKeyRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteCustomerBillingKeyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteCustomerBillingKeyRequest::new)
    }
}

impl ::protobuf::Clear for DeleteCustomerBillingKeyRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.reason.clear();
        self.requester.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteCustomerBillingKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteCustomerBillingKeyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteCustomerBillingKeyResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<CustomerBillingKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteCustomerBillingKeyResponse {
    fn default() -> &'a DeleteCustomerBillingKeyResponse {
        <DeleteCustomerBillingKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteCustomerBillingKeyResponse {
    pub fn new() -> DeleteCustomerBillingKeyResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .subscribe_customers.CustomerBillingKey response = 3;


    pub fn get_response(&self) -> &CustomerBillingKey {
        self.response.as_ref().unwrap_or_else(|| <CustomerBillingKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: CustomerBillingKey) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut CustomerBillingKey {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> CustomerBillingKey {
        self.response.take().unwrap_or_else(|| CustomerBillingKey::new())
    }
}

impl ::protobuf::Message for DeleteCustomerBillingKeyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteCustomerBillingKeyResponse {
        DeleteCustomerBillingKeyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &DeleteCustomerBillingKeyResponse| { &m.code },
                |m: &mut DeleteCustomerBillingKeyResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &DeleteCustomerBillingKeyResponse| { &m.message },
                |m: &mut DeleteCustomerBillingKeyResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CustomerBillingKey>>(
                "response",
                |m: &DeleteCustomerBillingKeyResponse| { &m.response },
                |m: &mut DeleteCustomerBillingKeyResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteCustomerBillingKeyResponse>(
                "DeleteCustomerBillingKeyResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteCustomerBillingKeyResponse {
        static instance: ::protobuf::rt::LazyV2<DeleteCustomerBillingKeyResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteCustomerBillingKeyResponse::new)
    }
}

impl ::protobuf::Clear for DeleteCustomerBillingKeyResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteCustomerBillingKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteCustomerBillingKeyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetCustomerBillingKeyRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetCustomerBillingKeyRequest {
    fn default() -> &'a GetCustomerBillingKeyRequest {
        <GetCustomerBillingKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetCustomerBillingKeyRequest {
    pub fn new() -> GetCustomerBillingKeyRequest {
        ::std::default::Default::default()
    }

    // string customer_uid = 1;


    pub fn get_customer_uid(&self) -> &str {
        &self.customer_uid
    }
    pub fn clear_customer_uid(&mut self) {
        self.customer_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid(&mut self, v: ::std::string::String) {
        self.customer_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_uid(&mut self) -> &mut ::std::string::String {
        &mut self.customer_uid
    }

    // Take field
    pub fn take_customer_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_uid, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetCustomerBillingKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_uid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetCustomerBillingKeyRequest {
        GetCustomerBillingKeyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid",
                |m: &GetCustomerBillingKeyRequest| { &m.customer_uid },
                |m: &mut GetCustomerBillingKeyRequest| { &mut m.customer_uid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetCustomerBillingKeyRequest>(
                "GetCustomerBillingKeyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetCustomerBillingKeyRequest {
        static instance: ::protobuf::rt::LazyV2<GetCustomerBillingKeyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetCustomerBillingKeyRequest::new)
    }
}

impl ::protobuf::Clear for GetCustomerBillingKeyRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetCustomerBillingKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCustomerBillingKeyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetCustomerBillingKeyResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<CustomerBillingKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetCustomerBillingKeyResponse {
    fn default() -> &'a GetCustomerBillingKeyResponse {
        <GetCustomerBillingKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetCustomerBillingKeyResponse {
    pub fn new() -> GetCustomerBillingKeyResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .subscribe_customers.CustomerBillingKey response = 3;


    pub fn get_response(&self) -> &CustomerBillingKey {
        self.response.as_ref().unwrap_or_else(|| <CustomerBillingKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: CustomerBillingKey) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut CustomerBillingKey {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> CustomerBillingKey {
        self.response.take().unwrap_or_else(|| CustomerBillingKey::new())
    }
}

impl ::protobuf::Message for GetCustomerBillingKeyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetCustomerBillingKeyResponse {
        GetCustomerBillingKeyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &GetCustomerBillingKeyResponse| { &m.code },
                |m: &mut GetCustomerBillingKeyResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &GetCustomerBillingKeyResponse| { &m.message },
                |m: &mut GetCustomerBillingKeyResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CustomerBillingKey>>(
                "response",
                |m: &GetCustomerBillingKeyResponse| { &m.response },
                |m: &mut GetCustomerBillingKeyResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetCustomerBillingKeyResponse>(
                "GetCustomerBillingKeyResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetCustomerBillingKeyResponse {
        static instance: ::protobuf::rt::LazyV2<GetCustomerBillingKeyResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetCustomerBillingKeyResponse::new)
    }
}

impl ::protobuf::Clear for GetCustomerBillingKeyResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetCustomerBillingKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCustomerBillingKeyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InsertCustomerBillingKeyRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    pub pg: ::std::string::String,
    pub card_number: ::std::string::String,
    pub expiry: ::std::string::String,
    pub birth: ::std::string::String,
    pub pwd_2digit: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub customer_tel: ::std::string::String,
    pub customer_email: ::std::string::String,
    pub customer_addr: ::std::string::String,
    pub customer_postcode: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InsertCustomerBillingKeyRequest {
    fn default() -> &'a InsertCustomerBillingKeyRequest {
        <InsertCustomerBillingKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl InsertCustomerBillingKeyRequest {
    pub fn new() -> InsertCustomerBillingKeyRequest {
        ::std::default::Default::default()
    }

    // string customer_uid = 1;


    pub fn get_customer_uid(&self) -> &str {
        &self.customer_uid
    }
    pub fn clear_customer_uid(&mut self) {
        self.customer_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid(&mut self, v: ::std::string::String) {
        self.customer_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_uid(&mut self) -> &mut ::std::string::String {
        &mut self.customer_uid
    }

    // Take field
    pub fn take_customer_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_uid, ::std::string::String::new())
    }

    // string pg = 2;


    pub fn get_pg(&self) -> &str {
        &self.pg
    }
    pub fn clear_pg(&mut self) {
        self.pg.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg(&mut self, v: ::std::string::String) {
        self.pg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg(&mut self) -> &mut ::std::string::String {
        &mut self.pg
    }

    // Take field
    pub fn take_pg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg, ::std::string::String::new())
    }

    // string card_number = 3;


    pub fn get_card_number(&self) -> &str {
        &self.card_number
    }
    pub fn clear_card_number(&mut self) {
        self.card_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_number(&mut self, v: ::std::string::String) {
        self.card_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_number(&mut self) -> &mut ::std::string::String {
        &mut self.card_number
    }

    // Take field
    pub fn take_card_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_number, ::std::string::String::new())
    }

    // string expiry = 4;


    pub fn get_expiry(&self) -> &str {
        &self.expiry
    }
    pub fn clear_expiry(&mut self) {
        self.expiry.clear();
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: ::std::string::String) {
        self.expiry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expiry(&mut self) -> &mut ::std::string::String {
        &mut self.expiry
    }

    // Take field
    pub fn take_expiry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.expiry, ::std::string::String::new())
    }

    // string birth = 5;


    pub fn get_birth(&self) -> &str {
        &self.birth
    }
    pub fn clear_birth(&mut self) {
        self.birth.clear();
    }

    // Param is passed by value, moved
    pub fn set_birth(&mut self, v: ::std::string::String) {
        self.birth = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_birth(&mut self) -> &mut ::std::string::String {
        &mut self.birth
    }

    // Take field
    pub fn take_birth(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.birth, ::std::string::String::new())
    }

    // string pwd_2digit = 6;


    pub fn get_pwd_2digit(&self) -> &str {
        &self.pwd_2digit
    }
    pub fn clear_pwd_2digit(&mut self) {
        self.pwd_2digit.clear();
    }

    // Param is passed by value, moved
    pub fn set_pwd_2digit(&mut self, v: ::std::string::String) {
        self.pwd_2digit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pwd_2digit(&mut self) -> &mut ::std::string::String {
        &mut self.pwd_2digit
    }

    // Take field
    pub fn take_pwd_2digit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pwd_2digit, ::std::string::String::new())
    }

    // string customer_name = 7;


    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }
    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    // string customer_tel = 8;


    pub fn get_customer_tel(&self) -> &str {
        &self.customer_tel
    }
    pub fn clear_customer_tel(&mut self) {
        self.customer_tel.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_tel(&mut self, v: ::std::string::String) {
        self.customer_tel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_tel(&mut self) -> &mut ::std::string::String {
        &mut self.customer_tel
    }

    // Take field
    pub fn take_customer_tel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_tel, ::std::string::String::new())
    }

    // string customer_email = 9;


    pub fn get_customer_email(&self) -> &str {
        &self.customer_email
    }
    pub fn clear_customer_email(&mut self) {
        self.customer_email.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_email(&mut self, v: ::std::string::String) {
        self.customer_email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_email(&mut self) -> &mut ::std::string::String {
        &mut self.customer_email
    }

    // Take field
    pub fn take_customer_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_email, ::std::string::String::new())
    }

    // string customer_addr = 10;


    pub fn get_customer_addr(&self) -> &str {
        &self.customer_addr
    }
    pub fn clear_customer_addr(&mut self) {
        self.customer_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_addr(&mut self, v: ::std::string::String) {
        self.customer_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_addr(&mut self) -> &mut ::std::string::String {
        &mut self.customer_addr
    }

    // Take field
    pub fn take_customer_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_addr, ::std::string::String::new())
    }

    // string customer_postcode = 11;


    pub fn get_customer_postcode(&self) -> &str {
        &self.customer_postcode
    }
    pub fn clear_customer_postcode(&mut self) {
        self.customer_postcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_postcode(&mut self, v: ::std::string::String) {
        self.customer_postcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_postcode(&mut self) -> &mut ::std::string::String {
        &mut self.customer_postcode
    }

    // Take field
    pub fn take_customer_postcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_postcode, ::std::string::String::new())
    }
}

impl ::protobuf::Message for InsertCustomerBillingKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_uid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_number)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.expiry)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.birth)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pwd_2digit)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_name)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_tel)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_email)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_addr)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_postcode)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        if !self.pg.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pg);
        }
        if !self.card_number.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.card_number);
        }
        if !self.expiry.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.expiry);
        }
        if !self.birth.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.birth);
        }
        if !self.pwd_2digit.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.pwd_2digit);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer_name);
        }
        if !self.customer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.customer_tel);
        }
        if !self.customer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.customer_email);
        }
        if !self.customer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.customer_addr);
        }
        if !self.customer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.customer_postcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        if !self.pg.is_empty() {
            os.write_string(2, &self.pg)?;
        }
        if !self.card_number.is_empty() {
            os.write_string(3, &self.card_number)?;
        }
        if !self.expiry.is_empty() {
            os.write_string(4, &self.expiry)?;
        }
        if !self.birth.is_empty() {
            os.write_string(5, &self.birth)?;
        }
        if !self.pwd_2digit.is_empty() {
            os.write_string(6, &self.pwd_2digit)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(7, &self.customer_name)?;
        }
        if !self.customer_tel.is_empty() {
            os.write_string(8, &self.customer_tel)?;
        }
        if !self.customer_email.is_empty() {
            os.write_string(9, &self.customer_email)?;
        }
        if !self.customer_addr.is_empty() {
            os.write_string(10, &self.customer_addr)?;
        }
        if !self.customer_postcode.is_empty() {
            os.write_string(11, &self.customer_postcode)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InsertCustomerBillingKeyRequest {
        InsertCustomerBillingKeyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid",
                |m: &InsertCustomerBillingKeyRequest| { &m.customer_uid },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg",
                |m: &InsertCustomerBillingKeyRequest| { &m.pg },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.pg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_number",
                |m: &InsertCustomerBillingKeyRequest| { &m.card_number },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.card_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "expiry",
                |m: &InsertCustomerBillingKeyRequest| { &m.expiry },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.expiry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "birth",
                |m: &InsertCustomerBillingKeyRequest| { &m.birth },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.birth },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pwd_2digit",
                |m: &InsertCustomerBillingKeyRequest| { &m.pwd_2digit },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.pwd_2digit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_name",
                |m: &InsertCustomerBillingKeyRequest| { &m.customer_name },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_tel",
                |m: &InsertCustomerBillingKeyRequest| { &m.customer_tel },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_tel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_email",
                |m: &InsertCustomerBillingKeyRequest| { &m.customer_email },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_addr",
                |m: &InsertCustomerBillingKeyRequest| { &m.customer_addr },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_postcode",
                |m: &InsertCustomerBillingKeyRequest| { &m.customer_postcode },
                |m: &mut InsertCustomerBillingKeyRequest| { &mut m.customer_postcode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InsertCustomerBillingKeyRequest>(
                "InsertCustomerBillingKeyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InsertCustomerBillingKeyRequest {
        static instance: ::protobuf::rt::LazyV2<InsertCustomerBillingKeyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InsertCustomerBillingKeyRequest::new)
    }
}

impl ::protobuf::Clear for InsertCustomerBillingKeyRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.pg.clear();
        self.card_number.clear();
        self.expiry.clear();
        self.birth.clear();
        self.pwd_2digit.clear();
        self.customer_name.clear();
        self.customer_tel.clear();
        self.customer_email.clear();
        self.customer_addr.clear();
        self.customer_postcode.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InsertCustomerBillingKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InsertCustomerBillingKeyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InsertCustomerBillingKeyResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<CustomerBillingKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InsertCustomerBillingKeyResponse {
    fn default() -> &'a InsertCustomerBillingKeyResponse {
        <InsertCustomerBillingKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl InsertCustomerBillingKeyResponse {
    pub fn new() -> InsertCustomerBillingKeyResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .subscribe_customers.CustomerBillingKey response = 3;


    pub fn get_response(&self) -> &CustomerBillingKey {
        self.response.as_ref().unwrap_or_else(|| <CustomerBillingKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: CustomerBillingKey) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut CustomerBillingKey {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> CustomerBillingKey {
        self.response.take().unwrap_or_else(|| CustomerBillingKey::new())
    }
}

impl ::protobuf::Message for InsertCustomerBillingKeyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InsertCustomerBillingKeyResponse {
        InsertCustomerBillingKeyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &InsertCustomerBillingKeyResponse| { &m.code },
                |m: &mut InsertCustomerBillingKeyResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &InsertCustomerBillingKeyResponse| { &m.message },
                |m: &mut InsertCustomerBillingKeyResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CustomerBillingKey>>(
                "response",
                |m: &InsertCustomerBillingKeyResponse| { &m.response },
                |m: &mut InsertCustomerBillingKeyResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InsertCustomerBillingKeyResponse>(
                "InsertCustomerBillingKeyResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InsertCustomerBillingKeyResponse {
        static instance: ::protobuf::rt::LazyV2<InsertCustomerBillingKeyResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InsertCustomerBillingKeyResponse::new)
    }
}

impl ::protobuf::Clear for InsertCustomerBillingKeyResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InsertCustomerBillingKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InsertCustomerBillingKeyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPaidByBillingKeyListRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    pub page: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPaidByBillingKeyListRequest {
    fn default() -> &'a GetPaidByBillingKeyListRequest {
        <GetPaidByBillingKeyListRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPaidByBillingKeyListRequest {
    pub fn new() -> GetPaidByBillingKeyListRequest {
        ::std::default::Default::default()
    }

    // string customer_uid = 1;


    pub fn get_customer_uid(&self) -> &str {
        &self.customer_uid
    }
    pub fn clear_customer_uid(&mut self) {
        self.customer_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid(&mut self, v: ::std::string::String) {
        self.customer_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_uid(&mut self) -> &mut ::std::string::String {
        &mut self.customer_uid
    }

    // Take field
    pub fn take_customer_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_uid, ::std::string::String::new())
    }

    // int32 page = 2;


    pub fn get_page(&self) -> i32 {
        self.page
    }
    pub fn clear_page(&mut self) {
        self.page = 0;
    }

    // Param is passed by value, moved
    pub fn set_page(&mut self, v: i32) {
        self.page = v;
    }
}

impl ::protobuf::Message for GetPaidByBillingKeyListRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_uid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        if self.page != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        if self.page != 0 {
            os.write_int32(2, self.page)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetPaidByBillingKeyListRequest {
        GetPaidByBillingKeyListRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid",
                |m: &GetPaidByBillingKeyListRequest| { &m.customer_uid },
                |m: &mut GetPaidByBillingKeyListRequest| { &mut m.customer_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page",
                |m: &GetPaidByBillingKeyListRequest| { &m.page },
                |m: &mut GetPaidByBillingKeyListRequest| { &mut m.page },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetPaidByBillingKeyListRequest>(
                "GetPaidByBillingKeyListRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetPaidByBillingKeyListRequest {
        static instance: ::protobuf::rt::LazyV2<GetPaidByBillingKeyListRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetPaidByBillingKeyListRequest::new)
    }
}

impl ::protobuf::Clear for GetPaidByBillingKeyListRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.page = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPaidByBillingKeyListRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaidByBillingKeyListRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NestedGetPaidByBillingKeyListData {
    // message fields
    pub total: i32,
    pub previous: i32,
    pub next: i32,
    pub list: ::protobuf::RepeatedField<super::payment::Payment>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NestedGetPaidByBillingKeyListData {
    fn default() -> &'a NestedGetPaidByBillingKeyListData {
        <NestedGetPaidByBillingKeyListData as ::protobuf::Message>::default_instance()
    }
}

impl NestedGetPaidByBillingKeyListData {
    pub fn new() -> NestedGetPaidByBillingKeyListData {
        ::std::default::Default::default()
    }

    // int32 total = 1;


    pub fn get_total(&self) -> i32 {
        self.total
    }
    pub fn clear_total(&mut self) {
        self.total = 0;
    }

    // Param is passed by value, moved
    pub fn set_total(&mut self, v: i32) {
        self.total = v;
    }

    // int32 previous = 2;


    pub fn get_previous(&self) -> i32 {
        self.previous
    }
    pub fn clear_previous(&mut self) {
        self.previous = 0;
    }

    // Param is passed by value, moved
    pub fn set_previous(&mut self, v: i32) {
        self.previous = v;
    }

    // int32 next = 3;


    pub fn get_next(&self) -> i32 {
        self.next
    }
    pub fn clear_next(&mut self) {
        self.next = 0;
    }

    // Param is passed by value, moved
    pub fn set_next(&mut self, v: i32) {
        self.next = v;
    }

    // repeated .payment.Payment list = 4;


    pub fn get_list(&self) -> &[super::payment::Payment] {
        &self.list
    }
    pub fn clear_list(&mut self) {
        self.list.clear();
    }

    // Param is passed by value, moved
    pub fn set_list(&mut self, v: ::protobuf::RepeatedField<super::payment::Payment>) {
        self.list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_list(&mut self) -> &mut ::protobuf::RepeatedField<super::payment::Payment> {
        &mut self.list
    }

    // Take field
    pub fn take_list(&mut self) -> ::protobuf::RepeatedField<super::payment::Payment> {
        ::std::mem::replace(&mut self.list, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for NestedGetPaidByBillingKeyListData {
    fn is_initialized(&self) -> bool {
        for v in &self.list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.total = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.previous = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.next = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.previous != 0 {
            my_size += ::protobuf::rt::value_size(2, self.previous, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next != 0 {
            my_size += ::protobuf::rt::value_size(3, self.next, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total != 0 {
            os.write_int32(1, self.total)?;
        }
        if self.previous != 0 {
            os.write_int32(2, self.previous)?;
        }
        if self.next != 0 {
            os.write_int32(3, self.next)?;
        }
        for v in &self.list {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NestedGetPaidByBillingKeyListData {
        NestedGetPaidByBillingKeyListData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "total",
                |m: &NestedGetPaidByBillingKeyListData| { &m.total },
                |m: &mut NestedGetPaidByBillingKeyListData| { &mut m.total },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "previous",
                |m: &NestedGetPaidByBillingKeyListData| { &m.previous },
                |m: &mut NestedGetPaidByBillingKeyListData| { &mut m.previous },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "next",
                |m: &NestedGetPaidByBillingKeyListData| { &m.next },
                |m: &mut NestedGetPaidByBillingKeyListData| { &mut m.next },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::payment::Payment>>(
                "list",
                |m: &NestedGetPaidByBillingKeyListData| { &m.list },
                |m: &mut NestedGetPaidByBillingKeyListData| { &mut m.list },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NestedGetPaidByBillingKeyListData>(
                "NestedGetPaidByBillingKeyListData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NestedGetPaidByBillingKeyListData {
        static instance: ::protobuf::rt::LazyV2<NestedGetPaidByBillingKeyListData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NestedGetPaidByBillingKeyListData::new)
    }
}

impl ::protobuf::Clear for NestedGetPaidByBillingKeyListData {
    fn clear(&mut self) {
        self.total = 0;
        self.previous = 0;
        self.next = 0;
        self.list.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NestedGetPaidByBillingKeyListData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NestedGetPaidByBillingKeyListData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPaidByBillingKeyListResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<NestedGetPaidByBillingKeyListData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPaidByBillingKeyListResponse {
    fn default() -> &'a GetPaidByBillingKeyListResponse {
        <GetPaidByBillingKeyListResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPaidByBillingKeyListResponse {
    pub fn new() -> GetPaidByBillingKeyListResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .subscribe_customers.NestedGetPaidByBillingKeyListData response = 3;


    pub fn get_response(&self) -> &NestedGetPaidByBillingKeyListData {
        self.response.as_ref().unwrap_or_else(|| <NestedGetPaidByBillingKeyListData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: NestedGetPaidByBillingKeyListData) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut NestedGetPaidByBillingKeyListData {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> NestedGetPaidByBillingKeyListData {
        self.response.take().unwrap_or_else(|| NestedGetPaidByBillingKeyListData::new())
    }
}

impl ::protobuf::Message for GetPaidByBillingKeyListResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetPaidByBillingKeyListResponse {
        GetPaidByBillingKeyListResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &GetPaidByBillingKeyListResponse| { &m.code },
                |m: &mut GetPaidByBillingKeyListResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &GetPaidByBillingKeyListResponse| { &m.message },
                |m: &mut GetPaidByBillingKeyListResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NestedGetPaidByBillingKeyListData>>(
                "response",
                |m: &GetPaidByBillingKeyListResponse| { &m.response },
                |m: &mut GetPaidByBillingKeyListResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetPaidByBillingKeyListResponse>(
                "GetPaidByBillingKeyListResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetPaidByBillingKeyListResponse {
        static instance: ::protobuf::rt::LazyV2<GetPaidByBillingKeyListResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetPaidByBillingKeyListResponse::new)
    }
}

impl ::protobuf::Clear for GetPaidByBillingKeyListResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPaidByBillingKeyListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaidByBillingKeyListResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-subscribe_customers/subscribe_customers.proto\x12\x13subscribe_custom\
    ers\x1a\x15payment/payment.proto\"\xdc\x03\n\x12CustomerBillingKey\x12\
    \x1b\n\tcard_code\x18\x01\x20\x01(\tR\x08cardCode\x12\x1b\n\tcard_name\
    \x18\x02\x20\x01(\tR\x08cardName\x12\x1f\n\x0bcard_number\x18\x03\x20\
    \x01(\tR\ncardNumber\x12\x1b\n\tcard_type\x18\x04\x20\x01(\x05R\x08cardT\
    ype\x12#\n\rcustomer_addr\x18\x05\x20\x01(\tR\x0ccustomerAddr\x12%\n\x0e\
    customer_email\x18\x06\x20\x01(\tR\rcustomerEmail\x12#\n\rcustomer_name\
    \x18\x07\x20\x01(\tR\x0ccustomerName\x12+\n\x11customer_postcode\x18\x08\
    \x20\x01(\tR\x10customerPostcode\x12!\n\x0ccustomer_tel\x18\t\x20\x01(\t\
    R\x0bcustomerTel\x12!\n\x0ccustomer_uid\x18\n\x20\x01(\tR\x0bcustomerUid\
    \x12\x1a\n\x08inserted\x18\x0b\x20\x01(\x05R\x08inserted\x12\x13\n\x05pg\
    _id\x18\x0c\x20\x01(\tR\x04pgId\x12\x1f\n\x0bpg_provider\x18\r\x20\x01(\
    \tR\npgProvider\x12\x18\n\x07updated\x18\x0e\x20\x01(\x05R\x07updated\"I\
    \n$GetMultipleCustomerBillingKeyRequest\x12!\n\x0ccustomer_uid\x18\x01\
    \x20\x03(\tR\x0bcustomerUid\"\x9a\x01\n%GetMultipleCustomerBillingKeyRes\
    ponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07messa\
    ge\x18\x02\x20\x01(\tR\x07message\x12C\n\x08response\x18\x03\x20\x03(\
    \x0b2'.subscribe_customers.CustomerBillingKeyR\x08response\"z\n\x1fDelet\
    eCustomerBillingKeyRequest\x12!\n\x0ccustomer_uid\x18\x01\x20\x01(\tR\
    \x0bcustomerUid\x12\x16\n\x06reason\x18\x02\x20\x01(\tR\x06reason\x12\
    \x1c\n\trequester\x18\x03\x20\x01(\tR\trequester\"\x95\x01\n\x20DeleteCu\
    stomerBillingKeyResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\
    \x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\x12C\n\x08response\
    \x18\x03\x20\x01(\x0b2'.subscribe_customers.CustomerBillingKeyR\x08respo\
    nse\"A\n\x1cGetCustomerBillingKeyRequest\x12!\n\x0ccustomer_uid\x18\x01\
    \x20\x01(\tR\x0bcustomerUid\"\x92\x01\n\x1dGetCustomerBillingKeyResponse\
    \x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\
    \x18\x02\x20\x01(\tR\x07message\x12C\n\x08response\x18\x03\x20\x01(\x0b2\
    '.subscribe_customers.CustomerBillingKeyR\x08response\"\x83\x03\n\x1fIns\
    ertCustomerBillingKeyRequest\x12!\n\x0ccustomer_uid\x18\x01\x20\x01(\tR\
    \x0bcustomerUid\x12\x0e\n\x02pg\x18\x02\x20\x01(\tR\x02pg\x12\x1f\n\x0bc\
    ard_number\x18\x03\x20\x01(\tR\ncardNumber\x12\x16\n\x06expiry\x18\x04\
    \x20\x01(\tR\x06expiry\x12\x14\n\x05birth\x18\x05\x20\x01(\tR\x05birth\
    \x12\x1d\n\npwd_2digit\x18\x06\x20\x01(\tR\tpwd2digit\x12#\n\rcustomer_n\
    ame\x18\x07\x20\x01(\tR\x0ccustomerName\x12!\n\x0ccustomer_tel\x18\x08\
    \x20\x01(\tR\x0bcustomerTel\x12%\n\x0ecustomer_email\x18\t\x20\x01(\tR\r\
    customerEmail\x12#\n\rcustomer_addr\x18\n\x20\x01(\tR\x0ccustomerAddr\
    \x12+\n\x11customer_postcode\x18\x0b\x20\x01(\tR\x10customerPostcode\"\
    \x95\x01\n\x20InsertCustomerBillingKeyResponse\x12\x12\n\x04code\x18\x01\
    \x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07messa\
    ge\x12C\n\x08response\x18\x03\x20\x01(\x0b2'.subscribe_customers.Custome\
    rBillingKeyR\x08response\"W\n\x1eGetPaidByBillingKeyListRequest\x12!\n\
    \x0ccustomer_uid\x18\x01\x20\x01(\tR\x0bcustomerUid\x12\x12\n\x04page\
    \x18\x02\x20\x01(\x05R\x04page\"\x8f\x01\n!NestedGetPaidByBillingKeyList\
    Data\x12\x14\n\x05total\x18\x01\x20\x01(\x05R\x05total\x12\x1a\n\x08prev\
    ious\x18\x02\x20\x01(\x05R\x08previous\x12\x12\n\x04next\x18\x03\x20\x01\
    (\x05R\x04next\x12$\n\x04list\x18\x04\x20\x03(\x0b2\x10.payment.PaymentR\
    \x04list\"\xa3\x01\n\x1fGetPaidByBillingKeyListResponse\x12\x12\n\x04cod\
    e\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\
    \x07message\x12R\n\x08response\x18\x03\x20\x01(\x0b26.subscribe_customer\
    s.NestedGetPaidByBillingKeyListDataR\x08responseB;Z9github.com/iamport/i\
    nterface/build/go/subscribe_customersJ\xfb\x18\n\x06\x12\x04\0\0[\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1c\n\x08\n\
    \x01\x08\x12\x03\x03\0P\n\t\n\x02\x08\x0b\x12\x03\x03\0P\n\t\n\x02\x03\0\
    \x12\x03\x04\0\x1f\n\n\n\x02\x04\0\x12\x04\x06\0\x15\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x06\x08\x1a\n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x06\x1b\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x07\x06\x0c\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x07\r\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x07\x19\x1a\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x08\x06\x1b\n\x0c\n\x05\x04\0\x02\x01\
    \x05\x12\x03\x08\x06\x0c\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x08\r\x16\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x08\x19\x1a\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\t\x06\x1d\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\t\x06\x0c\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03\t\r\x18\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03\t\x1b\x1c\n\x0b\n\x04\x04\0\x02\x03\x12\x03\n\x06\x1a\n\x0c\
    \n\x05\x04\0\x02\x03\x05\x12\x03\n\x06\x0b\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03\n\x0c\x15\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\n\x18\x19\n\x0b\
    \n\x04\x04\0\x02\x04\x12\x03\x0b\x06\x1f\n\x0c\n\x05\x04\0\x02\x04\x05\
    \x12\x03\x0b\x06\x0c\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x0b\r\x1a\n\
    \x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0b\x1d\x1e\n\x0b\n\x04\x04\0\x02\
    \x05\x12\x03\x0c\x06\x20\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x0c\x06\
    \x0c\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0c\r\x1b\n\x0c\n\x05\x04\0\
    \x02\x05\x03\x12\x03\x0c\x1e\x1f\n\x0b\n\x04\x04\0\x02\x06\x12\x03\r\x06\
    \x1f\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\r\x06\x0c\n\x0c\n\x05\x04\0\
    \x02\x06\x01\x12\x03\r\r\x1a\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\r\x1d\
    \x1e\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x0e\x06#\n\x0c\n\x05\x04\0\x02\
    \x07\x05\x12\x03\x0e\x06\x0c\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x0e\r\
    \x1e\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x0e!\"\n\x0b\n\x04\x04\0\x02\
    \x08\x12\x03\x0f\x06\x1e\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03\x0f\x06\
    \x0c\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x0f\r\x19\n\x0c\n\x05\x04\0\
    \x02\x08\x03\x12\x03\x0f\x1c\x1d\n\x0b\n\x04\x04\0\x02\t\x12\x03\x10\x06\
    \x1f\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03\x10\x06\x0c\n\x0c\n\x05\x04\0\
    \x02\t\x01\x12\x03\x10\r\x19\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03\x10\x1c\
    \x1e\n\x0b\n\x04\x04\0\x02\n\x12\x03\x11\x06\x1a\n\x0c\n\x05\x04\0\x02\n\
    \x05\x12\x03\x11\x06\x0b\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03\x11\x0c\x14\
    \n\x0c\n\x05\x04\0\x02\n\x03\x12\x03\x11\x17\x19\n\x0b\n\x04\x04\0\x02\
    \x0b\x12\x03\x12\x06\x18\n\x0c\n\x05\x04\0\x02\x0b\x05\x12\x03\x12\x06\
    \x0c\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03\x12\r\x12\n\x0c\n\x05\x04\0\
    \x02\x0b\x03\x12\x03\x12\x15\x17\n\x0b\n\x04\x04\0\x02\x0c\x12\x03\x13\
    \x06\x1e\n\x0c\n\x05\x04\0\x02\x0c\x05\x12\x03\x13\x06\x0c\n\x0c\n\x05\
    \x04\0\x02\x0c\x01\x12\x03\x13\r\x18\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\
    \x03\x13\x1b\x1d\n\x0b\n\x04\x04\0\x02\r\x12\x03\x14\x06\x19\n\x0c\n\x05\
    \x04\0\x02\r\x05\x12\x03\x14\x06\x0b\n\x0c\n\x05\x04\0\x02\r\x01\x12\x03\
    \x14\x0c\x13\n\x0c\n\x05\x04\0\x02\r\x03\x12\x03\x14\x16\x18\n\n\n\x02\
    \x04\x01\x12\x04\x17\0\x19\x01\n\n\n\x03\x04\x01\x01\x12\x03\x17\x08,\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03\x18\x04%\n\x0c\n\x05\x04\x01\x02\0\x04\
    \x12\x03\x18\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x18\r\x13\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x18\x14\x20\n\x0c\n\x05\x04\x01\x02\
    \0\x03\x12\x03\x18#$\n\n\n\x02\x04\x02\x12\x04\x1b\0\x1f\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03\x1b\x08-\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1c\x04\
    \x13\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1c\x04\t\n\x0c\n\x05\x04\x02\
    \x02\0\x01\x12\x03\x1c\n\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1c\
    \x11\x12\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x1d\x04\x17\n\x0c\n\x05\x04\
    \x02\x02\x01\x05\x12\x03\x1d\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x03\x1d\x0b\x12\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x1d\x15\x16\n\
    \x0b\n\x04\x04\x02\x02\x02\x12\x03\x1e\x04-\n\x0c\n\x05\x04\x02\x02\x02\
    \x04\x12\x03\x1e\x04\x0c\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x1e\r\
    \x1f\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x1e\x20(\n\x0c\n\x05\x04\
    \x02\x02\x02\x03\x12\x03\x1e+,\n\n\n\x02\x04\x03\x12\x04!\0%\x01\n\n\n\
    \x03\x04\x03\x01\x12\x03!\x08'\n\x0b\n\x04\x04\x03\x02\0\x12\x03\"\x04\
    \x1c\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\"\x04\n\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x03\"\x0b\x17\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\"\x1a\
    \x1b\n\x0b\n\x04\x04\x03\x02\x01\x12\x03#\x04\x16\n\x0c\n\x05\x04\x03\
    \x02\x01\x05\x12\x03#\x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03#\x0b\
    \x11\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03#\x14\x15\n\x0b\n\x04\x04\
    \x03\x02\x02\x12\x03$\x04\x19\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03$\
    \x04\n\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03$\x0b\x14\n\x0c\n\x05\x04\
    \x03\x02\x02\x03\x12\x03$\x17\x18\n\n\n\x02\x04\x04\x12\x04'\0+\x01\n\n\
    \n\x03\x04\x04\x01\x12\x03'\x08(\n\x0b\n\x04\x04\x04\x02\0\x12\x03(\x04\
    \x13\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03(\x04\t\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03(\n\x0e\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03(\x11\x12\
    \n\x0b\n\x04\x04\x04\x02\x01\x12\x03)\x04\x17\n\x0c\n\x05\x04\x04\x02\
    \x01\x05\x12\x03)\x04\n\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03)\x0b\x12\
    \n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03)\x15\x16\n\x0b\n\x04\x04\x04\
    \x02\x02\x12\x03*\x04$\n\x0c\n\x05\x04\x04\x02\x02\x06\x12\x03*\x04\x16\
    \n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03*\x17\x1f\n\x0c\n\x05\x04\x04\
    \x02\x02\x03\x12\x03*\"#\n\n\n\x02\x04\x05\x12\x04-\0/\x01\n\n\n\x03\x04\
    \x05\x01\x12\x03-\x08$\n\x0b\n\x04\x04\x05\x02\0\x12\x03.\x04\x1c\n\x0c\
    \n\x05\x04\x05\x02\0\x05\x12\x03.\x04\n\n\x0c\n\x05\x04\x05\x02\0\x01\
    \x12\x03.\x0b\x17\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03.\x1a\x1b\n\n\n\
    \x02\x04\x06\x12\x041\05\x01\n\n\n\x03\x04\x06\x01\x12\x031\x08%\n\x0b\n\
    \x04\x04\x06\x02\0\x12\x032\x04\x13\n\x0c\n\x05\x04\x06\x02\0\x05\x12\
    \x032\x04\t\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x032\n\x0e\n\x0c\n\x05\x04\
    \x06\x02\0\x03\x12\x032\x11\x12\n\x0b\n\x04\x04\x06\x02\x01\x12\x033\x04\
    \x17\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x033\x04\n\n\x0c\n\x05\x04\x06\
    \x02\x01\x01\x12\x033\x0b\x12\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x033\
    \x15\x16\n\x0b\n\x04\x04\x06\x02\x02\x12\x034\x04$\n\x0c\n\x05\x04\x06\
    \x02\x02\x06\x12\x034\x04\x16\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x034\
    \x17\x1f\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x034\"#\n\n\n\x02\x04\x07\
    \x12\x047\0C\x01\n\n\n\x03\x04\x07\x01\x12\x037\x08'\n\x0b\n\x04\x04\x07\
    \x02\0\x12\x038\x04\x1c\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x038\x04\n\n\
    \x0c\n\x05\x04\x07\x02\0\x01\x12\x038\x0b\x17\n\x0c\n\x05\x04\x07\x02\0\
    \x03\x12\x038\x1a\x1b\n\x0b\n\x04\x04\x07\x02\x01\x12\x039\x04\x12\n\x0c\
    \n\x05\x04\x07\x02\x01\x05\x12\x039\x04\n\n\x0c\n\x05\x04\x07\x02\x01\
    \x01\x12\x039\x0b\r\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x039\x10\x11\n\
    \x0b\n\x04\x04\x07\x02\x02\x12\x03:\x04\x1b\n\x0c\n\x05\x04\x07\x02\x02\
    \x05\x12\x03:\x04\n\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03:\x0b\x16\n\
    \x0c\n\x05\x04\x07\x02\x02\x03\x12\x03:\x19\x1a\n\x0b\n\x04\x04\x07\x02\
    \x03\x12\x03;\x04\x16\n\x0c\n\x05\x04\x07\x02\x03\x05\x12\x03;\x04\n\n\
    \x0c\n\x05\x04\x07\x02\x03\x01\x12\x03;\x0b\x11\n\x0c\n\x05\x04\x07\x02\
    \x03\x03\x12\x03;\x14\x15\n\x0b\n\x04\x04\x07\x02\x04\x12\x03<\x04\x15\n\
    \x0c\n\x05\x04\x07\x02\x04\x05\x12\x03<\x04\n\n\x0c\n\x05\x04\x07\x02\
    \x04\x01\x12\x03<\x0b\x10\n\x0c\n\x05\x04\x07\x02\x04\x03\x12\x03<\x13\
    \x14\n\x0b\n\x04\x04\x07\x02\x05\x12\x03=\x04\x1a\n\x0c\n\x05\x04\x07\
    \x02\x05\x05\x12\x03=\x04\n\n\x0c\n\x05\x04\x07\x02\x05\x01\x12\x03=\x0b\
    \x15\n\x0c\n\x05\x04\x07\x02\x05\x03\x12\x03=\x18\x19\n\x0b\n\x04\x04\
    \x07\x02\x06\x12\x03>\x04\x1d\n\x0c\n\x05\x04\x07\x02\x06\x05\x12\x03>\
    \x04\n\n\x0c\n\x05\x04\x07\x02\x06\x01\x12\x03>\x0b\x18\n\x0c\n\x05\x04\
    \x07\x02\x06\x03\x12\x03>\x1b\x1c\n\x0b\n\x04\x04\x07\x02\x07\x12\x03?\
    \x04\x1c\n\x0c\n\x05\x04\x07\x02\x07\x05\x12\x03?\x04\n\n\x0c\n\x05\x04\
    \x07\x02\x07\x01\x12\x03?\x0b\x17\n\x0c\n\x05\x04\x07\x02\x07\x03\x12\
    \x03?\x1a\x1b\n\x0b\n\x04\x04\x07\x02\x08\x12\x03@\x04\x1e\n\x0c\n\x05\
    \x04\x07\x02\x08\x05\x12\x03@\x04\n\n\x0c\n\x05\x04\x07\x02\x08\x01\x12\
    \x03@\x0b\x19\n\x0c\n\x05\x04\x07\x02\x08\x03\x12\x03@\x1c\x1d\n\x0b\n\
    \x04\x04\x07\x02\t\x12\x03A\x04\x1e\n\x0c\n\x05\x04\x07\x02\t\x05\x12\
    \x03A\x04\n\n\x0c\n\x05\x04\x07\x02\t\x01\x12\x03A\x0b\x18\n\x0c\n\x05\
    \x04\x07\x02\t\x03\x12\x03A\x1b\x1d\n\x0b\n\x04\x04\x07\x02\n\x12\x03B\
    \x04\"\n\x0c\n\x05\x04\x07\x02\n\x05\x12\x03B\x04\n\n\x0c\n\x05\x04\x07\
    \x02\n\x01\x12\x03B\x0b\x1c\n\x0c\n\x05\x04\x07\x02\n\x03\x12\x03B\x1f!\
    \n\n\n\x02\x04\x08\x12\x04E\0I\x01\n\n\n\x03\x04\x08\x01\x12\x03E\x08(\n\
    \x0b\n\x04\x04\x08\x02\0\x12\x03F\x04\x13\n\x0c\n\x05\x04\x08\x02\0\x05\
    \x12\x03F\x04\t\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03F\n\x0e\n\x0c\n\x05\
    \x04\x08\x02\0\x03\x12\x03F\x11\x12\n\x0b\n\x04\x04\x08\x02\x01\x12\x03G\
    \x04\x17\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03G\x04\n\n\x0c\n\x05\x04\
    \x08\x02\x01\x01\x12\x03G\x0b\x12\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\
    \x03G\x15\x16\n\x0b\n\x04\x04\x08\x02\x02\x12\x03H\x04$\n\x0c\n\x05\x04\
    \x08\x02\x02\x06\x12\x03H\x04\x16\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\
    \x03H\x17\x1f\n\x0c\n\x05\x04\x08\x02\x02\x03\x12\x03H\"#\n\n\n\x02\x04\
    \t\x12\x04K\0N\x01\n\n\n\x03\x04\t\x01\x12\x03K\x08&\n\x0b\n\x04\x04\t\
    \x02\0\x12\x03L\x04\x1c\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03L\x04\n\n\x0c\
    \n\x05\x04\t\x02\0\x01\x12\x03L\x0b\x17\n\x0c\n\x05\x04\t\x02\0\x03\x12\
    \x03L\x1a\x1b\n\x0b\n\x04\x04\t\x02\x01\x12\x03M\x04\x13\n\x0c\n\x05\x04\
    \t\x02\x01\x05\x12\x03M\x04\t\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03M\n\
    \x0e\n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03M\x11\x12\n\n\n\x02\x04\n\x12\
    \x04P\0U\x01\n\n\n\x03\x04\n\x01\x12\x03P\x08)\n\x0b\n\x04\x04\n\x02\0\
    \x12\x03Q\x04\x14\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03Q\x04\t\n\x0c\n\x05\
    \x04\n\x02\0\x01\x12\x03Q\n\x0f\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03Q\x12\
    \x13\n\x0b\n\x04\x04\n\x02\x01\x12\x03R\x04\x17\n\x0c\n\x05\x04\n\x02\
    \x01\x05\x12\x03R\x04\t\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03R\n\x12\n\
    \x0c\n\x05\x04\n\x02\x01\x03\x12\x03R\x15\x16\n\x0b\n\x04\x04\n\x02\x02\
    \x12\x03S\x04\x13\n\x0c\n\x05\x04\n\x02\x02\x05\x12\x03S\x04\t\n\x0c\n\
    \x05\x04\n\x02\x02\x01\x12\x03S\n\x0e\n\x0c\n\x05\x04\n\x02\x02\x03\x12\
    \x03S\x11\x12\n\x0b\n\x04\x04\n\x02\x03\x12\x03T\x04&\n\x0c\n\x05\x04\n\
    \x02\x03\x04\x12\x03T\x04\x0c\n\x0c\n\x05\x04\n\x02\x03\x06\x12\x03T\r\
    \x1c\n\x0c\n\x05\x04\n\x02\x03\x01\x12\x03T\x1d!\n\x0c\n\x05\x04\n\x02\
    \x03\x03\x12\x03T$%\n\n\n\x02\x04\x0b\x12\x04W\0[\x01\n\n\n\x03\x04\x0b\
    \x01\x12\x03W\x08'\n\x0b\n\x04\x04\x0b\x02\0\x12\x03X\x04\x13\n\x0c\n\
    \x05\x04\x0b\x02\0\x05\x12\x03X\x04\t\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\
    \x03X\n\x0e\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03X\x11\x12\n\x0b\n\x04\
    \x04\x0b\x02\x01\x12\x03Y\x04\x17\n\x0c\n\x05\x04\x0b\x02\x01\x05\x12\
    \x03Y\x04\n\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03Y\x0b\x12\n\x0c\n\x05\
    \x04\x0b\x02\x01\x03\x12\x03Y\x15\x16\n\x0b\n\x04\x04\x0b\x02\x02\x12\
    \x03Z\x043\n\x0c\n\x05\x04\x0b\x02\x02\x06\x12\x03Z\x04%\n\x0c\n\x05\x04\
    \x0b\x02\x02\x01\x12\x03Z&.\n\x0c\n\x05\x04\x0b\x02\x02\x03\x12\x03Z12b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
