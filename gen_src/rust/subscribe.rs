// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `v1/subscribe/subscribe.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct OnetimePaymentRequest {
    // message fields
    pub merchant_uid: ::std::string::String,
    pub amount: f64,
    pub tax_free: f64,
    pub card_number: ::std::string::String,
    pub expiry: ::std::string::String,
    pub birth: ::std::string::String,
    pub pwd_2digit: ::std::string::String,
    pub customer_uid: ::std::string::String,
    pub pg: ::std::string::String,
    pub name: ::std::string::String,
    pub buyer_name: ::std::string::String,
    pub buyer_email: ::std::string::String,
    pub buyer_tel: ::std::string::String,
    pub buyer_addr: ::std::string::String,
    pub buyer_postcode: ::std::string::String,
    pub card_quota: i32,
    pub interest_free_by_merchant: bool,
    pub custom_data: ::std::string::String,
    pub notice_url: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a OnetimePaymentRequest {
    fn default() -> &'a OnetimePaymentRequest {
        <OnetimePaymentRequest as ::protobuf::Message>::default_instance()
    }
}

impl OnetimePaymentRequest {
    pub fn new() -> OnetimePaymentRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "merchant_uid",
            |m: &OnetimePaymentRequest| { &m.merchant_uid },
            |m: &mut OnetimePaymentRequest| { &mut m.merchant_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &OnetimePaymentRequest| { &m.amount },
            |m: &mut OnetimePaymentRequest| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tax_free",
            |m: &OnetimePaymentRequest| { &m.tax_free },
            |m: &mut OnetimePaymentRequest| { &mut m.tax_free },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_number",
            |m: &OnetimePaymentRequest| { &m.card_number },
            |m: &mut OnetimePaymentRequest| { &mut m.card_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expiry",
            |m: &OnetimePaymentRequest| { &m.expiry },
            |m: &mut OnetimePaymentRequest| { &mut m.expiry },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "birth",
            |m: &OnetimePaymentRequest| { &m.birth },
            |m: &mut OnetimePaymentRequest| { &mut m.birth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pwd_2digit",
            |m: &OnetimePaymentRequest| { &m.pwd_2digit },
            |m: &mut OnetimePaymentRequest| { &mut m.pwd_2digit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_uid",
            |m: &OnetimePaymentRequest| { &m.customer_uid },
            |m: &mut OnetimePaymentRequest| { &mut m.customer_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pg",
            |m: &OnetimePaymentRequest| { &m.pg },
            |m: &mut OnetimePaymentRequest| { &mut m.pg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &OnetimePaymentRequest| { &m.name },
            |m: &mut OnetimePaymentRequest| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_name",
            |m: &OnetimePaymentRequest| { &m.buyer_name },
            |m: &mut OnetimePaymentRequest| { &mut m.buyer_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_email",
            |m: &OnetimePaymentRequest| { &m.buyer_email },
            |m: &mut OnetimePaymentRequest| { &mut m.buyer_email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_tel",
            |m: &OnetimePaymentRequest| { &m.buyer_tel },
            |m: &mut OnetimePaymentRequest| { &mut m.buyer_tel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_addr",
            |m: &OnetimePaymentRequest| { &m.buyer_addr },
            |m: &mut OnetimePaymentRequest| { &mut m.buyer_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_postcode",
            |m: &OnetimePaymentRequest| { &m.buyer_postcode },
            |m: &mut OnetimePaymentRequest| { &mut m.buyer_postcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_quota",
            |m: &OnetimePaymentRequest| { &m.card_quota },
            |m: &mut OnetimePaymentRequest| { &mut m.card_quota },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "interest_free_by_merchant",
            |m: &OnetimePaymentRequest| { &m.interest_free_by_merchant },
            |m: &mut OnetimePaymentRequest| { &mut m.interest_free_by_merchant },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "custom_data",
            |m: &OnetimePaymentRequest| { &m.custom_data },
            |m: &mut OnetimePaymentRequest| { &mut m.custom_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "notice_url",
            |m: &OnetimePaymentRequest| { &m.notice_url },
            |m: &mut OnetimePaymentRequest| { &mut m.notice_url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OnetimePaymentRequest>(
            "OnetimePaymentRequest",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for OnetimePaymentRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.merchant_uid = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.amount = is.read_double()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.tax_free = is.read_double()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_number = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expiry = is.read_string()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.birth = is.read_string()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pwd_2digit = is.read_string()?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_uid = is.read_string()?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pg = is.read_string()?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_name = is.read_string()?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_email = is.read_string()?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_tel = is.read_string()?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_addr = is.read_string()?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_postcode = is.read_string()?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_quota = is.read_int32()?;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.interest_free_by_merchant = is.read_bool()?;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.custom_data = is.read_string()?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.notice_url = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.merchant_uid);
        }
        if self.amount != 0. {
            my_size += 9;
        }
        if self.tax_free != 0. {
            my_size += 9;
        }
        if !self.card_number.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.card_number);
        }
        if !self.expiry.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.expiry);
        }
        if !self.birth.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.birth);
        }
        if !self.pwd_2digit.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.pwd_2digit);
        }
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.customer_uid);
        }
        if !self.pg.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.pg);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.name);
        }
        if !self.buyer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.buyer_name);
        }
        if !self.buyer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.buyer_email);
        }
        if !self.buyer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.buyer_tel);
        }
        if !self.buyer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.buyer_addr);
        }
        if !self.buyer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.buyer_postcode);
        }
        if self.card_quota != 0 {
            my_size += ::protobuf::rt::value_size(16, self.card_quota, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.interest_free_by_merchant != false {
            my_size += 3;
        }
        if !self.custom_data.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.custom_data);
        }
        if !self.notice_url.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.notice_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.merchant_uid.is_empty() {
            os.write_string(1, &self.merchant_uid)?;
        }
        if self.amount != 0. {
            os.write_double(2, self.amount)?;
        }
        if self.tax_free != 0. {
            os.write_double(3, self.tax_free)?;
        }
        if !self.card_number.is_empty() {
            os.write_string(4, &self.card_number)?;
        }
        if !self.expiry.is_empty() {
            os.write_string(5, &self.expiry)?;
        }
        if !self.birth.is_empty() {
            os.write_string(6, &self.birth)?;
        }
        if !self.pwd_2digit.is_empty() {
            os.write_string(7, &self.pwd_2digit)?;
        }
        if !self.customer_uid.is_empty() {
            os.write_string(8, &self.customer_uid)?;
        }
        if !self.pg.is_empty() {
            os.write_string(9, &self.pg)?;
        }
        if !self.name.is_empty() {
            os.write_string(10, &self.name)?;
        }
        if !self.buyer_name.is_empty() {
            os.write_string(11, &self.buyer_name)?;
        }
        if !self.buyer_email.is_empty() {
            os.write_string(12, &self.buyer_email)?;
        }
        if !self.buyer_tel.is_empty() {
            os.write_string(13, &self.buyer_tel)?;
        }
        if !self.buyer_addr.is_empty() {
            os.write_string(14, &self.buyer_addr)?;
        }
        if !self.buyer_postcode.is_empty() {
            os.write_string(15, &self.buyer_postcode)?;
        }
        if self.card_quota != 0 {
            os.write_int32(16, self.card_quota)?;
        }
        if self.interest_free_by_merchant != false {
            os.write_bool(17, self.interest_free_by_merchant)?;
        }
        if !self.custom_data.is_empty() {
            os.write_string(18, &self.custom_data)?;
        }
        if !self.notice_url.is_empty() {
            os.write_string(19, &self.notice_url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> OnetimePaymentRequest {
        OnetimePaymentRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static OnetimePaymentRequest {
        static instance: OnetimePaymentRequest = OnetimePaymentRequest {
            merchant_uid: ::std::string::String::new(),
            amount: 0.,
            tax_free: 0.,
            card_number: ::std::string::String::new(),
            expiry: ::std::string::String::new(),
            birth: ::std::string::String::new(),
            pwd_2digit: ::std::string::String::new(),
            customer_uid: ::std::string::String::new(),
            pg: ::std::string::String::new(),
            name: ::std::string::String::new(),
            buyer_name: ::std::string::String::new(),
            buyer_email: ::std::string::String::new(),
            buyer_tel: ::std::string::String::new(),
            buyer_addr: ::std::string::String::new(),
            buyer_postcode: ::std::string::String::new(),
            card_quota: 0,
            interest_free_by_merchant: false,
            custom_data: ::std::string::String::new(),
            notice_url: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for OnetimePaymentRequest {
    fn clear(&mut self) {
        self.merchant_uid.clear();
        self.amount = 0.;
        self.tax_free = 0.;
        self.card_number.clear();
        self.expiry.clear();
        self.birth.clear();
        self.pwd_2digit.clear();
        self.customer_uid.clear();
        self.pg.clear();
        self.name.clear();
        self.buyer_name.clear();
        self.buyer_email.clear();
        self.buyer_tel.clear();
        self.buyer_addr.clear();
        self.buyer_postcode.clear();
        self.card_quota = 0;
        self.interest_free_by_merchant = false;
        self.custom_data.clear();
        self.notice_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OnetimePaymentRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OnetimePaymentRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct OnetimePaymentResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<super::payment::Payment>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a OnetimePaymentResponse {
    fn default() -> &'a OnetimePaymentResponse {
        <OnetimePaymentResponse as ::protobuf::Message>::default_instance()
    }
}

impl OnetimePaymentResponse {
    pub fn new() -> OnetimePaymentResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &OnetimePaymentResponse| { &m.code },
            |m: &mut OnetimePaymentResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &OnetimePaymentResponse| { &m.message },
            |m: &mut OnetimePaymentResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::payment::Payment>(
            "response",
            |m: &OnetimePaymentResponse| { &m.response },
            |m: &mut OnetimePaymentResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OnetimePaymentResponse>(
            "OnetimePaymentResponse",
            1,
            fields,
        )
    }
}

impl ::protobuf::Message for OnetimePaymentResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> OnetimePaymentResponse {
        OnetimePaymentResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 1)
    }

    fn default_instance() -> &'static OnetimePaymentResponse {
        static instance: OnetimePaymentResponse = OnetimePaymentResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for OnetimePaymentResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OnetimePaymentResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OnetimePaymentResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct AgainPaymentRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    pub merchant_uid: ::std::string::String,
    pub amount: f64,
    pub tax_free: f64,
    pub name: ::std::string::String,
    pub buyer_name: ::std::string::String,
    pub buyer_email: ::std::string::String,
    pub buyer_tel: ::std::string::String,
    pub buyer_addr: ::std::string::String,
    pub buyer_postcode: ::std::string::String,
    pub card_quota: i32,
    pub interest_free_by_merchant: bool,
    pub custom_data: ::std::string::String,
    pub notice_url: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a AgainPaymentRequest {
    fn default() -> &'a AgainPaymentRequest {
        <AgainPaymentRequest as ::protobuf::Message>::default_instance()
    }
}

impl AgainPaymentRequest {
    pub fn new() -> AgainPaymentRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_uid",
            |m: &AgainPaymentRequest| { &m.customer_uid },
            |m: &mut AgainPaymentRequest| { &mut m.customer_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "merchant_uid",
            |m: &AgainPaymentRequest| { &m.merchant_uid },
            |m: &mut AgainPaymentRequest| { &mut m.merchant_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &AgainPaymentRequest| { &m.amount },
            |m: &mut AgainPaymentRequest| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tax_free",
            |m: &AgainPaymentRequest| { &m.tax_free },
            |m: &mut AgainPaymentRequest| { &mut m.tax_free },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &AgainPaymentRequest| { &m.name },
            |m: &mut AgainPaymentRequest| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_name",
            |m: &AgainPaymentRequest| { &m.buyer_name },
            |m: &mut AgainPaymentRequest| { &mut m.buyer_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_email",
            |m: &AgainPaymentRequest| { &m.buyer_email },
            |m: &mut AgainPaymentRequest| { &mut m.buyer_email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_tel",
            |m: &AgainPaymentRequest| { &m.buyer_tel },
            |m: &mut AgainPaymentRequest| { &mut m.buyer_tel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_addr",
            |m: &AgainPaymentRequest| { &m.buyer_addr },
            |m: &mut AgainPaymentRequest| { &mut m.buyer_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_postcode",
            |m: &AgainPaymentRequest| { &m.buyer_postcode },
            |m: &mut AgainPaymentRequest| { &mut m.buyer_postcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_quota",
            |m: &AgainPaymentRequest| { &m.card_quota },
            |m: &mut AgainPaymentRequest| { &mut m.card_quota },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "interest_free_by_merchant",
            |m: &AgainPaymentRequest| { &m.interest_free_by_merchant },
            |m: &mut AgainPaymentRequest| { &mut m.interest_free_by_merchant },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "custom_data",
            |m: &AgainPaymentRequest| { &m.custom_data },
            |m: &mut AgainPaymentRequest| { &mut m.custom_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "notice_url",
            |m: &AgainPaymentRequest| { &m.notice_url },
            |m: &mut AgainPaymentRequest| { &mut m.notice_url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AgainPaymentRequest>(
            "AgainPaymentRequest",
            2,
            fields,
        )
    }
}

impl ::protobuf::Message for AgainPaymentRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_uid = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.merchant_uid = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.amount = is.read_double()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.tax_free = is.read_double()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_name = is.read_string()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_email = is.read_string()?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_tel = is.read_string()?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_addr = is.read_string()?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_postcode = is.read_string()?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_quota = is.read_int32()?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.interest_free_by_merchant = is.read_bool()?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.custom_data = is.read_string()?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.notice_url = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.merchant_uid);
        }
        if self.amount != 0. {
            my_size += 9;
        }
        if self.tax_free != 0. {
            my_size += 9;
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.name);
        }
        if !self.buyer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.buyer_name);
        }
        if !self.buyer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.buyer_email);
        }
        if !self.buyer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.buyer_tel);
        }
        if !self.buyer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.buyer_addr);
        }
        if !self.buyer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.buyer_postcode);
        }
        if self.card_quota != 0 {
            my_size += ::protobuf::rt::value_size(11, self.card_quota, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.interest_free_by_merchant != false {
            my_size += 2;
        }
        if !self.custom_data.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.custom_data);
        }
        if !self.notice_url.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.notice_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        if !self.merchant_uid.is_empty() {
            os.write_string(2, &self.merchant_uid)?;
        }
        if self.amount != 0. {
            os.write_double(3, self.amount)?;
        }
        if self.tax_free != 0. {
            os.write_double(4, self.tax_free)?;
        }
        if !self.name.is_empty() {
            os.write_string(5, &self.name)?;
        }
        if !self.buyer_name.is_empty() {
            os.write_string(6, &self.buyer_name)?;
        }
        if !self.buyer_email.is_empty() {
            os.write_string(7, &self.buyer_email)?;
        }
        if !self.buyer_tel.is_empty() {
            os.write_string(8, &self.buyer_tel)?;
        }
        if !self.buyer_addr.is_empty() {
            os.write_string(9, &self.buyer_addr)?;
        }
        if !self.buyer_postcode.is_empty() {
            os.write_string(10, &self.buyer_postcode)?;
        }
        if self.card_quota != 0 {
            os.write_int32(11, self.card_quota)?;
        }
        if self.interest_free_by_merchant != false {
            os.write_bool(12, self.interest_free_by_merchant)?;
        }
        if !self.custom_data.is_empty() {
            os.write_string(13, &self.custom_data)?;
        }
        if !self.notice_url.is_empty() {
            os.write_string(14, &self.notice_url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> AgainPaymentRequest {
        AgainPaymentRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 2)
    }

    fn default_instance() -> &'static AgainPaymentRequest {
        static instance: AgainPaymentRequest = AgainPaymentRequest {
            customer_uid: ::std::string::String::new(),
            merchant_uid: ::std::string::String::new(),
            amount: 0.,
            tax_free: 0.,
            name: ::std::string::String::new(),
            buyer_name: ::std::string::String::new(),
            buyer_email: ::std::string::String::new(),
            buyer_tel: ::std::string::String::new(),
            buyer_addr: ::std::string::String::new(),
            buyer_postcode: ::std::string::String::new(),
            card_quota: 0,
            interest_free_by_merchant: false,
            custom_data: ::std::string::String::new(),
            notice_url: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for AgainPaymentRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.merchant_uid.clear();
        self.amount = 0.;
        self.tax_free = 0.;
        self.name.clear();
        self.buyer_name.clear();
        self.buyer_email.clear();
        self.buyer_tel.clear();
        self.buyer_addr.clear();
        self.buyer_postcode.clear();
        self.card_quota = 0;
        self.interest_free_by_merchant = false;
        self.custom_data.clear();
        self.notice_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AgainPaymentRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AgainPaymentRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct AgainPaymentResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<super::payment::Payment>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a AgainPaymentResponse {
    fn default() -> &'a AgainPaymentResponse {
        <AgainPaymentResponse as ::protobuf::Message>::default_instance()
    }
}

impl AgainPaymentResponse {
    pub fn new() -> AgainPaymentResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &AgainPaymentResponse| { &m.code },
            |m: &mut AgainPaymentResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &AgainPaymentResponse| { &m.message },
            |m: &mut AgainPaymentResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::payment::Payment>(
            "response",
            |m: &AgainPaymentResponse| { &m.response },
            |m: &mut AgainPaymentResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AgainPaymentResponse>(
            "AgainPaymentResponse",
            3,
            fields,
        )
    }
}

impl ::protobuf::Message for AgainPaymentResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> AgainPaymentResponse {
        AgainPaymentResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 3)
    }

    fn default_instance() -> &'static AgainPaymentResponse {
        static instance: AgainPaymentResponse = AgainPaymentResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for AgainPaymentResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AgainPaymentResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AgainPaymentResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentScheduleParam {
    // message fields
    pub merchant_uid: ::std::string::String,
    pub schedule_at: f64,
    pub amount: i32,
    pub tax_free: i32,
    pub name: ::std::string::String,
    pub buyer_name: ::std::string::String,
    pub buyer_email: ::std::string::String,
    pub buyer_tel: ::std::string::String,
    pub buyer_addr: ::std::string::String,
    pub buyer_postcode: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentScheduleParam {
    fn default() -> &'a PaymentScheduleParam {
        <PaymentScheduleParam as ::protobuf::Message>::default_instance()
    }
}

impl PaymentScheduleParam {
    pub fn new() -> PaymentScheduleParam {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "merchant_uid",
            |m: &PaymentScheduleParam| { &m.merchant_uid },
            |m: &mut PaymentScheduleParam| { &mut m.merchant_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_at",
            |m: &PaymentScheduleParam| { &m.schedule_at },
            |m: &mut PaymentScheduleParam| { &mut m.schedule_at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &PaymentScheduleParam| { &m.amount },
            |m: &mut PaymentScheduleParam| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tax_free",
            |m: &PaymentScheduleParam| { &m.tax_free },
            |m: &mut PaymentScheduleParam| { &mut m.tax_free },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &PaymentScheduleParam| { &m.name },
            |m: &mut PaymentScheduleParam| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_name",
            |m: &PaymentScheduleParam| { &m.buyer_name },
            |m: &mut PaymentScheduleParam| { &mut m.buyer_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_email",
            |m: &PaymentScheduleParam| { &m.buyer_email },
            |m: &mut PaymentScheduleParam| { &mut m.buyer_email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_tel",
            |m: &PaymentScheduleParam| { &m.buyer_tel },
            |m: &mut PaymentScheduleParam| { &mut m.buyer_tel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_addr",
            |m: &PaymentScheduleParam| { &m.buyer_addr },
            |m: &mut PaymentScheduleParam| { &mut m.buyer_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_postcode",
            |m: &PaymentScheduleParam| { &m.buyer_postcode },
            |m: &mut PaymentScheduleParam| { &mut m.buyer_postcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PaymentScheduleParam>(
            "PaymentScheduleParam",
            4,
            fields,
        )
    }
}

impl ::protobuf::Message for PaymentScheduleParam {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.merchant_uid = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.schedule_at = is.read_double()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.amount = is.read_int32()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.tax_free = is.read_int32()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_name = is.read_string()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_email = is.read_string()?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_tel = is.read_string()?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_addr = is.read_string()?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_postcode = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.merchant_uid);
        }
        if self.schedule_at != 0. {
            my_size += 9;
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(3, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tax_free != 0 {
            my_size += ::protobuf::rt::value_size(4, self.tax_free, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.name);
        }
        if !self.buyer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.buyer_name);
        }
        if !self.buyer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.buyer_email);
        }
        if !self.buyer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.buyer_tel);
        }
        if !self.buyer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.buyer_addr);
        }
        if !self.buyer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.buyer_postcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.merchant_uid.is_empty() {
            os.write_string(1, &self.merchant_uid)?;
        }
        if self.schedule_at != 0. {
            os.write_double(2, self.schedule_at)?;
        }
        if self.amount != 0 {
            os.write_int32(3, self.amount)?;
        }
        if self.tax_free != 0 {
            os.write_int32(4, self.tax_free)?;
        }
        if !self.name.is_empty() {
            os.write_string(5, &self.name)?;
        }
        if !self.buyer_name.is_empty() {
            os.write_string(6, &self.buyer_name)?;
        }
        if !self.buyer_email.is_empty() {
            os.write_string(7, &self.buyer_email)?;
        }
        if !self.buyer_tel.is_empty() {
            os.write_string(8, &self.buyer_tel)?;
        }
        if !self.buyer_addr.is_empty() {
            os.write_string(9, &self.buyer_addr)?;
        }
        if !self.buyer_postcode.is_empty() {
            os.write_string(10, &self.buyer_postcode)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> PaymentScheduleParam {
        PaymentScheduleParam::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 4)
    }

    fn default_instance() -> &'static PaymentScheduleParam {
        static instance: PaymentScheduleParam = PaymentScheduleParam {
            merchant_uid: ::std::string::String::new(),
            schedule_at: 0.,
            amount: 0,
            tax_free: 0,
            name: ::std::string::String::new(),
            buyer_name: ::std::string::String::new(),
            buyer_email: ::std::string::String::new(),
            buyer_tel: ::std::string::String::new(),
            buyer_addr: ::std::string::String::new(),
            buyer_postcode: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for PaymentScheduleParam {
    fn clear(&mut self) {
        self.merchant_uid.clear();
        self.schedule_at = 0.;
        self.amount = 0;
        self.tax_free = 0;
        self.name.clear();
        self.buyer_name.clear();
        self.buyer_email.clear();
        self.buyer_tel.clear();
        self.buyer_addr.clear();
        self.buyer_postcode.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentScheduleParam {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentScheduleParam {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct UnitSchedulePaymentResponse {
    // message fields
    pub customer_uid: ::std::string::String,
    pub merchant_uid: ::std::string::String,
    pub imp_uid: ::std::string::String,
    pub schedule_at: i32,
    pub executed_at: i32,
    pub revoked_at: i32,
    pub amount: i32,
    pub name: ::std::string::String,
    pub buyer_name: ::std::string::String,
    pub buyer_email: ::std::string::String,
    pub buyer_tel: ::std::string::String,
    pub buyer_addr: ::std::string::String,
    pub buyer_postcode: ::std::string::String,
    pub custom_data: ::std::string::String,
    pub schedule_status: ::std::string::String,
    pub payment_status: ::std::string::String,
    pub fail_reason: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnitSchedulePaymentResponse {
    fn default() -> &'a UnitSchedulePaymentResponse {
        <UnitSchedulePaymentResponse as ::protobuf::Message>::default_instance()
    }
}

impl UnitSchedulePaymentResponse {
    pub fn new() -> UnitSchedulePaymentResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_uid",
            |m: &UnitSchedulePaymentResponse| { &m.customer_uid },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.customer_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "merchant_uid",
            |m: &UnitSchedulePaymentResponse| { &m.merchant_uid },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.merchant_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "imp_uid",
            |m: &UnitSchedulePaymentResponse| { &m.imp_uid },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.imp_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_at",
            |m: &UnitSchedulePaymentResponse| { &m.schedule_at },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.schedule_at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "executed_at",
            |m: &UnitSchedulePaymentResponse| { &m.executed_at },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.executed_at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "revoked_at",
            |m: &UnitSchedulePaymentResponse| { &m.revoked_at },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.revoked_at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &UnitSchedulePaymentResponse| { &m.amount },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &UnitSchedulePaymentResponse| { &m.name },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_name",
            |m: &UnitSchedulePaymentResponse| { &m.buyer_name },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.buyer_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_email",
            |m: &UnitSchedulePaymentResponse| { &m.buyer_email },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.buyer_email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_tel",
            |m: &UnitSchedulePaymentResponse| { &m.buyer_tel },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.buyer_tel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_addr",
            |m: &UnitSchedulePaymentResponse| { &m.buyer_addr },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.buyer_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_postcode",
            |m: &UnitSchedulePaymentResponse| { &m.buyer_postcode },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.buyer_postcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "custom_data",
            |m: &UnitSchedulePaymentResponse| { &m.custom_data },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.custom_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_status",
            |m: &UnitSchedulePaymentResponse| { &m.schedule_status },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.schedule_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payment_status",
            |m: &UnitSchedulePaymentResponse| { &m.payment_status },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.payment_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fail_reason",
            |m: &UnitSchedulePaymentResponse| { &m.fail_reason },
            |m: &mut UnitSchedulePaymentResponse| { &mut m.fail_reason },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnitSchedulePaymentResponse>(
            "UnitSchedulePaymentResponse",
            5,
            fields,
        )
    }
}

impl ::protobuf::Message for UnitSchedulePaymentResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_uid = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.merchant_uid = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.imp_uid = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.schedule_at = is.read_int32()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.executed_at = is.read_int32()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.revoked_at = is.read_int32()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.amount = is.read_int32()?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_name = is.read_string()?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_email = is.read_string()?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_tel = is.read_string()?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_addr = is.read_string()?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_postcode = is.read_string()?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.custom_data = is.read_string()?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.schedule_status = is.read_string()?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payment_status = is.read_string()?;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.fail_reason = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.merchant_uid);
        }
        if !self.imp_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.imp_uid);
        }
        if self.schedule_at != 0 {
            my_size += ::protobuf::rt::value_size(4, self.schedule_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.executed_at != 0 {
            my_size += ::protobuf::rt::value_size(5, self.executed_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.revoked_at != 0 {
            my_size += ::protobuf::rt::value_size(6, self.revoked_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(7, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.name);
        }
        if !self.buyer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.buyer_name);
        }
        if !self.buyer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.buyer_email);
        }
        if !self.buyer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.buyer_tel);
        }
        if !self.buyer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.buyer_addr);
        }
        if !self.buyer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.buyer_postcode);
        }
        if !self.custom_data.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.custom_data);
        }
        if !self.schedule_status.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.schedule_status);
        }
        if !self.payment_status.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.payment_status);
        }
        if !self.fail_reason.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.fail_reason);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        if !self.merchant_uid.is_empty() {
            os.write_string(2, &self.merchant_uid)?;
        }
        if !self.imp_uid.is_empty() {
            os.write_string(3, &self.imp_uid)?;
        }
        if self.schedule_at != 0 {
            os.write_int32(4, self.schedule_at)?;
        }
        if self.executed_at != 0 {
            os.write_int32(5, self.executed_at)?;
        }
        if self.revoked_at != 0 {
            os.write_int32(6, self.revoked_at)?;
        }
        if self.amount != 0 {
            os.write_int32(7, self.amount)?;
        }
        if !self.name.is_empty() {
            os.write_string(8, &self.name)?;
        }
        if !self.buyer_name.is_empty() {
            os.write_string(9, &self.buyer_name)?;
        }
        if !self.buyer_email.is_empty() {
            os.write_string(10, &self.buyer_email)?;
        }
        if !self.buyer_tel.is_empty() {
            os.write_string(11, &self.buyer_tel)?;
        }
        if !self.buyer_addr.is_empty() {
            os.write_string(12, &self.buyer_addr)?;
        }
        if !self.buyer_postcode.is_empty() {
            os.write_string(13, &self.buyer_postcode)?;
        }
        if !self.custom_data.is_empty() {
            os.write_string(14, &self.custom_data)?;
        }
        if !self.schedule_status.is_empty() {
            os.write_string(15, &self.schedule_status)?;
        }
        if !self.payment_status.is_empty() {
            os.write_string(16, &self.payment_status)?;
        }
        if !self.fail_reason.is_empty() {
            os.write_string(17, &self.fail_reason)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> UnitSchedulePaymentResponse {
        UnitSchedulePaymentResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 5)
    }

    fn default_instance() -> &'static UnitSchedulePaymentResponse {
        static instance: UnitSchedulePaymentResponse = UnitSchedulePaymentResponse {
            customer_uid: ::std::string::String::new(),
            merchant_uid: ::std::string::String::new(),
            imp_uid: ::std::string::String::new(),
            schedule_at: 0,
            executed_at: 0,
            revoked_at: 0,
            amount: 0,
            name: ::std::string::String::new(),
            buyer_name: ::std::string::String::new(),
            buyer_email: ::std::string::String::new(),
            buyer_tel: ::std::string::String::new(),
            buyer_addr: ::std::string::String::new(),
            buyer_postcode: ::std::string::String::new(),
            custom_data: ::std::string::String::new(),
            schedule_status: ::std::string::String::new(),
            payment_status: ::std::string::String::new(),
            fail_reason: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for UnitSchedulePaymentResponse {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.merchant_uid.clear();
        self.imp_uid.clear();
        self.schedule_at = 0;
        self.executed_at = 0;
        self.revoked_at = 0;
        self.amount = 0;
        self.name.clear();
        self.buyer_name.clear();
        self.buyer_email.clear();
        self.buyer_tel.clear();
        self.buyer_addr.clear();
        self.buyer_postcode.clear();
        self.custom_data.clear();
        self.schedule_status.clear();
        self.payment_status.clear();
        self.fail_reason.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnitSchedulePaymentResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnitSchedulePaymentResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct SchedulePayemntRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    pub checking_amount: i32,
    pub card_number: ::std::string::String,
    pub expiry: ::std::string::String,
    pub birth: ::std::string::String,
    pub pwd_2digit: ::std::string::String,
    pub pg: ::std::string::String,
    pub schedules: ::std::vec::Vec<PaymentScheduleParam>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a SchedulePayemntRequest {
    fn default() -> &'a SchedulePayemntRequest {
        <SchedulePayemntRequest as ::protobuf::Message>::default_instance()
    }
}

impl SchedulePayemntRequest {
    pub fn new() -> SchedulePayemntRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_uid",
            |m: &SchedulePayemntRequest| { &m.customer_uid },
            |m: &mut SchedulePayemntRequest| { &mut m.customer_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "checking_amount",
            |m: &SchedulePayemntRequest| { &m.checking_amount },
            |m: &mut SchedulePayemntRequest| { &mut m.checking_amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_number",
            |m: &SchedulePayemntRequest| { &m.card_number },
            |m: &mut SchedulePayemntRequest| { &mut m.card_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expiry",
            |m: &SchedulePayemntRequest| { &m.expiry },
            |m: &mut SchedulePayemntRequest| { &mut m.expiry },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "birth",
            |m: &SchedulePayemntRequest| { &m.birth },
            |m: &mut SchedulePayemntRequest| { &mut m.birth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pwd_2digit",
            |m: &SchedulePayemntRequest| { &m.pwd_2digit },
            |m: &mut SchedulePayemntRequest| { &mut m.pwd_2digit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pg",
            |m: &SchedulePayemntRequest| { &m.pg },
            |m: &mut SchedulePayemntRequest| { &mut m.pg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "schedules",
            |m: &SchedulePayemntRequest| { &m.schedules },
            |m: &mut SchedulePayemntRequest| { &mut m.schedules },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SchedulePayemntRequest>(
            "SchedulePayemntRequest",
            6,
            fields,
        )
    }
}

impl ::protobuf::Message for SchedulePayemntRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.schedules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_uid = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.checking_amount = is.read_int32()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_number = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expiry = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.birth = is.read_string()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pwd_2digit = is.read_string()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pg = is.read_string()?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.schedules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        if self.checking_amount != 0 {
            my_size += ::protobuf::rt::value_size(2, self.checking_amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.card_number.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.card_number);
        }
        if !self.expiry.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.expiry);
        }
        if !self.birth.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.birth);
        }
        if !self.pwd_2digit.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.pwd_2digit);
        }
        if !self.pg.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.pg);
        }
        for value in &self.schedules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        if self.checking_amount != 0 {
            os.write_int32(2, self.checking_amount)?;
        }
        if !self.card_number.is_empty() {
            os.write_string(3, &self.card_number)?;
        }
        if !self.expiry.is_empty() {
            os.write_string(4, &self.expiry)?;
        }
        if !self.birth.is_empty() {
            os.write_string(5, &self.birth)?;
        }
        if !self.pwd_2digit.is_empty() {
            os.write_string(6, &self.pwd_2digit)?;
        }
        if !self.pg.is_empty() {
            os.write_string(7, &self.pg)?;
        }
        for v in &self.schedules {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> SchedulePayemntRequest {
        SchedulePayemntRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 6)
    }

    fn default_instance() -> &'static SchedulePayemntRequest {
        static instance: SchedulePayemntRequest = SchedulePayemntRequest {
            customer_uid: ::std::string::String::new(),
            checking_amount: 0,
            card_number: ::std::string::String::new(),
            expiry: ::std::string::String::new(),
            birth: ::std::string::String::new(),
            pwd_2digit: ::std::string::String::new(),
            pg: ::std::string::String::new(),
            schedules: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for SchedulePayemntRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.checking_amount = 0;
        self.card_number.clear();
        self.expiry.clear();
        self.birth.clear();
        self.pwd_2digit.clear();
        self.pg.clear();
        self.schedules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SchedulePayemntRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SchedulePayemntRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct SchedulePaymentResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::std::vec::Vec<UnitSchedulePaymentResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a SchedulePaymentResponse {
    fn default() -> &'a SchedulePaymentResponse {
        <SchedulePaymentResponse as ::protobuf::Message>::default_instance()
    }
}

impl SchedulePaymentResponse {
    pub fn new() -> SchedulePaymentResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &SchedulePaymentResponse| { &m.code },
            |m: &mut SchedulePaymentResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &SchedulePaymentResponse| { &m.message },
            |m: &mut SchedulePaymentResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "response",
            |m: &SchedulePaymentResponse| { &m.response },
            |m: &mut SchedulePaymentResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SchedulePaymentResponse>(
            "SchedulePaymentResponse",
            7,
            fields,
        )
    }
}

impl ::protobuf::Message for SchedulePaymentResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        for value in &self.response {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        for v in &self.response {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> SchedulePaymentResponse {
        SchedulePaymentResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 7)
    }

    fn default_instance() -> &'static SchedulePaymentResponse {
        static instance: SchedulePaymentResponse = SchedulePaymentResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for SchedulePaymentResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SchedulePaymentResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SchedulePaymentResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct UnscheduelPaymentRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    pub merchant_uid: ::std::vec::Vec<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnscheduelPaymentRequest {
    fn default() -> &'a UnscheduelPaymentRequest {
        <UnscheduelPaymentRequest as ::protobuf::Message>::default_instance()
    }
}

impl UnscheduelPaymentRequest {
    pub fn new() -> UnscheduelPaymentRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_uid",
            |m: &UnscheduelPaymentRequest| { &m.customer_uid },
            |m: &mut UnscheduelPaymentRequest| { &mut m.customer_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "merchant_uid",
            |m: &UnscheduelPaymentRequest| { &m.merchant_uid },
            |m: &mut UnscheduelPaymentRequest| { &mut m.merchant_uid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnscheduelPaymentRequest>(
            "UnscheduelPaymentRequest",
            8,
            fields,
        )
    }
}

impl ::protobuf::Message for UnscheduelPaymentRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_uid = is.read_string()?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.merchant_uid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        for value in &self.merchant_uid {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        for v in &self.merchant_uid {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> UnscheduelPaymentRequest {
        UnscheduelPaymentRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 8)
    }

    fn default_instance() -> &'static UnscheduelPaymentRequest {
        static instance: UnscheduelPaymentRequest = UnscheduelPaymentRequest {
            customer_uid: ::std::string::String::new(),
            merchant_uid: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for UnscheduelPaymentRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.merchant_uid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnscheduelPaymentRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnscheduelPaymentRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct UnschedulePaymentResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::std::vec::Vec<UnitSchedulePaymentResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnschedulePaymentResponse {
    fn default() -> &'a UnschedulePaymentResponse {
        <UnschedulePaymentResponse as ::protobuf::Message>::default_instance()
    }
}

impl UnschedulePaymentResponse {
    pub fn new() -> UnschedulePaymentResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &UnschedulePaymentResponse| { &m.code },
            |m: &mut UnschedulePaymentResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &UnschedulePaymentResponse| { &m.message },
            |m: &mut UnschedulePaymentResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "response",
            |m: &UnschedulePaymentResponse| { &m.response },
            |m: &mut UnschedulePaymentResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnschedulePaymentResponse>(
            "UnschedulePaymentResponse",
            9,
            fields,
        )
    }
}

impl ::protobuf::Message for UnschedulePaymentResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        for value in &self.response {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        for v in &self.response {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> UnschedulePaymentResponse {
        UnschedulePaymentResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 9)
    }

    fn default_instance() -> &'static UnschedulePaymentResponse {
        static instance: UnschedulePaymentResponse = UnschedulePaymentResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for UnschedulePaymentResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnschedulePaymentResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnschedulePaymentResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPaymentScheduleRequest {
    // message fields
    pub merchant_uid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPaymentScheduleRequest {
    fn default() -> &'a GetPaymentScheduleRequest {
        <GetPaymentScheduleRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPaymentScheduleRequest {
    pub fn new() -> GetPaymentScheduleRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "merchant_uid",
            |m: &GetPaymentScheduleRequest| { &m.merchant_uid },
            |m: &mut GetPaymentScheduleRequest| { &mut m.merchant_uid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPaymentScheduleRequest>(
            "GetPaymentScheduleRequest",
            10,
            fields,
        )
    }
}

impl ::protobuf::Message for GetPaymentScheduleRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.merchant_uid = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.merchant_uid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.merchant_uid.is_empty() {
            os.write_string(1, &self.merchant_uid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> GetPaymentScheduleRequest {
        GetPaymentScheduleRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 10)
    }

    fn default_instance() -> &'static GetPaymentScheduleRequest {
        static instance: GetPaymentScheduleRequest = GetPaymentScheduleRequest {
            merchant_uid: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for GetPaymentScheduleRequest {
    fn clear(&mut self) {
        self.merchant_uid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPaymentScheduleRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaymentScheduleRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPaymentScheduleResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<UnitSchedulePaymentResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPaymentScheduleResponse {
    fn default() -> &'a GetPaymentScheduleResponse {
        <GetPaymentScheduleResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPaymentScheduleResponse {
    pub fn new() -> GetPaymentScheduleResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &GetPaymentScheduleResponse| { &m.code },
            |m: &mut GetPaymentScheduleResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &GetPaymentScheduleResponse| { &m.message },
            |m: &mut GetPaymentScheduleResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UnitSchedulePaymentResponse>(
            "response",
            |m: &GetPaymentScheduleResponse| { &m.response },
            |m: &mut GetPaymentScheduleResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPaymentScheduleResponse>(
            "GetPaymentScheduleResponse",
            11,
            fields,
        )
    }
}

impl ::protobuf::Message for GetPaymentScheduleResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> GetPaymentScheduleResponse {
        GetPaymentScheduleResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 11)
    }

    fn default_instance() -> &'static GetPaymentScheduleResponse {
        static instance: GetPaymentScheduleResponse = GetPaymentScheduleResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for GetPaymentScheduleResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPaymentScheduleResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaymentScheduleResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPaymentScheduleByCustomerRequest {
    // message fields
    pub customer_uid: ::std::string::String,
    pub page: i32,
    pub from: i32,
    pub to: i32,
    pub schedule_status: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPaymentScheduleByCustomerRequest {
    fn default() -> &'a GetPaymentScheduleByCustomerRequest {
        <GetPaymentScheduleByCustomerRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPaymentScheduleByCustomerRequest {
    pub fn new() -> GetPaymentScheduleByCustomerRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_uid",
            |m: &GetPaymentScheduleByCustomerRequest| { &m.customer_uid },
            |m: &mut GetPaymentScheduleByCustomerRequest| { &mut m.customer_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "page",
            |m: &GetPaymentScheduleByCustomerRequest| { &m.page },
            |m: &mut GetPaymentScheduleByCustomerRequest| { &mut m.page },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "from",
            |m: &GetPaymentScheduleByCustomerRequest| { &m.from },
            |m: &mut GetPaymentScheduleByCustomerRequest| { &mut m.from },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to",
            |m: &GetPaymentScheduleByCustomerRequest| { &m.to },
            |m: &mut GetPaymentScheduleByCustomerRequest| { &mut m.to },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_status",
            |m: &GetPaymentScheduleByCustomerRequest| { &m.schedule_status },
            |m: &mut GetPaymentScheduleByCustomerRequest| { &mut m.schedule_status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPaymentScheduleByCustomerRequest>(
            "GetPaymentScheduleByCustomerRequest",
            12,
            fields,
        )
    }
}

impl ::protobuf::Message for GetPaymentScheduleByCustomerRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_uid = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.page = is.read_int32()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.from = is.read_int32()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.to = is.read_int32()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.schedule_status = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_uid);
        }
        if self.page != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.from != 0 {
            my_size += ::protobuf::rt::value_size(3, self.from, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.to != 0 {
            my_size += ::protobuf::rt::value_size(4, self.to, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.schedule_status.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.schedule_status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_uid.is_empty() {
            os.write_string(1, &self.customer_uid)?;
        }
        if self.page != 0 {
            os.write_int32(2, self.page)?;
        }
        if self.from != 0 {
            os.write_int32(3, self.from)?;
        }
        if self.to != 0 {
            os.write_int32(4, self.to)?;
        }
        if !self.schedule_status.is_empty() {
            os.write_string(5, &self.schedule_status)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> GetPaymentScheduleByCustomerRequest {
        GetPaymentScheduleByCustomerRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 12)
    }

    fn default_instance() -> &'static GetPaymentScheduleByCustomerRequest {
        static instance: GetPaymentScheduleByCustomerRequest = GetPaymentScheduleByCustomerRequest {
            customer_uid: ::std::string::String::new(),
            page: 0,
            from: 0,
            to: 0,
            schedule_status: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for GetPaymentScheduleByCustomerRequest {
    fn clear(&mut self) {
        self.customer_uid.clear();
        self.page = 0;
        self.from = 0;
        self.to = 0;
        self.schedule_status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPaymentScheduleByCustomerRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaymentScheduleByCustomerRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct NestedGetPaymentScheduleByCustomerData {
    // message fields
    pub total: i32,
    pub previous: i32,
    pub next: i32,
    pub list: ::std::vec::Vec<UnitSchedulePaymentResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a NestedGetPaymentScheduleByCustomerData {
    fn default() -> &'a NestedGetPaymentScheduleByCustomerData {
        <NestedGetPaymentScheduleByCustomerData as ::protobuf::Message>::default_instance()
    }
}

impl NestedGetPaymentScheduleByCustomerData {
    pub fn new() -> NestedGetPaymentScheduleByCustomerData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total",
            |m: &NestedGetPaymentScheduleByCustomerData| { &m.total },
            |m: &mut NestedGetPaymentScheduleByCustomerData| { &mut m.total },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "previous",
            |m: &NestedGetPaymentScheduleByCustomerData| { &m.previous },
            |m: &mut NestedGetPaymentScheduleByCustomerData| { &mut m.previous },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next",
            |m: &NestedGetPaymentScheduleByCustomerData| { &m.next },
            |m: &mut NestedGetPaymentScheduleByCustomerData| { &mut m.next },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "list",
            |m: &NestedGetPaymentScheduleByCustomerData| { &m.list },
            |m: &mut NestedGetPaymentScheduleByCustomerData| { &mut m.list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NestedGetPaymentScheduleByCustomerData>(
            "NestedGetPaymentScheduleByCustomerData",
            13,
            fields,
        )
    }
}

impl ::protobuf::Message for NestedGetPaymentScheduleByCustomerData {
    fn is_initialized(&self) -> bool {
        for v in &self.list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.total = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.previous = is.read_int32()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.next = is.read_int32()?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.previous != 0 {
            my_size += ::protobuf::rt::value_size(2, self.previous, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next != 0 {
            my_size += ::protobuf::rt::value_size(3, self.next, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total != 0 {
            os.write_int32(1, self.total)?;
        }
        if self.previous != 0 {
            os.write_int32(2, self.previous)?;
        }
        if self.next != 0 {
            os.write_int32(3, self.next)?;
        }
        for v in &self.list {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> NestedGetPaymentScheduleByCustomerData {
        NestedGetPaymentScheduleByCustomerData::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 13)
    }

    fn default_instance() -> &'static NestedGetPaymentScheduleByCustomerData {
        static instance: NestedGetPaymentScheduleByCustomerData = NestedGetPaymentScheduleByCustomerData {
            total: 0,
            previous: 0,
            next: 0,
            list: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for NestedGetPaymentScheduleByCustomerData {
    fn clear(&mut self) {
        self.total = 0;
        self.previous = 0;
        self.next = 0;
        self.list.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NestedGetPaymentScheduleByCustomerData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NestedGetPaymentScheduleByCustomerData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPaymentScheduleByCustomerResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<NestedGetPaymentScheduleByCustomerData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPaymentScheduleByCustomerResponse {
    fn default() -> &'a GetPaymentScheduleByCustomerResponse {
        <GetPaymentScheduleByCustomerResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPaymentScheduleByCustomerResponse {
    pub fn new() -> GetPaymentScheduleByCustomerResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &GetPaymentScheduleByCustomerResponse| { &m.code },
            |m: &mut GetPaymentScheduleByCustomerResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &GetPaymentScheduleByCustomerResponse| { &m.message },
            |m: &mut GetPaymentScheduleByCustomerResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, NestedGetPaymentScheduleByCustomerData>(
            "response",
            |m: &GetPaymentScheduleByCustomerResponse| { &m.response },
            |m: &mut GetPaymentScheduleByCustomerResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPaymentScheduleByCustomerResponse>(
            "GetPaymentScheduleByCustomerResponse",
            14,
            fields,
        )
    }
}

impl ::protobuf::Message for GetPaymentScheduleByCustomerResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> GetPaymentScheduleByCustomerResponse {
        GetPaymentScheduleByCustomerResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 14)
    }

    fn default_instance() -> &'static GetPaymentScheduleByCustomerResponse {
        static instance: GetPaymentScheduleByCustomerResponse = GetPaymentScheduleByCustomerResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for GetPaymentScheduleByCustomerResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPaymentScheduleByCustomerResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaymentScheduleByCustomerResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cv1/subscribe/subscribe.proto\x12\tsubscribe\x1a\x1cgoogle/api/anno\
    tations.proto\x1a\x18v1/payment/payment.proto\"\xdf\x04\n\x15OnetimePaym\
    entRequest\x12!\n\x0cmerchant_uid\x18\x01\x20\x01(\tR\x0bmerchantUid\x12\
    \x16\n\x06amount\x18\x02\x20\x01(\x01R\x06amount\x12\x19\n\x08tax_free\
    \x18\x03\x20\x01(\x01R\x07taxFree\x12\x1f\n\x0bcard_number\x18\x04\x20\
    \x01(\tR\ncardNumber\x12\x16\n\x06expiry\x18\x05\x20\x01(\tR\x06expiry\
    \x12\x14\n\x05birth\x18\x06\x20\x01(\tR\x05birth\x12\x1d\n\npwd_2digit\
    \x18\x07\x20\x01(\tR\tpwd2digit\x12!\n\x0ccustomer_uid\x18\x08\x20\x01(\
    \tR\x0bcustomerUid\x12\x0e\n\x02pg\x18\t\x20\x01(\tR\x02pg\x12\x12\n\x04\
    name\x18\n\x20\x01(\tR\x04name\x12\x1d\n\nbuyer_name\x18\x0b\x20\x01(\tR\
    \tbuyerName\x12\x1f\n\x0bbuyer_email\x18\x0c\x20\x01(\tR\nbuyerEmail\x12\
    \x1b\n\tbuyer_tel\x18\r\x20\x01(\tR\x08buyerTel\x12\x1d\n\nbuyer_addr\
    \x18\x0e\x20\x01(\tR\tbuyerAddr\x12%\n\x0ebuyer_postcode\x18\x0f\x20\x01\
    (\tR\rbuyerPostcode\x12\x1d\n\ncard_quota\x18\x10\x20\x01(\x05R\tcardQuo\
    ta\x129\n\x19interest_free_by_merchant\x18\x11\x20\x01(\x08R\x16interest\
    FreeByMerchant\x12\x1f\n\x0bcustom_data\x18\x12\x20\x01(\tR\ncustomData\
    \x12\x1d\n\nnotice_url\x18\x13\x20\x01(\tR\tnoticeUrl\"t\n\x16OnetimePay\
    mentResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\
    \x07message\x18\x02\x20\x01(\tR\x07message\x12,\n\x08response\x18\x03\
    \x20\x01(\x0b2\x10.payment.PaymentR\x08response\"\xdf\x03\n\x13AgainPaym\
    entRequest\x12!\n\x0ccustomer_uid\x18\x01\x20\x01(\tR\x0bcustomerUid\x12\
    !\n\x0cmerchant_uid\x18\x02\x20\x01(\tR\x0bmerchantUid\x12\x16\n\x06amou\
    nt\x18\x03\x20\x01(\x01R\x06amount\x12\x19\n\x08tax_free\x18\x04\x20\x01\
    (\x01R\x07taxFree\x12\x12\n\x04name\x18\x05\x20\x01(\tR\x04name\x12\x1d\
    \n\nbuyer_name\x18\x06\x20\x01(\tR\tbuyerName\x12\x1f\n\x0bbuyer_email\
    \x18\x07\x20\x01(\tR\nbuyerEmail\x12\x1b\n\tbuyer_tel\x18\x08\x20\x01(\t\
    R\x08buyerTel\x12\x1d\n\nbuyer_addr\x18\t\x20\x01(\tR\tbuyerAddr\x12%\n\
    \x0ebuyer_postcode\x18\n\x20\x01(\tR\rbuyerPostcode\x12\x1d\n\ncard_quot\
    a\x18\x0b\x20\x01(\x05R\tcardQuota\x129\n\x19interest_free_by_merchant\
    \x18\x0c\x20\x01(\x08R\x16interestFreeByMerchant\x12\x1f\n\x0bcustom_dat\
    a\x18\r\x20\x01(\tR\ncustomData\x12\x1d\n\nnotice_url\x18\x0e\x20\x01(\t\
    R\tnoticeUrl\"r\n\x14AgainPaymentResponse\x12\x12\n\x04code\x18\x01\x20\
    \x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\
    \x12,\n\x08response\x18\x03\x20\x01(\x0b2\x10.payment.PaymentR\x08respon\
    se\"\xc4\x02\n\x14PaymentScheduleParam\x12!\n\x0cmerchant_uid\x18\x01\
    \x20\x01(\tR\x0bmerchantUid\x12\x1f\n\x0bschedule_at\x18\x02\x20\x01(\
    \x01R\nscheduleAt\x12\x16\n\x06amount\x18\x03\x20\x01(\x05R\x06amount\
    \x12\x19\n\x08tax_free\x18\x04\x20\x01(\x05R\x07taxFree\x12\x12\n\x04nam\
    e\x18\x05\x20\x01(\tR\x04name\x12\x1d\n\nbuyer_name\x18\x06\x20\x01(\tR\
    \tbuyerName\x12\x1f\n\x0bbuyer_email\x18\x07\x20\x01(\tR\nbuyerEmail\x12\
    \x1b\n\tbuyer_tel\x18\x08\x20\x01(\tR\x08buyerTel\x12\x1d\n\nbuyer_addr\
    \x18\t\x20\x01(\tR\tbuyerAddr\x12%\n\x0ebuyer_postcode\x18\n\x20\x01(\tR\
    \rbuyerPostcode\"\xbe\x04\n\x1bUnitSchedulePaymentResponse\x12!\n\x0ccus\
    tomer_uid\x18\x01\x20\x01(\tR\x0bcustomerUid\x12!\n\x0cmerchant_uid\x18\
    \x02\x20\x01(\tR\x0bmerchantUid\x12\x17\n\x07imp_uid\x18\x03\x20\x01(\tR\
    \x06impUid\x12\x1f\n\x0bschedule_at\x18\x04\x20\x01(\x05R\nscheduleAt\
    \x12\x1f\n\x0bexecuted_at\x18\x05\x20\x01(\x05R\nexecutedAt\x12\x1d\n\nr\
    evoked_at\x18\x06\x20\x01(\x05R\trevokedAt\x12\x16\n\x06amount\x18\x07\
    \x20\x01(\x05R\x06amount\x12\x12\n\x04name\x18\x08\x20\x01(\tR\x04name\
    \x12\x1d\n\nbuyer_name\x18\t\x20\x01(\tR\tbuyerName\x12\x1f\n\x0bbuyer_e\
    mail\x18\n\x20\x01(\tR\nbuyerEmail\x12\x1b\n\tbuyer_tel\x18\x0b\x20\x01(\
    \tR\x08buyerTel\x12\x1d\n\nbuyer_addr\x18\x0c\x20\x01(\tR\tbuyerAddr\x12\
    %\n\x0ebuyer_postcode\x18\r\x20\x01(\tR\rbuyerPostcode\x12\x1f\n\x0bcust\
    om_data\x18\x0e\x20\x01(\tR\ncustomData\x12'\n\x0fschedule_status\x18\
    \x0f\x20\x01(\tR\x0escheduleStatus\x12%\n\x0epayment_status\x18\x10\x20\
    \x01(\tR\rpaymentStatus\x12\x1f\n\x0bfail_reason\x18\x11\x20\x01(\tR\nfa\
    ilReason\"\xa1\x02\n\x16SchedulePayemntRequest\x12!\n\x0ccustomer_uid\
    \x18\x01\x20\x01(\tR\x0bcustomerUid\x12'\n\x0fchecking_amount\x18\x02\
    \x20\x01(\x05R\x0echeckingAmount\x12\x1f\n\x0bcard_number\x18\x03\x20\
    \x01(\tR\ncardNumber\x12\x16\n\x06expiry\x18\x04\x20\x01(\tR\x06expiry\
    \x12\x14\n\x05birth\x18\x05\x20\x01(\tR\x05birth\x12\x1d\n\npwd_2digit\
    \x18\x06\x20\x01(\tR\tpwd2digit\x12\x0e\n\x02pg\x18\x07\x20\x01(\tR\x02p\
    g\x12=\n\tschedules\x18\x08\x20\x03(\x0b2\x1f.subscribe.PaymentScheduleP\
    aramR\tschedules\"\x8b\x01\n\x17SchedulePaymentResponse\x12\x12\n\x04cod\
    e\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\
    \x07message\x12B\n\x08response\x18\x03\x20\x03(\x0b2&.subscribe.UnitSche\
    dulePaymentResponseR\x08response\"`\n\x18UnscheduelPaymentRequest\x12!\n\
    \x0ccustomer_uid\x18\x01\x20\x01(\tR\x0bcustomerUid\x12!\n\x0cmerchant_u\
    id\x18\x02\x20\x03(\tR\x0bmerchantUid\"\x8d\x01\n\x19UnschedulePaymentRe\
    sponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07mess\
    age\x18\x02\x20\x01(\tR\x07message\x12B\n\x08response\x18\x03\x20\x03(\
    \x0b2&.subscribe.UnitSchedulePaymentResponseR\x08response\">\n\x19GetPay\
    mentScheduleRequest\x12!\n\x0cmerchant_uid\x18\x01\x20\x01(\tR\x0bmercha\
    ntUid\"\x8e\x01\n\x1aGetPaymentScheduleResponse\x12\x12\n\x04code\x18\
    \x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07m\
    essage\x12B\n\x08response\x18\x03\x20\x01(\x0b2&.subscribe.UnitScheduleP\
    aymentResponseR\x08response\"\xa9\x01\n#GetPaymentScheduleByCustomerRequ\
    est\x12!\n\x0ccustomer_uid\x18\x01\x20\x01(\tR\x0bcustomerUid\x12\x12\n\
    \x04page\x18\x02\x20\x01(\x05R\x04page\x12\x12\n\x04from\x18\x03\x20\x01\
    (\x05R\x04from\x12\x0e\n\x02to\x18\x04\x20\x01(\x05R\x02to\x12'\n\x0fsch\
    edule_status\x18\x05\x20\x01(\tR\x0escheduleStatus\"\xaa\x01\n&NestedGet\
    PaymentScheduleByCustomerData\x12\x14\n\x05total\x18\x01\x20\x01(\x05R\
    \x05total\x12\x1a\n\x08previous\x18\x02\x20\x01(\x05R\x08previous\x12\
    \x12\n\x04next\x18\x03\x20\x01(\x05R\x04next\x12:\n\x04list\x18\x04\x20\
    \x03(\x0b2&.subscribe.UnitSchedulePaymentResponseR\x04list\"\xa3\x01\n$G\
    etPaymentScheduleByCustomerResponse\x12\x12\n\x04code\x18\x01\x20\x01(\
    \x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\x12M\n\
    \x08response\x18\x03\x20\x01(\x0b21.subscribe.NestedGetPaymentScheduleBy\
    CustomerDataR\x08response2\xba\x07\n\x10SubscribeService\x12\x87\x01\n\
    \x11OnetimePaymentRPC\x12\x20.subscribe.OnetimePaymentRequest\x1a!.subsc\
    ribe.OnetimePaymentResponse\"-\x82\xd3\xe4\x93\x02'\"\"/api/v1/subscribe\
    /payments/onetime:\x01*\x12\x7f\n\x0fAgainPaymentRPC\x12\x1e.subscribe.A\
    gainPaymentRequest\x1a\x1f.subscribe.AgainPaymentResponse\"+\x82\xd3\xe4\
    \x93\x02%\"\x20/api/v1/subscribe/payments/again:\x01*\x12\x8b\x01\n\x12S\
    chedulePaymentRPC\x12!.subscribe.SchedulePayemntRequest\x1a\".subscribe.\
    SchedulePaymentResponse\".\x82\xd3\xe4\x93\x02(\"#/api/v1/subscribe/paym\
    ents/schedule:\x01*\x12\x93\x01\n\x14UnschedulePaymentRPC\x12#.subscribe\
    .UnscheduelPaymentRequest\x1a$.subscribe.UnschedulePaymentResponse\"0\
    \x82\xd3\xe4\x93\x02*\"%/api/v1/subscribe/payments/unschedule:\x01*\x12\
    \xa4\x01\n\x16GetScheduledPaymentRPC\x12$.subscribe.GetPaymentScheduleRe\
    quest\x1a%.subscribe.GetPaymentScheduleResponse\"=\x82\xd3\xe4\x93\x027\
    \"2/api/v1/subscribe/payments/schedule/{merchant_uid}:\x01*\x12\xcf\x01\
    \n#GetScheduledPaymentByCustomerUidRPC\x12..subscribe.GetPaymentSchedule\
    ByCustomerRequest\x1a/.subscribe.GetPaymentScheduleByCustomerResponse\"G\
    \x82\xd3\xe4\x93\x02A\"</api/v1/subscribe/payments/schedule/customers/{c\
    ustomer_uid}:\x01*B6Z4github.com/iamport/interface/gen_src/go/v1/subscri\
    beJ\xf53\n\x07\x12\x05\0\0\xc2\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x01\0\x12\n\t\n\x02\x03\0\x12\x03\x03\0&\n\t\n\
    \x02\x03\x01\x12\x03\x04\0\"\n\x08\n\x01\x08\x12\x03\x06\0K\n\t\n\x02\
    \x08\x0b\x12\x03\x06\0K\n\n\n\x02\x06\0\x12\x04\x08\03\x01\n\n\n\x03\x06\
    \0\x01\x12\x03\x08\x08\x18\n\x0c\n\x04\x06\0\x02\0\x12\x04\t\x04\x0e\x05\
    \n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\t\x08\x19\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\t\x1a/\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\t:P\n\r\n\x05\
    \x06\0\x02\0\x04\x12\x04\n\x08\r\n\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\
    \"\x12\x04\n\x08\r\n\n\x0c\n\x04\x06\0\x02\x01\x12\x04\x10\x04\x15\x05\n\
    \x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x10\x08\x17\n\x0c\n\x05\x06\0\x02\
    \x01\x02\x12\x03\x10\x18+\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x106J\n\
    \r\n\x05\x06\0\x02\x01\x04\x12\x04\x11\x08\x14\n\n\x11\n\t\x06\0\x02\x01\
    \x04\xb0\xca\xbc\"\x12\x04\x11\x08\x14\n\n\x0c\n\x04\x06\0\x02\x02\x12\
    \x04\x17\x04\x1c\x05\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x17\x08\x1a\n\
    \x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x17\x1b1\n\x0c\n\x05\x06\0\x02\x02\
    \x03\x12\x03\x17<S\n\r\n\x05\x06\0\x02\x02\x04\x12\x04\x18\x08\x1b\n\n\
    \x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04\x18\x08\x1b\n\n\x0c\n\
    \x04\x06\0\x02\x03\x12\x04\x1e\x04#\x05\n\x0c\n\x05\x06\0\x02\x03\x01\
    \x12\x03\x1e\x08\x1c\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x1e\x1d5\n\
    \x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x1e@Y\n\r\n\x05\x06\0\x02\x03\x04\
    \x12\x04\x1f\x08\"\n\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04\
    \x1f\x08\"\n\n\x0c\n\x04\x06\0\x02\x04\x12\x04%\x04*\x05\n\x0c\n\x05\x06\
    \0\x02\x04\x01\x12\x03%\x08\x1e\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03%\
    \x1f8\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03%C]\n\r\n\x05\x06\0\x02\x04\
    \x04\x12\x04&\x08)\n\n\x11\n\t\x06\0\x02\x04\x04\xb0\xca\xbc\"\x12\x04&\
    \x08)\n\n\x0c\n\x04\x06\0\x02\x05\x12\x04,\x041\x05\n\x0c\n\x05\x06\0\
    \x02\x05\x01\x12\x03,\x08+\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03,,O\n\
    \x0c\n\x05\x06\0\x02\x05\x03\x12\x03,Z~\n\r\n\x05\x06\0\x02\x05\x04\x12\
    \x04-\x080\n\n\x11\n\t\x06\0\x02\x05\x04\xb0\xca\xbc\"\x12\x04-\x080\n\n\
    \n\n\x02\x04\0\x12\x045\0I\x01\n\n\n\x03\x04\0\x01\x12\x035\x08\x1d\n\
    \x0b\n\x04\x04\0\x02\0\x12\x036\x04\x1c\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x036\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x036\x0b\x17\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x036\x1a\x1b\n\x0b\n\x04\x04\0\x02\x01\x12\x037\x04\x16\
    \n\x0c\n\x05\x04\0\x02\x01\x05\x12\x037\x04\n\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x037\x0b\x11\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x037\x14\x15\n\
    \x0b\n\x04\x04\0\x02\x02\x12\x038\x04\x18\n\x0c\n\x05\x04\0\x02\x02\x05\
    \x12\x038\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x038\x0b\x13\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x038\x16\x17\n\x0b\n\x04\x04\0\x02\x03\x12\
    \x039\x04\x1b\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x039\x04\n\n\x0c\n\x05\
    \x04\0\x02\x03\x01\x12\x039\x0b\x16\n\x0c\n\x05\x04\0\x02\x03\x03\x12\
    \x039\x19\x1a\n\x0b\n\x04\x04\0\x02\x04\x12\x03:\x04\x16\n\x0c\n\x05\x04\
    \0\x02\x04\x05\x12\x03:\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03:\x0b\
    \x11\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03:\x14\x15\n\x0b\n\x04\x04\0\
    \x02\x05\x12\x03;\x04\x15\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03;\x04\n\n\
    \x0c\n\x05\x04\0\x02\x05\x01\x12\x03;\x0b\x10\n\x0c\n\x05\x04\0\x02\x05\
    \x03\x12\x03;\x13\x14\n\x0b\n\x04\x04\0\x02\x06\x12\x03<\x04\x1a\n\x0c\n\
    \x05\x04\0\x02\x06\x05\x12\x03<\x04\n\n\x0c\n\x05\x04\0\x02\x06\x01\x12\
    \x03<\x0b\x15\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03<\x18\x19\n\x0b\n\x04\
    \x04\0\x02\x07\x12\x03=\x04\x1c\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03=\
    \x04\n\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03=\x0b\x17\n\x0c\n\x05\x04\0\
    \x02\x07\x03\x12\x03=\x1a\x1b\n\x0b\n\x04\x04\0\x02\x08\x12\x03>\x04\x12\
    \n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03>\x04\n\n\x0c\n\x05\x04\0\x02\x08\
    \x01\x12\x03>\x0b\r\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03>\x10\x11\n\x0b\
    \n\x04\x04\0\x02\t\x12\x03?\x04\x15\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03?\
    \x04\n\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03?\x0b\x0f\n\x0c\n\x05\x04\0\
    \x02\t\x03\x12\x03?\x12\x14\n\x0b\n\x04\x04\0\x02\n\x12\x03@\x04\x1b\n\
    \x0c\n\x05\x04\0\x02\n\x05\x12\x03@\x04\n\n\x0c\n\x05\x04\0\x02\n\x01\
    \x12\x03@\x0b\x15\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03@\x18\x1a\n\x0b\n\
    \x04\x04\0\x02\x0b\x12\x03A\x04\x1c\n\x0c\n\x05\x04\0\x02\x0b\x05\x12\
    \x03A\x04\n\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03A\x0b\x16\n\x0c\n\x05\
    \x04\0\x02\x0b\x03\x12\x03A\x19\x1b\n\x0b\n\x04\x04\0\x02\x0c\x12\x03B\
    \x04\x1a\n\x0c\n\x05\x04\0\x02\x0c\x05\x12\x03B\x04\n\n\x0c\n\x05\x04\0\
    \x02\x0c\x01\x12\x03B\x0b\x14\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\x03B\x17\
    \x19\n\x0b\n\x04\x04\0\x02\r\x12\x03C\x04\x1b\n\x0c\n\x05\x04\0\x02\r\
    \x05\x12\x03C\x04\n\n\x0c\n\x05\x04\0\x02\r\x01\x12\x03C\x0b\x15\n\x0c\n\
    \x05\x04\0\x02\r\x03\x12\x03C\x18\x1a\n\x0b\n\x04\x04\0\x02\x0e\x12\x03D\
    \x04\x1f\n\x0c\n\x05\x04\0\x02\x0e\x05\x12\x03D\x04\n\n\x0c\n\x05\x04\0\
    \x02\x0e\x01\x12\x03D\x0b\x19\n\x0c\n\x05\x04\0\x02\x0e\x03\x12\x03D\x1c\
    \x1e\n\x0b\n\x04\x04\0\x02\x0f\x12\x03E\x04\x1a\n\x0c\n\x05\x04\0\x02\
    \x0f\x05\x12\x03E\x04\t\n\x0c\n\x05\x04\0\x02\x0f\x01\x12\x03E\n\x14\n\
    \x0c\n\x05\x04\0\x02\x0f\x03\x12\x03E\x17\x19\n\x0b\n\x04\x04\0\x02\x10\
    \x12\x03F\x04(\n\x0c\n\x05\x04\0\x02\x10\x05\x12\x03F\x04\x08\n\x0c\n\
    \x05\x04\0\x02\x10\x01\x12\x03F\t\"\n\x0c\n\x05\x04\0\x02\x10\x03\x12\
    \x03F%'\n\x0b\n\x04\x04\0\x02\x11\x12\x03G\x04\x1c\n\x0c\n\x05\x04\0\x02\
    \x11\x05\x12\x03G\x04\n\n\x0c\n\x05\x04\0\x02\x11\x01\x12\x03G\x0b\x16\n\
    \x0c\n\x05\x04\0\x02\x11\x03\x12\x03G\x19\x1b\n\x0b\n\x04\x04\0\x02\x12\
    \x12\x03H\x04\x1b\n\x0c\n\x05\x04\0\x02\x12\x05\x12\x03H\x04\n\n\x0c\n\
    \x05\x04\0\x02\x12\x01\x12\x03H\x0b\x15\n\x0c\n\x05\x04\0\x02\x12\x03\
    \x12\x03H\x18\x1a\n\n\n\x02\x04\x01\x12\x04K\0O\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03K\x08\x1e\n\x0b\n\x04\x04\x01\x02\0\x12\x03L\x04\x13\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03L\x04\t\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03L\n\x0e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03L\x11\x12\n\x0b\n\x04\
    \x04\x01\x02\x01\x12\x03M\x04\x17\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\
    \x03M\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03M\x0b\x12\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03M\x15\x16\n\x0b\n\x04\x04\x01\x02\x02\x12\
    \x03N\x04!\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03N\x04\x13\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03N\x14\x1c\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03N\x1f\x20\n\n\n\x02\x04\x02\x12\x04Q\0`\x01\n\n\n\x03\x04\x02\
    \x01\x12\x03Q\x08\x1b\n\x0b\n\x04\x04\x02\x02\0\x12\x03R\x04\x1c\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03R\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03R\x0b\x17\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03R\x1a\x1b\n\x0b\n\x04\
    \x04\x02\x02\x01\x12\x03S\x04\x1c\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03S\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03S\x0b\x17\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03S\x1a\x1b\n\x0b\n\x04\x04\x02\x02\x02\x12\
    \x03T\x04\x16\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03T\x04\n\n\x0c\n\x05\
    \x04\x02\x02\x02\x01\x12\x03T\x0b\x11\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03T\x14\x15\n\x0b\n\x04\x04\x02\x02\x03\x12\x03U\x04\x18\n\x0c\n\
    \x05\x04\x02\x02\x03\x05\x12\x03U\x04\n\n\x0c\n\x05\x04\x02\x02\x03\x01\
    \x12\x03U\x0b\x13\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03U\x16\x17\n\x0b\
    \n\x04\x04\x02\x02\x04\x12\x03V\x04\x14\n\x0c\n\x05\x04\x02\x02\x04\x05\
    \x12\x03V\x04\n\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03V\x0b\x0f\n\x0c\n\
    \x05\x04\x02\x02\x04\x03\x12\x03V\x12\x13\n\x0b\n\x04\x04\x02\x02\x05\
    \x12\x03W\x04\x1a\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x03W\x04\n\n\x0c\n\
    \x05\x04\x02\x02\x05\x01\x12\x03W\x0b\x15\n\x0c\n\x05\x04\x02\x02\x05\
    \x03\x12\x03W\x18\x19\n\x0b\n\x04\x04\x02\x02\x06\x12\x03X\x04\x1b\n\x0c\
    \n\x05\x04\x02\x02\x06\x05\x12\x03X\x04\n\n\x0c\n\x05\x04\x02\x02\x06\
    \x01\x12\x03X\x0b\x16\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\x03X\x19\x1a\n\
    \x0b\n\x04\x04\x02\x02\x07\x12\x03Y\x04\x19\n\x0c\n\x05\x04\x02\x02\x07\
    \x05\x12\x03Y\x04\n\n\x0c\n\x05\x04\x02\x02\x07\x01\x12\x03Y\x0b\x14\n\
    \x0c\n\x05\x04\x02\x02\x07\x03\x12\x03Y\x17\x18\n\x0b\n\x04\x04\x02\x02\
    \x08\x12\x03Z\x04\x1a\n\x0c\n\x05\x04\x02\x02\x08\x05\x12\x03Z\x04\n\n\
    \x0c\n\x05\x04\x02\x02\x08\x01\x12\x03Z\x0b\x15\n\x0c\n\x05\x04\x02\x02\
    \x08\x03\x12\x03Z\x18\x19\n\x0b\n\x04\x04\x02\x02\t\x12\x03[\x04\x1f\n\
    \x0c\n\x05\x04\x02\x02\t\x05\x12\x03[\x04\n\n\x0c\n\x05\x04\x02\x02\t\
    \x01\x12\x03[\x0b\x19\n\x0c\n\x05\x04\x02\x02\t\x03\x12\x03[\x1c\x1e\n\
    \x0b\n\x04\x04\x02\x02\n\x12\x03\\\x04\x1a\n\x0c\n\x05\x04\x02\x02\n\x05\
    \x12\x03\\\x04\t\n\x0c\n\x05\x04\x02\x02\n\x01\x12\x03\\\n\x14\n\x0c\n\
    \x05\x04\x02\x02\n\x03\x12\x03\\\x17\x19\n\x0b\n\x04\x04\x02\x02\x0b\x12\
    \x03]\x04(\n\x0c\n\x05\x04\x02\x02\x0b\x05\x12\x03]\x04\x08\n\x0c\n\x05\
    \x04\x02\x02\x0b\x01\x12\x03]\t\"\n\x0c\n\x05\x04\x02\x02\x0b\x03\x12\
    \x03]%'\n\x0b\n\x04\x04\x02\x02\x0c\x12\x03^\x04\x1c\n\x0c\n\x05\x04\x02\
    \x02\x0c\x05\x12\x03^\x04\n\n\x0c\n\x05\x04\x02\x02\x0c\x01\x12\x03^\x0b\
    \x16\n\x0c\n\x05\x04\x02\x02\x0c\x03\x12\x03^\x19\x1b\n\x0b\n\x04\x04\
    \x02\x02\r\x12\x03_\x04\x1b\n\x0c\n\x05\x04\x02\x02\r\x05\x12\x03_\x04\n\
    \n\x0c\n\x05\x04\x02\x02\r\x01\x12\x03_\x0b\x15\n\x0c\n\x05\x04\x02\x02\
    \r\x03\x12\x03_\x18\x1a\n\n\n\x02\x04\x03\x12\x04b\0f\x01\n\n\n\x03\x04\
    \x03\x01\x12\x03b\x08\x1c\n\x0b\n\x04\x04\x03\x02\0\x12\x03c\x04\x13\n\
    \x0c\n\x05\x04\x03\x02\0\x05\x12\x03c\x04\t\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03c\n\x0e\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03c\x11\x12\n\x0b\
    \n\x04\x04\x03\x02\x01\x12\x03d\x04\x17\n\x0c\n\x05\x04\x03\x02\x01\x05\
    \x12\x03d\x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03d\x0b\x12\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03d\x15\x16\n\x0b\n\x04\x04\x03\x02\x02\
    \x12\x03e\x04!\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03e\x04\x13\n\x0c\n\
    \x05\x04\x03\x02\x02\x01\x12\x03e\x14\x1c\n\x0c\n\x05\x04\x03\x02\x02\
    \x03\x12\x03e\x1f\x20\n\n\n\x02\x04\x04\x12\x04h\0s\x01\n\n\n\x03\x04\
    \x04\x01\x12\x03h\x08\x1c\n\x0b\n\x04\x04\x04\x02\0\x12\x03i\x04\x1c\n\
    \x0c\n\x05\x04\x04\x02\0\x05\x12\x03i\x04\n\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x03i\x0b\x17\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03i\x1a\x1b\n\
    \x0b\n\x04\x04\x04\x02\x01\x12\x03j\x04\x1b\n\x0c\n\x05\x04\x04\x02\x01\
    \x05\x12\x03j\x04\n\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03j\x0b\x16\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03j\x19\x1a\n\x0b\n\x04\x04\x04\x02\
    \x02\x12\x03k\x04\x15\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03k\x04\t\n\
    \x0c\n\x05\x04\x04\x02\x02\x01\x12\x03k\n\x10\n\x0c\n\x05\x04\x04\x02\
    \x02\x03\x12\x03k\x13\x14\n\x0b\n\x04\x04\x04\x02\x03\x12\x03l\x04\x17\n\
    \x0c\n\x05\x04\x04\x02\x03\x05\x12\x03l\x04\t\n\x0c\n\x05\x04\x04\x02\
    \x03\x01\x12\x03l\n\x12\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03l\x15\x16\
    \n\x0b\n\x04\x04\x04\x02\x04\x12\x03m\x04\x14\n\x0c\n\x05\x04\x04\x02\
    \x04\x05\x12\x03m\x04\n\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x03m\x0b\x0f\
    \n\x0c\n\x05\x04\x04\x02\x04\x03\x12\x03m\x12\x13\n\x0b\n\x04\x04\x04\
    \x02\x05\x12\x03n\x04\x1a\n\x0c\n\x05\x04\x04\x02\x05\x05\x12\x03n\x04\n\
    \n\x0c\n\x05\x04\x04\x02\x05\x01\x12\x03n\x0b\x15\n\x0c\n\x05\x04\x04\
    \x02\x05\x03\x12\x03n\x18\x19\n\x0b\n\x04\x04\x04\x02\x06\x12\x03o\x04\
    \x1b\n\x0c\n\x05\x04\x04\x02\x06\x05\x12\x03o\x04\n\n\x0c\n\x05\x04\x04\
    \x02\x06\x01\x12\x03o\x0b\x16\n\x0c\n\x05\x04\x04\x02\x06\x03\x12\x03o\
    \x19\x1a\n\x0b\n\x04\x04\x04\x02\x07\x12\x03p\x04\x19\n\x0c\n\x05\x04\
    \x04\x02\x07\x05\x12\x03p\x04\n\n\x0c\n\x05\x04\x04\x02\x07\x01\x12\x03p\
    \x0b\x14\n\x0c\n\x05\x04\x04\x02\x07\x03\x12\x03p\x17\x18\n\x0b\n\x04\
    \x04\x04\x02\x08\x12\x03q\x04\x1a\n\x0c\n\x05\x04\x04\x02\x08\x05\x12\
    \x03q\x04\n\n\x0c\n\x05\x04\x04\x02\x08\x01\x12\x03q\x0b\x15\n\x0c\n\x05\
    \x04\x04\x02\x08\x03\x12\x03q\x18\x19\n\x0b\n\x04\x04\x04\x02\t\x12\x03r\
    \x04\x1f\n\x0c\n\x05\x04\x04\x02\t\x05\x12\x03r\x04\n\n\x0c\n\x05\x04\
    \x04\x02\t\x01\x12\x03r\x0b\x19\n\x0c\n\x05\x04\x04\x02\t\x03\x12\x03r\
    \x1c\x1e\n\x0b\n\x02\x04\x05\x12\x05u\0\x87\x01\x01\n\n\n\x03\x04\x05\
    \x01\x12\x03u\x08#\n\x0b\n\x04\x04\x05\x02\0\x12\x03v\x04\x1c\n\x0c\n\
    \x05\x04\x05\x02\0\x05\x12\x03v\x04\n\n\x0c\n\x05\x04\x05\x02\0\x01\x12\
    \x03v\x0b\x17\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03v\x1a\x1b\n\x0b\n\x04\
    \x04\x05\x02\x01\x12\x03w\x04\x1c\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\
    \x03w\x04\n\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03w\x0b\x17\n\x0c\n\x05\
    \x04\x05\x02\x01\x03\x12\x03w\x1a\x1b\n\x0b\n\x04\x04\x05\x02\x02\x12\
    \x03x\x04\x17\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x03x\x04\n\n\x0c\n\x05\
    \x04\x05\x02\x02\x01\x12\x03x\x0b\x12\n\x0c\n\x05\x04\x05\x02\x02\x03\
    \x12\x03x\x15\x16\n\x0b\n\x04\x04\x05\x02\x03\x12\x03y\x04\x1a\n\x0c\n\
    \x05\x04\x05\x02\x03\x05\x12\x03y\x04\t\n\x0c\n\x05\x04\x05\x02\x03\x01\
    \x12\x03y\n\x15\n\x0c\n\x05\x04\x05\x02\x03\x03\x12\x03y\x18\x19\n\x0b\n\
    \x04\x04\x05\x02\x04\x12\x03z\x04\x1a\n\x0c\n\x05\x04\x05\x02\x04\x05\
    \x12\x03z\x04\t\n\x0c\n\x05\x04\x05\x02\x04\x01\x12\x03z\n\x15\n\x0c\n\
    \x05\x04\x05\x02\x04\x03\x12\x03z\x18\x19\n\x0b\n\x04\x04\x05\x02\x05\
    \x12\x03{\x04\x19\n\x0c\n\x05\x04\x05\x02\x05\x05\x12\x03{\x04\t\n\x0c\n\
    \x05\x04\x05\x02\x05\x01\x12\x03{\n\x14\n\x0c\n\x05\x04\x05\x02\x05\x03\
    \x12\x03{\x17\x18\n\x0b\n\x04\x04\x05\x02\x06\x12\x03|\x04\x15\n\x0c\n\
    \x05\x04\x05\x02\x06\x05\x12\x03|\x04\t\n\x0c\n\x05\x04\x05\x02\x06\x01\
    \x12\x03|\n\x10\n\x0c\n\x05\x04\x05\x02\x06\x03\x12\x03|\x13\x14\n\x0b\n\
    \x04\x04\x05\x02\x07\x12\x03}\x04\x14\n\x0c\n\x05\x04\x05\x02\x07\x05\
    \x12\x03}\x04\n\n\x0c\n\x05\x04\x05\x02\x07\x01\x12\x03}\x0b\x0f\n\x0c\n\
    \x05\x04\x05\x02\x07\x03\x12\x03}\x12\x13\n\x0b\n\x04\x04\x05\x02\x08\
    \x12\x03~\x04\x1a\n\x0c\n\x05\x04\x05\x02\x08\x05\x12\x03~\x04\n\n\x0c\n\
    \x05\x04\x05\x02\x08\x01\x12\x03~\x0b\x15\n\x0c\n\x05\x04\x05\x02\x08\
    \x03\x12\x03~\x18\x19\n\x0b\n\x04\x04\x05\x02\t\x12\x03\x7f\x04\x1c\n\
    \x0c\n\x05\x04\x05\x02\t\x05\x12\x03\x7f\x04\n\n\x0c\n\x05\x04\x05\x02\t\
    \x01\x12\x03\x7f\x0b\x16\n\x0c\n\x05\x04\x05\x02\t\x03\x12\x03\x7f\x19\
    \x1b\n\x0c\n\x04\x04\x05\x02\n\x12\x04\x80\x01\x04\x1a\n\r\n\x05\x04\x05\
    \x02\n\x05\x12\x04\x80\x01\x04\n\n\r\n\x05\x04\x05\x02\n\x01\x12\x04\x80\
    \x01\x0b\x14\n\r\n\x05\x04\x05\x02\n\x03\x12\x04\x80\x01\x17\x19\n\x0c\n\
    \x04\x04\x05\x02\x0b\x12\x04\x81\x01\x04\x1b\n\r\n\x05\x04\x05\x02\x0b\
    \x05\x12\x04\x81\x01\x04\n\n\r\n\x05\x04\x05\x02\x0b\x01\x12\x04\x81\x01\
    \x0b\x15\n\r\n\x05\x04\x05\x02\x0b\x03\x12\x04\x81\x01\x18\x1a\n\x0c\n\
    \x04\x04\x05\x02\x0c\x12\x04\x82\x01\x04\x1f\n\r\n\x05\x04\x05\x02\x0c\
    \x05\x12\x04\x82\x01\x04\n\n\r\n\x05\x04\x05\x02\x0c\x01\x12\x04\x82\x01\
    \x0b\x19\n\r\n\x05\x04\x05\x02\x0c\x03\x12\x04\x82\x01\x1c\x1e\n\x0c\n\
    \x04\x04\x05\x02\r\x12\x04\x83\x01\x04\x1c\n\r\n\x05\x04\x05\x02\r\x05\
    \x12\x04\x83\x01\x04\n\n\r\n\x05\x04\x05\x02\r\x01\x12\x04\x83\x01\x0b\
    \x16\n\r\n\x05\x04\x05\x02\r\x03\x12\x04\x83\x01\x19\x1b\n\x0c\n\x04\x04\
    \x05\x02\x0e\x12\x04\x84\x01\x04\x20\n\r\n\x05\x04\x05\x02\x0e\x05\x12\
    \x04\x84\x01\x04\n\n\r\n\x05\x04\x05\x02\x0e\x01\x12\x04\x84\x01\x0b\x1a\
    \n\r\n\x05\x04\x05\x02\x0e\x03\x12\x04\x84\x01\x1d\x1f\n\x0c\n\x04\x04\
    \x05\x02\x0f\x12\x04\x85\x01\x04\x1f\n\r\n\x05\x04\x05\x02\x0f\x05\x12\
    \x04\x85\x01\x04\n\n\r\n\x05\x04\x05\x02\x0f\x01\x12\x04\x85\x01\x0b\x19\
    \n\r\n\x05\x04\x05\x02\x0f\x03\x12\x04\x85\x01\x1c\x1e\n\x0c\n\x04\x04\
    \x05\x02\x10\x12\x04\x86\x01\x04\x1c\n\r\n\x05\x04\x05\x02\x10\x05\x12\
    \x04\x86\x01\x04\n\n\r\n\x05\x04\x05\x02\x10\x01\x12\x04\x86\x01\x0b\x16\
    \n\r\n\x05\x04\x05\x02\x10\x03\x12\x04\x86\x01\x19\x1b\n\x0c\n\x02\x04\
    \x06\x12\x06\x89\x01\0\x92\x01\x01\n\x0b\n\x03\x04\x06\x01\x12\x04\x89\
    \x01\x08\x1e\n\x0c\n\x04\x04\x06\x02\0\x12\x04\x8a\x01\x04\x1c\n\r\n\x05\
    \x04\x06\x02\0\x05\x12\x04\x8a\x01\x04\n\n\r\n\x05\x04\x06\x02\0\x01\x12\
    \x04\x8a\x01\x0b\x17\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\x8a\x01\x1a\x1b\
    \n\x0c\n\x04\x04\x06\x02\x01\x12\x04\x8b\x01\x04\x1e\n\r\n\x05\x04\x06\
    \x02\x01\x05\x12\x04\x8b\x01\x04\t\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\
    \x8b\x01\n\x19\n\r\n\x05\x04\x06\x02\x01\x03\x12\x04\x8b\x01\x1c\x1d\n\
    \x0c\n\x04\x04\x06\x02\x02\x12\x04\x8c\x01\x04\x1b\n\r\n\x05\x04\x06\x02\
    \x02\x05\x12\x04\x8c\x01\x04\n\n\r\n\x05\x04\x06\x02\x02\x01\x12\x04\x8c\
    \x01\x0b\x16\n\r\n\x05\x04\x06\x02\x02\x03\x12\x04\x8c\x01\x19\x1a\n\x0c\
    \n\x04\x04\x06\x02\x03\x12\x04\x8d\x01\x04\x16\n\r\n\x05\x04\x06\x02\x03\
    \x05\x12\x04\x8d\x01\x04\n\n\r\n\x05\x04\x06\x02\x03\x01\x12\x04\x8d\x01\
    \x0b\x11\n\r\n\x05\x04\x06\x02\x03\x03\x12\x04\x8d\x01\x14\x15\n\x0c\n\
    \x04\x04\x06\x02\x04\x12\x04\x8e\x01\x04\x15\n\r\n\x05\x04\x06\x02\x04\
    \x05\x12\x04\x8e\x01\x04\n\n\r\n\x05\x04\x06\x02\x04\x01\x12\x04\x8e\x01\
    \x0b\x10\n\r\n\x05\x04\x06\x02\x04\x03\x12\x04\x8e\x01\x13\x14\n\x0c\n\
    \x04\x04\x06\x02\x05\x12\x04\x8f\x01\x04\x1a\n\r\n\x05\x04\x06\x02\x05\
    \x05\x12\x04\x8f\x01\x04\n\n\r\n\x05\x04\x06\x02\x05\x01\x12\x04\x8f\x01\
    \x0b\x15\n\r\n\x05\x04\x06\x02\x05\x03\x12\x04\x8f\x01\x18\x19\n\x0c\n\
    \x04\x04\x06\x02\x06\x12\x04\x90\x01\x04\x12\n\r\n\x05\x04\x06\x02\x06\
    \x05\x12\x04\x90\x01\x04\n\n\r\n\x05\x04\x06\x02\x06\x01\x12\x04\x90\x01\
    \x0b\r\n\r\n\x05\x04\x06\x02\x06\x03\x12\x04\x90\x01\x10\x11\n\x0c\n\x04\
    \x04\x06\x02\x07\x12\x04\x91\x01\x040\n\r\n\x05\x04\x06\x02\x07\x04\x12\
    \x04\x91\x01\x04\x0c\n\r\n\x05\x04\x06\x02\x07\x06\x12\x04\x91\x01\r!\n\
    \r\n\x05\x04\x06\x02\x07\x01\x12\x04\x91\x01\"+\n\r\n\x05\x04\x06\x02\
    \x07\x03\x12\x04\x91\x01./\n\x0c\n\x02\x04\x07\x12\x06\x94\x01\0\x98\x01\
    \x01\n\x0b\n\x03\x04\x07\x01\x12\x04\x94\x01\x08\x1f\n\x0c\n\x04\x04\x07\
    \x02\0\x12\x04\x95\x01\x04\x13\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\x95\
    \x01\x04\t\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\x95\x01\n\x0e\n\r\n\x05\
    \x04\x07\x02\0\x03\x12\x04\x95\x01\x11\x12\n\x0c\n\x04\x04\x07\x02\x01\
    \x12\x04\x96\x01\x04\x17\n\r\n\x05\x04\x07\x02\x01\x05\x12\x04\x96\x01\
    \x04\n\n\r\n\x05\x04\x07\x02\x01\x01\x12\x04\x96\x01\x0b\x12\n\r\n\x05\
    \x04\x07\x02\x01\x03\x12\x04\x96\x01\x15\x16\n\x0c\n\x04\x04\x07\x02\x02\
    \x12\x04\x97\x01\x046\n\r\n\x05\x04\x07\x02\x02\x04\x12\x04\x97\x01\x04\
    \x0c\n\r\n\x05\x04\x07\x02\x02\x06\x12\x04\x97\x01\r(\n\r\n\x05\x04\x07\
    \x02\x02\x01\x12\x04\x97\x01)1\n\r\n\x05\x04\x07\x02\x02\x03\x12\x04\x97\
    \x0145\n\x0c\n\x02\x04\x08\x12\x06\x9a\x01\0\x9d\x01\x01\n\x0b\n\x03\x04\
    \x08\x01\x12\x04\x9a\x01\x08\x20\n\x0c\n\x04\x04\x08\x02\0\x12\x04\x9b\
    \x01\x04\x1c\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\x9b\x01\x04\n\n\r\n\x05\
    \x04\x08\x02\0\x01\x12\x04\x9b\x01\x0b\x17\n\r\n\x05\x04\x08\x02\0\x03\
    \x12\x04\x9b\x01\x1a\x1b\n\x0c\n\x04\x04\x08\x02\x01\x12\x04\x9c\x01\x04\
    %\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04\x9c\x01\x04\x0c\n\r\n\x05\x04\
    \x08\x02\x01\x05\x12\x04\x9c\x01\r\x13\n\r\n\x05\x04\x08\x02\x01\x01\x12\
    \x04\x9c\x01\x14\x20\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\x9c\x01#$\n\
    \x0c\n\x02\x04\t\x12\x06\x9f\x01\0\xa3\x01\x01\n\x0b\n\x03\x04\t\x01\x12\
    \x04\x9f\x01\x08!\n\x0c\n\x04\x04\t\x02\0\x12\x04\xa0\x01\x04\x13\n\r\n\
    \x05\x04\t\x02\0\x05\x12\x04\xa0\x01\x04\t\n\r\n\x05\x04\t\x02\0\x01\x12\
    \x04\xa0\x01\n\x0e\n\r\n\x05\x04\t\x02\0\x03\x12\x04\xa0\x01\x11\x12\n\
    \x0c\n\x04\x04\t\x02\x01\x12\x04\xa1\x01\x04\x17\n\r\n\x05\x04\t\x02\x01\
    \x05\x12\x04\xa1\x01\x04\n\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\xa1\x01\
    \x0b\x12\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\xa1\x01\x15\x16\n\x0c\n\x04\
    \x04\t\x02\x02\x12\x04\xa2\x01\x046\n\r\n\x05\x04\t\x02\x02\x04\x12\x04\
    \xa2\x01\x04\x0c\n\r\n\x05\x04\t\x02\x02\x06\x12\x04\xa2\x01\r(\n\r\n\
    \x05\x04\t\x02\x02\x01\x12\x04\xa2\x01)1\n\r\n\x05\x04\t\x02\x02\x03\x12\
    \x04\xa2\x0145\n\x0c\n\x02\x04\n\x12\x06\xa5\x01\0\xa7\x01\x01\n\x0b\n\
    \x03\x04\n\x01\x12\x04\xa5\x01\x08!\n\x0c\n\x04\x04\n\x02\0\x12\x04\xa6\
    \x01\x04\x1c\n\r\n\x05\x04\n\x02\0\x05\x12\x04\xa6\x01\x04\n\n\r\n\x05\
    \x04\n\x02\0\x01\x12\x04\xa6\x01\x0b\x17\n\r\n\x05\x04\n\x02\0\x03\x12\
    \x04\xa6\x01\x1a\x1b\n\x0c\n\x02\x04\x0b\x12\x06\xa9\x01\0\xad\x01\x01\n\
    \x0b\n\x03\x04\x0b\x01\x12\x04\xa9\x01\x08\"\n\x0c\n\x04\x04\x0b\x02\0\
    \x12\x04\xaa\x01\x04\x13\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\xaa\x01\x04\
    \t\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\xaa\x01\n\x0e\n\r\n\x05\x04\x0b\
    \x02\0\x03\x12\x04\xaa\x01\x11\x12\n\x0c\n\x04\x04\x0b\x02\x01\x12\x04\
    \xab\x01\x04\x17\n\r\n\x05\x04\x0b\x02\x01\x05\x12\x04\xab\x01\x04\n\n\r\
    \n\x05\x04\x0b\x02\x01\x01\x12\x04\xab\x01\x0b\x12\n\r\n\x05\x04\x0b\x02\
    \x01\x03\x12\x04\xab\x01\x15\x16\n\x0c\n\x04\x04\x0b\x02\x02\x12\x04\xac\
    \x01\x04-\n\r\n\x05\x04\x0b\x02\x02\x06\x12\x04\xac\x01\x04\x1f\n\r\n\
    \x05\x04\x0b\x02\x02\x01\x12\x04\xac\x01\x20(\n\r\n\x05\x04\x0b\x02\x02\
    \x03\x12\x04\xac\x01+,\n\x0c\n\x02\x04\x0c\x12\x06\xaf\x01\0\xb5\x01\x01\
    \n\x0b\n\x03\x04\x0c\x01\x12\x04\xaf\x01\x08+\n\x0c\n\x04\x04\x0c\x02\0\
    \x12\x04\xb0\x01\x04\x1c\n\r\n\x05\x04\x0c\x02\0\x05\x12\x04\xb0\x01\x04\
    \n\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\xb0\x01\x0b\x17\n\r\n\x05\x04\x0c\
    \x02\0\x03\x12\x04\xb0\x01\x1a\x1b\n\x0c\n\x04\x04\x0c\x02\x01\x12\x04\
    \xb1\x01\x04\x13\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\xb1\x01\x04\t\n\r\
    \n\x05\x04\x0c\x02\x01\x01\x12\x04\xb1\x01\n\x0e\n\r\n\x05\x04\x0c\x02\
    \x01\x03\x12\x04\xb1\x01\x11\x12\n\x0c\n\x04\x04\x0c\x02\x02\x12\x04\xb2\
    \x01\x04\x13\n\r\n\x05\x04\x0c\x02\x02\x05\x12\x04\xb2\x01\x04\t\n\r\n\
    \x05\x04\x0c\x02\x02\x01\x12\x04\xb2\x01\n\x0e\n\r\n\x05\x04\x0c\x02\x02\
    \x03\x12\x04\xb2\x01\x11\x12\n\x0c\n\x04\x04\x0c\x02\x03\x12\x04\xb3\x01\
    \x04\x11\n\r\n\x05\x04\x0c\x02\x03\x05\x12\x04\xb3\x01\x04\t\n\r\n\x05\
    \x04\x0c\x02\x03\x01\x12\x04\xb3\x01\n\x0c\n\r\n\x05\x04\x0c\x02\x03\x03\
    \x12\x04\xb3\x01\x0f\x10\n\x0c\n\x04\x04\x0c\x02\x04\x12\x04\xb4\x01\x04\
    \x1f\n\r\n\x05\x04\x0c\x02\x04\x05\x12\x04\xb4\x01\x04\n\n\r\n\x05\x04\
    \x0c\x02\x04\x01\x12\x04\xb4\x01\x0b\x1a\n\r\n\x05\x04\x0c\x02\x04\x03\
    \x12\x04\xb4\x01\x1d\x1e\n\x0c\n\x02\x04\r\x12\x06\xb7\x01\0\xbc\x01\x01\
    \n\x0b\n\x03\x04\r\x01\x12\x04\xb7\x01\x08.\n\x0c\n\x04\x04\r\x02\0\x12\
    \x04\xb8\x01\x04\x14\n\r\n\x05\x04\r\x02\0\x05\x12\x04\xb8\x01\x04\t\n\r\
    \n\x05\x04\r\x02\0\x01\x12\x04\xb8\x01\n\x0f\n\r\n\x05\x04\r\x02\0\x03\
    \x12\x04\xb8\x01\x12\x13\n\x0c\n\x04\x04\r\x02\x01\x12\x04\xb9\x01\x04\
    \x17\n\r\n\x05\x04\r\x02\x01\x05\x12\x04\xb9\x01\x04\t\n\r\n\x05\x04\r\
    \x02\x01\x01\x12\x04\xb9\x01\n\x12\n\r\n\x05\x04\r\x02\x01\x03\x12\x04\
    \xb9\x01\x15\x16\n\x0c\n\x04\x04\r\x02\x02\x12\x04\xba\x01\x04\x13\n\r\n\
    \x05\x04\r\x02\x02\x05\x12\x04\xba\x01\x04\t\n\r\n\x05\x04\r\x02\x02\x01\
    \x12\x04\xba\x01\n\x0e\n\r\n\x05\x04\r\x02\x02\x03\x12\x04\xba\x01\x11\
    \x12\n\x0c\n\x04\x04\r\x02\x03\x12\x04\xbb\x01\x042\n\r\n\x05\x04\r\x02\
    \x03\x04\x12\x04\xbb\x01\x04\x0c\n\r\n\x05\x04\r\x02\x03\x06\x12\x04\xbb\
    \x01\r(\n\r\n\x05\x04\r\x02\x03\x01\x12\x04\xbb\x01)-\n\r\n\x05\x04\r\
    \x02\x03\x03\x12\x04\xbb\x0101\n\x0c\n\x02\x04\x0e\x12\x06\xbe\x01\0\xc2\
    \x01\x01\n\x0b\n\x03\x04\x0e\x01\x12\x04\xbe\x01\x08,\n\x0c\n\x04\x04\
    \x0e\x02\0\x12\x04\xbf\x01\x04\x13\n\r\n\x05\x04\x0e\x02\0\x05\x12\x04\
    \xbf\x01\x04\t\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\xbf\x01\n\x0e\n\r\n\
    \x05\x04\x0e\x02\0\x03\x12\x04\xbf\x01\x11\x12\n\x0c\n\x04\x04\x0e\x02\
    \x01\x12\x04\xc0\x01\x04\x17\n\r\n\x05\x04\x0e\x02\x01\x05\x12\x04\xc0\
    \x01\x04\n\n\r\n\x05\x04\x0e\x02\x01\x01\x12\x04\xc0\x01\x0b\x12\n\r\n\
    \x05\x04\x0e\x02\x01\x03\x12\x04\xc0\x01\x15\x16\n\x0c\n\x04\x04\x0e\x02\
    \x02\x12\x04\xc1\x01\x048\n\r\n\x05\x04\x0e\x02\x02\x06\x12\x04\xc1\x01\
    \x04*\n\r\n\x05\x04\x0e\x02\x02\x01\x12\x04\xc1\x01+3\n\r\n\x05\x04\x0e\
    \x02\x02\x03\x12\x04\xc1\x0167b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(super::annotations::file_descriptor());
        deps.push(super::payment::file_descriptor());
        let mut messages = ::std::vec::Vec::new();
        messages.push(OnetimePaymentRequest::generated_message_descriptor_data());
        messages.push(OnetimePaymentResponse::generated_message_descriptor_data());
        messages.push(AgainPaymentRequest::generated_message_descriptor_data());
        messages.push(AgainPaymentResponse::generated_message_descriptor_data());
        messages.push(PaymentScheduleParam::generated_message_descriptor_data());
        messages.push(UnitSchedulePaymentResponse::generated_message_descriptor_data());
        messages.push(SchedulePayemntRequest::generated_message_descriptor_data());
        messages.push(SchedulePaymentResponse::generated_message_descriptor_data());
        messages.push(UnscheduelPaymentRequest::generated_message_descriptor_data());
        messages.push(UnschedulePaymentResponse::generated_message_descriptor_data());
        messages.push(GetPaymentScheduleRequest::generated_message_descriptor_data());
        messages.push(GetPaymentScheduleResponse::generated_message_descriptor_data());
        messages.push(GetPaymentScheduleByCustomerRequest::generated_message_descriptor_data());
        messages.push(NestedGetPaymentScheduleByCustomerData::generated_message_descriptor_data());
        messages.push(GetPaymentScheduleByCustomerResponse::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
