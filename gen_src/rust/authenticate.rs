// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `v2/authenticate/authenticate.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct TokenRequest {
    // message fields
    pub imp_key: ::std::string::String,
    pub imp_secret: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenRequest {
    fn default() -> &'a TokenRequest {
        <TokenRequest as ::protobuf::Message>::default_instance()
    }
}

impl TokenRequest {
    pub fn new() -> TokenRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "imp_key",
            |m: &TokenRequest| { &m.imp_key },
            |m: &mut TokenRequest| { &mut m.imp_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "imp_secret",
            |m: &TokenRequest| { &m.imp_secret },
            |m: &mut TokenRequest| { &mut m.imp_secret },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TokenRequest>(
            "TokenRequest",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for TokenRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.imp_key = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.imp_secret = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.imp_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.imp_key);
        }
        if !self.imp_secret.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.imp_secret);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.imp_key.is_empty() {
            os.write_string(1, &self.imp_key)?;
        }
        if !self.imp_secret.is_empty() {
            os.write_string(2, &self.imp_secret)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> TokenRequest {
        TokenRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static TokenRequest {
        static instance: TokenRequest = TokenRequest {
            imp_key: ::std::string::String::new(),
            imp_secret: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for TokenRequest {
    fn clear(&mut self) {
        self.imp_key.clear();
        self.imp_secret.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TokenRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct TokenData {
    // message fields
    pub access_token: ::std::string::String,
    pub expired_at: i32,
    pub now: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenData {
    fn default() -> &'a TokenData {
        <TokenData as ::protobuf::Message>::default_instance()
    }
}

impl TokenData {
    pub fn new() -> TokenData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "access_token",
            |m: &TokenData| { &m.access_token },
            |m: &mut TokenData| { &mut m.access_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expired_at",
            |m: &TokenData| { &m.expired_at },
            |m: &mut TokenData| { &mut m.expired_at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "now",
            |m: &TokenData| { &m.now },
            |m: &mut TokenData| { &mut m.now },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TokenData>(
            "TokenData",
            1,
            fields,
        )
    }
}

impl ::protobuf::Message for TokenData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.access_token = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expired_at = is.read_int32()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.now = is.read_int32()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.access_token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.access_token);
        }
        if self.expired_at != 0 {
            my_size += ::protobuf::rt::value_size(2, self.expired_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.now != 0 {
            my_size += ::protobuf::rt::value_size(3, self.now, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.access_token.is_empty() {
            os.write_string(1, &self.access_token)?;
        }
        if self.expired_at != 0 {
            os.write_int32(2, self.expired_at)?;
        }
        if self.now != 0 {
            os.write_int32(3, self.now)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> TokenData {
        TokenData::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 1)
    }

    fn default_instance() -> &'static TokenData {
        static instance: TokenData = TokenData {
            access_token: ::std::string::String::new(),
            expired_at: 0,
            now: 0,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for TokenData {
    fn clear(&mut self) {
        self.access_token.clear();
        self.expired_at = 0;
        self.now = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TokenData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct TokenResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<TokenData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenResponse {
    fn default() -> &'a TokenResponse {
        <TokenResponse as ::protobuf::Message>::default_instance()
    }
}

impl TokenResponse {
    pub fn new() -> TokenResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &TokenResponse| { &m.code },
            |m: &mut TokenResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &TokenResponse| { &m.message },
            |m: &mut TokenResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TokenData>(
            "response",
            |m: &TokenResponse| { &m.response },
            |m: &mut TokenResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TokenResponse>(
            "TokenResponse",
            2,
            fields,
        )
    }
}

impl ::protobuf::Message for TokenResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> TokenResponse {
        TokenResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 2)
    }

    fn default_instance() -> &'static TokenResponse {
        static instance: TokenResponse = TokenResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for TokenResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TokenResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct PubKeyRegisterRequest {
    // message fields
    pub imp_key: ::std::string::String,
    pub public_key: ::std::string::String,
    pub password: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a PubKeyRegisterRequest {
    fn default() -> &'a PubKeyRegisterRequest {
        <PubKeyRegisterRequest as ::protobuf::Message>::default_instance()
    }
}

impl PubKeyRegisterRequest {
    pub fn new() -> PubKeyRegisterRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "imp_key",
            |m: &PubKeyRegisterRequest| { &m.imp_key },
            |m: &mut PubKeyRegisterRequest| { &mut m.imp_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "public_key",
            |m: &PubKeyRegisterRequest| { &m.public_key },
            |m: &mut PubKeyRegisterRequest| { &mut m.public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "password",
            |m: &PubKeyRegisterRequest| { &m.password },
            |m: &mut PubKeyRegisterRequest| { &mut m.password },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PubKeyRegisterRequest>(
            "PubKeyRegisterRequest",
            3,
            fields,
        )
    }
}

impl ::protobuf::Message for PubKeyRegisterRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.imp_key = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.public_key = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.password = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.imp_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.imp_key);
        }
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.public_key);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.password);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.imp_key.is_empty() {
            os.write_string(1, &self.imp_key)?;
        }
        if !self.public_key.is_empty() {
            os.write_string(2, &self.public_key)?;
        }
        if !self.password.is_empty() {
            os.write_string(3, &self.password)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> PubKeyRegisterRequest {
        PubKeyRegisterRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 3)
    }

    fn default_instance() -> &'static PubKeyRegisterRequest {
        static instance: PubKeyRegisterRequest = PubKeyRegisterRequest {
            imp_key: ::std::string::String::new(),
            public_key: ::std::string::String::new(),
            password: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for PubKeyRegisterRequest {
    fn clear(&mut self) {
        self.imp_key.clear();
        self.public_key.clear();
        self.password.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PubKeyRegisterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PubKeyRegisterRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct PubKeyRegisterResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a PubKeyRegisterResponse {
    fn default() -> &'a PubKeyRegisterResponse {
        <PubKeyRegisterResponse as ::protobuf::Message>::default_instance()
    }
}

impl PubKeyRegisterResponse {
    pub fn new() -> PubKeyRegisterResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &PubKeyRegisterResponse| { &m.code },
            |m: &mut PubKeyRegisterResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &PubKeyRegisterResponse| { &m.message },
            |m: &mut PubKeyRegisterResponse| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PubKeyRegisterResponse>(
            "PubKeyRegisterResponse",
            4,
            fields,
        )
    }
}

impl ::protobuf::Message for PubKeyRegisterResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> PubKeyRegisterResponse {
        PubKeyRegisterResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 4)
    }

    fn default_instance() -> &'static PubKeyRegisterResponse {
        static instance: PubKeyRegisterResponse = PubKeyRegisterResponse {
            code: 0,
            message: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for PubKeyRegisterResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PubKeyRegisterResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PubKeyRegisterResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"v2/authenticate/authenticate.proto\x12\x0fauthenticate_v2\x1a\x1cgoo\
    gle/api/annotations.proto\"F\n\x0cTokenRequest\x12\x17\n\x07imp_key\x18\
    \x01\x20\x01(\tR\x06impKey\x12\x1d\n\nimp_secret\x18\x02\x20\x01(\tR\tim\
    pSecret\"_\n\tTokenData\x12!\n\x0caccess_token\x18\x01\x20\x01(\tR\x0bac\
    cessToken\x12\x1d\n\nexpired_at\x18\x02\x20\x01(\x05R\texpiredAt\x12\x10\
    \n\x03now\x18\x03\x20\x01(\x05R\x03now\"u\n\rTokenResponse\x12\x12\n\x04\
    code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\
    \tR\x07message\x126\n\x08response\x18\x03\x20\x01(\x0b2\x1a.authenticate\
    _v2.TokenDataR\x08response\"k\n\x15PubKeyRegisterRequest\x12\x17\n\x07im\
    p_key\x18\x01\x20\x01(\tR\x06impKey\x12\x1d\n\npublic_key\x18\x02\x20\
    \x01(\tR\tpublicKey\x12\x1a\n\x08password\x18\x03\x20\x01(\tR\x08passwor\
    d\"F\n\x16PubKeyRegisterResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\
    \x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message2\x8f\x02\n\
    \x13AuthenticateService\x12l\n\x08TokenRPC\x12\x1d.authenticate_v2.Token\
    Request\x1a\x1e.authenticate_v2.TokenResponse\"!\x82\xd3\xe4\x93\x02\x1b\
    \"\x16/api/v2/users/getToken:\x01*\x12\x89\x01\n\x11RegisterPubKeyRPC\
    \x12&.authenticate_v2.PubKeyRegisterRequest\x1a'.authenticate_v2.PubKeyR\
    egisterResponse\"#\x82\xd3\xe4\x93\x02\x1d\"\x18/api/v2/users/public_key\
    :\x01*B9Z7github.com/iamport/interface/gen_src/go/v2/authenticateJ\xfe\
    \x08\n\x06\x12\x04\0\01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x02\x12\x03\x01\0\x18\n\t\n\x02\x03\0\x12\x03\x03\0&\n\x08\n\x01\x08\
    \x12\x03\x05\0N\n\t\n\x02\x08\x0b\x12\x03\x05\0N\n\n\n\x02\x06\0\x12\x04\
    \x07\0\x15\x01\n\n\n\x03\x06\0\x01\x12\x03\x07\x08\x1b\n\x0c\n\x04\x06\0\
    \x02\0\x12\x04\x08\x04\r\x05\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x08\x08\
    \x10\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x08\x11\x1d\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x03\x08(5\n\r\n\x05\x06\0\x02\0\x04\x12\x04\t\x08\x0c\n\n\
    \x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04\t\x08\x0c\n\n\x0c\n\x04\
    \x06\0\x02\x01\x12\x04\x0f\x04\x14\x05\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x0f\x08\x19\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x0f\x1a/\n\x0c\n\
    \x05\x06\0\x02\x01\x03\x12\x03\x0f:P\n\r\n\x05\x06\0\x02\x01\x04\x12\x04\
    \x10\x08\x13\n\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04\x10\x08\
    \x13\n\n\n\n\x02\x04\0\x12\x04\x17\0\x1a\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x17\x08\x14\n\x0b\n\x04\x04\0\x02\0\x12\x03\x18\x04\x17\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\x18\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x18\
    \x0b\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x18\x15\x16\n\x0b\n\x04\x04\
    \0\x02\x01\x12\x03\x19\x04\x1a\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x19\
    \x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x19\x0b\x15\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03\x19\x18\x19\n\n\n\x02\x04\x01\x12\x04\x1c\0\x20\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\x1c\x08\x11\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\x1d\x04\x1c\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1d\x04\n\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1d\x0b\x17\n\x0c\n\x05\x04\x01\x02\
    \0\x03\x12\x03\x1d\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x1e\x04\
    \x19\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x1e\x04\t\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03\x1e\n\x14\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03\x1e\x17\x18\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x1f\x04\x12\n\x0c\n\
    \x05\x04\x01\x02\x02\x05\x12\x03\x1f\x04\t\n\x0c\n\x05\x04\x01\x02\x02\
    \x01\x12\x03\x1f\n\r\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x1f\x10\x11\
    \n\n\n\x02\x04\x02\x12\x04\"\0&\x01\n\n\n\x03\x04\x02\x01\x12\x03\"\x08\
    \x15\n\x0b\n\x04\x04\x02\x02\0\x12\x03#\x04\x13\n\x0c\n\x05\x04\x02\x02\
    \0\x05\x12\x03#\x04\t\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03#\n\x0e\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x03#\x11\x12\n\x0b\n\x04\x04\x02\x02\x01\
    \x12\x03$\x04\x17\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03$\x04\n\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03$\x0b\x12\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03$\x15\x16\n\x0b\n\x04\x04\x02\x02\x02\x12\x03%\x04\x1b\n\x0c\
    \n\x05\x04\x02\x02\x02\x06\x12\x03%\x04\r\n\x0c\n\x05\x04\x02\x02\x02\
    \x01\x12\x03%\x0e\x16\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03%\x19\x1a\n\
    \n\n\x02\x04\x03\x12\x04(\0,\x01\n\n\n\x03\x04\x03\x01\x12\x03(\x08\x1d\
    \n\x0b\n\x04\x04\x03\x02\0\x12\x03)\x04\x17\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03)\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03)\x0b\x12\n\x0c\
    \n\x05\x04\x03\x02\0\x03\x12\x03)\x15\x16\n\x0b\n\x04\x04\x03\x02\x01\
    \x12\x03*\x04\x1a\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03*\x04\n\n\x0c\n\
    \x05\x04\x03\x02\x01\x01\x12\x03*\x0b\x15\n\x0c\n\x05\x04\x03\x02\x01\
    \x03\x12\x03*\x18\x19\n>\n\x04\x04\x03\x02\x02\x12\x03+\x04\x18\"1\x20wa\
    nt\x20to\x20make\x20it\x20work\x20without\x20session\x20dependency\n\n\
    \x0c\n\x05\x04\x03\x02\x02\x05\x12\x03+\x04\n\n\x0c\n\x05\x04\x03\x02\
    \x02\x01\x12\x03+\x0b\x13\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03+\x16\
    \x17\n\n\n\x02\x04\x04\x12\x04.\01\x01\n\n\n\x03\x04\x04\x01\x12\x03.\
    \x08\x1e\n\x0b\n\x04\x04\x04\x02\0\x12\x03/\x04\x13\n\x0c\n\x05\x04\x04\
    \x02\0\x05\x12\x03/\x04\t\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03/\n\x0e\n\
    \x0c\n\x05\x04\x04\x02\0\x03\x12\x03/\x11\x12\n\x0b\n\x04\x04\x04\x02\
    \x01\x12\x030\x04\x17\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x030\x04\n\n\
    \x0c\n\x05\x04\x04\x02\x01\x01\x12\x030\x0b\x12\n\x0c\n\x05\x04\x04\x02\
    \x01\x03\x12\x030\x15\x16b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(super::annotations::file_descriptor());
        let mut messages = ::std::vec::Vec::new();
        messages.push(TokenRequest::generated_message_descriptor_data());
        messages.push(TokenData::generated_message_descriptor_data());
        messages.push(TokenResponse::generated_message_descriptor_data());
        messages.push(PubKeyRegisterRequest::generated_message_descriptor_data());
        messages.push(PubKeyRegisterResponse::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
