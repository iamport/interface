// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `payment/payment.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct Payment {
    // message fields
    pub amount: i32,
    pub apply_num: ::std::string::String,
    pub bank_code: i32,
    pub bank_name: ::std::string::String,
    pub buyer_addr: ::std::string::String,
    pub buyer_email: ::std::string::String,
    pub buyer_name: ::std::string::String,
    pub buyer_postcode: ::std::string::String,
    pub buyer_tel: ::std::string::String,
    pub cancel_amount: i32,
    pub cancel_history: ::protobuf::RepeatedField<CancelHistory>,
    pub cancel_reason: ::std::string::String,
    pub cancel_receipt_urls: ::protobuf::RepeatedField<::std::string::String>,
    pub cancelled_at: i32,
    pub card_code: ::std::string::String,
    pub card_name: ::std::string::String,
    pub card_number: ::std::string::String,
    pub card_quota: i32,
    pub card_type: i32,
    pub cash_receipt_issued: bool,
    pub channel: ::std::string::String,
    pub currency: ::std::string::String,
    pub custom_data: ::std::string::String,
    pub customer_uid: ::std::string::String,
    pub customer_uid_usage: ::std::string::String,
    pub escrow: bool,
    pub fail_reason: ::std::string::String,
    pub failed_at: i32,
    pub imp_uid: ::std::string::String,
    pub merchant_uid: ::std::string::String,
    pub name: ::std::string::String,
    pub paid_at: i32,
    pub pay_method: ::std::string::String,
    pub pg_id: ::std::string::String,
    pub pg_provider: ::std::string::String,
    pub pg_tid: ::std::string::String,
    pub receipt_url: ::std::string::String,
    pub started_at: i32,
    pub status: ::std::string::String,
    pub user_agent: ::std::string::String,
    pub vbank_code: ::std::string::String,
    pub vbank_date: i32,
    pub vbank_holder: ::std::string::String,
    pub vbank_issued_at: i32,
    pub vbank_name: ::std::string::String,
    pub vbank_num: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Payment {
    fn default() -> &'a Payment {
        <Payment as ::protobuf::Message>::default_instance()
    }
}

impl Payment {
    pub fn new() -> Payment {
        ::std::default::Default::default()
    }

    // int32 amount = 1;


    pub fn get_amount(&self) -> i32 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i32) {
        self.amount = v;
    }

    // string apply_num = 2;


    pub fn get_apply_num(&self) -> &str {
        &self.apply_num
    }
    pub fn clear_apply_num(&mut self) {
        self.apply_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_apply_num(&mut self, v: ::std::string::String) {
        self.apply_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_apply_num(&mut self) -> &mut ::std::string::String {
        &mut self.apply_num
    }

    // Take field
    pub fn take_apply_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.apply_num, ::std::string::String::new())
    }

    // int32 bank_code = 3;


    pub fn get_bank_code(&self) -> i32 {
        self.bank_code
    }
    pub fn clear_bank_code(&mut self) {
        self.bank_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_bank_code(&mut self, v: i32) {
        self.bank_code = v;
    }

    // string bank_name = 4;


    pub fn get_bank_name(&self) -> &str {
        &self.bank_name
    }
    pub fn clear_bank_name(&mut self) {
        self.bank_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_bank_name(&mut self, v: ::std::string::String) {
        self.bank_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bank_name(&mut self) -> &mut ::std::string::String {
        &mut self.bank_name
    }

    // Take field
    pub fn take_bank_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bank_name, ::std::string::String::new())
    }

    // string buyer_addr = 5;


    pub fn get_buyer_addr(&self) -> &str {
        &self.buyer_addr
    }
    pub fn clear_buyer_addr(&mut self) {
        self.buyer_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer_addr(&mut self, v: ::std::string::String) {
        self.buyer_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer_addr(&mut self) -> &mut ::std::string::String {
        &mut self.buyer_addr
    }

    // Take field
    pub fn take_buyer_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer_addr, ::std::string::String::new())
    }

    // string buyer_email = 6;


    pub fn get_buyer_email(&self) -> &str {
        &self.buyer_email
    }
    pub fn clear_buyer_email(&mut self) {
        self.buyer_email.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer_email(&mut self, v: ::std::string::String) {
        self.buyer_email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer_email(&mut self) -> &mut ::std::string::String {
        &mut self.buyer_email
    }

    // Take field
    pub fn take_buyer_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer_email, ::std::string::String::new())
    }

    // string buyer_name = 7;


    pub fn get_buyer_name(&self) -> &str {
        &self.buyer_name
    }
    pub fn clear_buyer_name(&mut self) {
        self.buyer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer_name(&mut self, v: ::std::string::String) {
        self.buyer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer_name(&mut self) -> &mut ::std::string::String {
        &mut self.buyer_name
    }

    // Take field
    pub fn take_buyer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer_name, ::std::string::String::new())
    }

    // string buyer_postcode = 8;


    pub fn get_buyer_postcode(&self) -> &str {
        &self.buyer_postcode
    }
    pub fn clear_buyer_postcode(&mut self) {
        self.buyer_postcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer_postcode(&mut self, v: ::std::string::String) {
        self.buyer_postcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer_postcode(&mut self) -> &mut ::std::string::String {
        &mut self.buyer_postcode
    }

    // Take field
    pub fn take_buyer_postcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer_postcode, ::std::string::String::new())
    }

    // string buyer_tel = 9;


    pub fn get_buyer_tel(&self) -> &str {
        &self.buyer_tel
    }
    pub fn clear_buyer_tel(&mut self) {
        self.buyer_tel.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer_tel(&mut self, v: ::std::string::String) {
        self.buyer_tel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer_tel(&mut self) -> &mut ::std::string::String {
        &mut self.buyer_tel
    }

    // Take field
    pub fn take_buyer_tel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer_tel, ::std::string::String::new())
    }

    // int32 cancel_amount = 10;


    pub fn get_cancel_amount(&self) -> i32 {
        self.cancel_amount
    }
    pub fn clear_cancel_amount(&mut self) {
        self.cancel_amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_cancel_amount(&mut self, v: i32) {
        self.cancel_amount = v;
    }

    // repeated .payment.CancelHistory cancel_history = 11;


    pub fn get_cancel_history(&self) -> &[CancelHistory] {
        &self.cancel_history
    }
    pub fn clear_cancel_history(&mut self) {
        self.cancel_history.clear();
    }

    // Param is passed by value, moved
    pub fn set_cancel_history(&mut self, v: ::protobuf::RepeatedField<CancelHistory>) {
        self.cancel_history = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cancel_history(&mut self) -> &mut ::protobuf::RepeatedField<CancelHistory> {
        &mut self.cancel_history
    }

    // Take field
    pub fn take_cancel_history(&mut self) -> ::protobuf::RepeatedField<CancelHistory> {
        ::std::mem::replace(&mut self.cancel_history, ::protobuf::RepeatedField::new())
    }

    // string cancel_reason = 12;


    pub fn get_cancel_reason(&self) -> &str {
        &self.cancel_reason
    }
    pub fn clear_cancel_reason(&mut self) {
        self.cancel_reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_cancel_reason(&mut self, v: ::std::string::String) {
        self.cancel_reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cancel_reason(&mut self) -> &mut ::std::string::String {
        &mut self.cancel_reason
    }

    // Take field
    pub fn take_cancel_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cancel_reason, ::std::string::String::new())
    }

    // repeated string cancel_receipt_urls = 13;


    pub fn get_cancel_receipt_urls(&self) -> &[::std::string::String] {
        &self.cancel_receipt_urls
    }
    pub fn clear_cancel_receipt_urls(&mut self) {
        self.cancel_receipt_urls.clear();
    }

    // Param is passed by value, moved
    pub fn set_cancel_receipt_urls(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.cancel_receipt_urls = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cancel_receipt_urls(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.cancel_receipt_urls
    }

    // Take field
    pub fn take_cancel_receipt_urls(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.cancel_receipt_urls, ::protobuf::RepeatedField::new())
    }

    // int32 cancelled_at = 14;


    pub fn get_cancelled_at(&self) -> i32 {
        self.cancelled_at
    }
    pub fn clear_cancelled_at(&mut self) {
        self.cancelled_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_cancelled_at(&mut self, v: i32) {
        self.cancelled_at = v;
    }

    // string card_code = 15;


    pub fn get_card_code(&self) -> &str {
        &self.card_code
    }
    pub fn clear_card_code(&mut self) {
        self.card_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_code(&mut self, v: ::std::string::String) {
        self.card_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_code(&mut self) -> &mut ::std::string::String {
        &mut self.card_code
    }

    // Take field
    pub fn take_card_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_code, ::std::string::String::new())
    }

    // string card_name = 16;


    pub fn get_card_name(&self) -> &str {
        &self.card_name
    }
    pub fn clear_card_name(&mut self) {
        self.card_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_name(&mut self, v: ::std::string::String) {
        self.card_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_name(&mut self) -> &mut ::std::string::String {
        &mut self.card_name
    }

    // Take field
    pub fn take_card_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_name, ::std::string::String::new())
    }

    // string card_number = 17;


    pub fn get_card_number(&self) -> &str {
        &self.card_number
    }
    pub fn clear_card_number(&mut self) {
        self.card_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_number(&mut self, v: ::std::string::String) {
        self.card_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_number(&mut self) -> &mut ::std::string::String {
        &mut self.card_number
    }

    // Take field
    pub fn take_card_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_number, ::std::string::String::new())
    }

    // int32 card_quota = 18;


    pub fn get_card_quota(&self) -> i32 {
        self.card_quota
    }
    pub fn clear_card_quota(&mut self) {
        self.card_quota = 0;
    }

    // Param is passed by value, moved
    pub fn set_card_quota(&mut self, v: i32) {
        self.card_quota = v;
    }

    // int32 card_type = 19;


    pub fn get_card_type(&self) -> i32 {
        self.card_type
    }
    pub fn clear_card_type(&mut self) {
        self.card_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_card_type(&mut self, v: i32) {
        self.card_type = v;
    }

    // bool cash_receipt_issued = 20;


    pub fn get_cash_receipt_issued(&self) -> bool {
        self.cash_receipt_issued
    }
    pub fn clear_cash_receipt_issued(&mut self) {
        self.cash_receipt_issued = false;
    }

    // Param is passed by value, moved
    pub fn set_cash_receipt_issued(&mut self, v: bool) {
        self.cash_receipt_issued = v;
    }

    // string channel = 21;


    pub fn get_channel(&self) -> &str {
        &self.channel
    }
    pub fn clear_channel(&mut self) {
        self.channel.clear();
    }

    // Param is passed by value, moved
    pub fn set_channel(&mut self, v: ::std::string::String) {
        self.channel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel(&mut self) -> &mut ::std::string::String {
        &mut self.channel
    }

    // Take field
    pub fn take_channel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.channel, ::std::string::String::new())
    }

    // string currency = 22;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // string custom_data = 23;


    pub fn get_custom_data(&self) -> &str {
        &self.custom_data
    }
    pub fn clear_custom_data(&mut self) {
        self.custom_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom_data(&mut self, v: ::std::string::String) {
        self.custom_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom_data(&mut self) -> &mut ::std::string::String {
        &mut self.custom_data
    }

    // Take field
    pub fn take_custom_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom_data, ::std::string::String::new())
    }

    // string customer_uid = 24;


    pub fn get_customer_uid(&self) -> &str {
        &self.customer_uid
    }
    pub fn clear_customer_uid(&mut self) {
        self.customer_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid(&mut self, v: ::std::string::String) {
        self.customer_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_uid(&mut self) -> &mut ::std::string::String {
        &mut self.customer_uid
    }

    // Take field
    pub fn take_customer_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_uid, ::std::string::String::new())
    }

    // string customer_uid_usage = 25;


    pub fn get_customer_uid_usage(&self) -> &str {
        &self.customer_uid_usage
    }
    pub fn clear_customer_uid_usage(&mut self) {
        self.customer_uid_usage.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid_usage(&mut self, v: ::std::string::String) {
        self.customer_uid_usage = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_uid_usage(&mut self) -> &mut ::std::string::String {
        &mut self.customer_uid_usage
    }

    // Take field
    pub fn take_customer_uid_usage(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_uid_usage, ::std::string::String::new())
    }

    // bool escrow = 26;


    pub fn get_escrow(&self) -> bool {
        self.escrow
    }
    pub fn clear_escrow(&mut self) {
        self.escrow = false;
    }

    // Param is passed by value, moved
    pub fn set_escrow(&mut self, v: bool) {
        self.escrow = v;
    }

    // string fail_reason = 27;


    pub fn get_fail_reason(&self) -> &str {
        &self.fail_reason
    }
    pub fn clear_fail_reason(&mut self) {
        self.fail_reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_fail_reason(&mut self, v: ::std::string::String) {
        self.fail_reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fail_reason(&mut self) -> &mut ::std::string::String {
        &mut self.fail_reason
    }

    // Take field
    pub fn take_fail_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fail_reason, ::std::string::String::new())
    }

    // int32 failed_at = 28;


    pub fn get_failed_at(&self) -> i32 {
        self.failed_at
    }
    pub fn clear_failed_at(&mut self) {
        self.failed_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_failed_at(&mut self, v: i32) {
        self.failed_at = v;
    }

    // string imp_uid = 29;


    pub fn get_imp_uid(&self) -> &str {
        &self.imp_uid
    }
    pub fn clear_imp_uid(&mut self) {
        self.imp_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_imp_uid(&mut self, v: ::std::string::String) {
        self.imp_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_imp_uid(&mut self) -> &mut ::std::string::String {
        &mut self.imp_uid
    }

    // Take field
    pub fn take_imp_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.imp_uid, ::std::string::String::new())
    }

    // string merchant_uid = 30;


    pub fn get_merchant_uid(&self) -> &str {
        &self.merchant_uid
    }
    pub fn clear_merchant_uid(&mut self) {
        self.merchant_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_merchant_uid(&mut self, v: ::std::string::String) {
        self.merchant_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_merchant_uid(&mut self) -> &mut ::std::string::String {
        &mut self.merchant_uid
    }

    // Take field
    pub fn take_merchant_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.merchant_uid, ::std::string::String::new())
    }

    // string name = 31;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 paid_at = 32;


    pub fn get_paid_at(&self) -> i32 {
        self.paid_at
    }
    pub fn clear_paid_at(&mut self) {
        self.paid_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_paid_at(&mut self, v: i32) {
        self.paid_at = v;
    }

    // string pay_method = 33;


    pub fn get_pay_method(&self) -> &str {
        &self.pay_method
    }
    pub fn clear_pay_method(&mut self) {
        self.pay_method.clear();
    }

    // Param is passed by value, moved
    pub fn set_pay_method(&mut self, v: ::std::string::String) {
        self.pay_method = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pay_method(&mut self) -> &mut ::std::string::String {
        &mut self.pay_method
    }

    // Take field
    pub fn take_pay_method(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pay_method, ::std::string::String::new())
    }

    // string pg_id = 34;


    pub fn get_pg_id(&self) -> &str {
        &self.pg_id
    }
    pub fn clear_pg_id(&mut self) {
        self.pg_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_id(&mut self, v: ::std::string::String) {
        self.pg_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_id(&mut self) -> &mut ::std::string::String {
        &mut self.pg_id
    }

    // Take field
    pub fn take_pg_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_id, ::std::string::String::new())
    }

    // string pg_provider = 35;


    pub fn get_pg_provider(&self) -> &str {
        &self.pg_provider
    }
    pub fn clear_pg_provider(&mut self) {
        self.pg_provider.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_provider(&mut self, v: ::std::string::String) {
        self.pg_provider = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_provider(&mut self) -> &mut ::std::string::String {
        &mut self.pg_provider
    }

    // Take field
    pub fn take_pg_provider(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_provider, ::std::string::String::new())
    }

    // string pg_tid = 36;


    pub fn get_pg_tid(&self) -> &str {
        &self.pg_tid
    }
    pub fn clear_pg_tid(&mut self) {
        self.pg_tid.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_tid(&mut self, v: ::std::string::String) {
        self.pg_tid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_tid(&mut self) -> &mut ::std::string::String {
        &mut self.pg_tid
    }

    // Take field
    pub fn take_pg_tid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_tid, ::std::string::String::new())
    }

    // string receipt_url = 37;


    pub fn get_receipt_url(&self) -> &str {
        &self.receipt_url
    }
    pub fn clear_receipt_url(&mut self) {
        self.receipt_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_receipt_url(&mut self, v: ::std::string::String) {
        self.receipt_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receipt_url(&mut self) -> &mut ::std::string::String {
        &mut self.receipt_url
    }

    // Take field
    pub fn take_receipt_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receipt_url, ::std::string::String::new())
    }

    // int32 started_at = 38;


    pub fn get_started_at(&self) -> i32 {
        self.started_at
    }
    pub fn clear_started_at(&mut self) {
        self.started_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_started_at(&mut self, v: i32) {
        self.started_at = v;
    }

    // string status = 39;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    // string user_agent = 40;


    pub fn get_user_agent(&self) -> &str {
        &self.user_agent
    }
    pub fn clear_user_agent(&mut self) {
        self.user_agent.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_agent(&mut self, v: ::std::string::String) {
        self.user_agent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_agent(&mut self) -> &mut ::std::string::String {
        &mut self.user_agent
    }

    // Take field
    pub fn take_user_agent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.user_agent, ::std::string::String::new())
    }

    // string vbank_code = 41;


    pub fn get_vbank_code(&self) -> &str {
        &self.vbank_code
    }
    pub fn clear_vbank_code(&mut self) {
        self.vbank_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_vbank_code(&mut self, v: ::std::string::String) {
        self.vbank_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vbank_code(&mut self) -> &mut ::std::string::String {
        &mut self.vbank_code
    }

    // Take field
    pub fn take_vbank_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vbank_code, ::std::string::String::new())
    }

    // int32 vbank_date = 42;


    pub fn get_vbank_date(&self) -> i32 {
        self.vbank_date
    }
    pub fn clear_vbank_date(&mut self) {
        self.vbank_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_vbank_date(&mut self, v: i32) {
        self.vbank_date = v;
    }

    // string vbank_holder = 43;


    pub fn get_vbank_holder(&self) -> &str {
        &self.vbank_holder
    }
    pub fn clear_vbank_holder(&mut self) {
        self.vbank_holder.clear();
    }

    // Param is passed by value, moved
    pub fn set_vbank_holder(&mut self, v: ::std::string::String) {
        self.vbank_holder = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vbank_holder(&mut self) -> &mut ::std::string::String {
        &mut self.vbank_holder
    }

    // Take field
    pub fn take_vbank_holder(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vbank_holder, ::std::string::String::new())
    }

    // int32 vbank_issued_at = 44;


    pub fn get_vbank_issued_at(&self) -> i32 {
        self.vbank_issued_at
    }
    pub fn clear_vbank_issued_at(&mut self) {
        self.vbank_issued_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_vbank_issued_at(&mut self, v: i32) {
        self.vbank_issued_at = v;
    }

    // string vbank_name = 45;


    pub fn get_vbank_name(&self) -> &str {
        &self.vbank_name
    }
    pub fn clear_vbank_name(&mut self) {
        self.vbank_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_vbank_name(&mut self, v: ::std::string::String) {
        self.vbank_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vbank_name(&mut self) -> &mut ::std::string::String {
        &mut self.vbank_name
    }

    // Take field
    pub fn take_vbank_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vbank_name, ::std::string::String::new())
    }

    // string vbank_num = 46;


    pub fn get_vbank_num(&self) -> &str {
        &self.vbank_num
    }
    pub fn clear_vbank_num(&mut self) {
        self.vbank_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_vbank_num(&mut self, v: ::std::string::String) {
        self.vbank_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vbank_num(&mut self) -> &mut ::std::string::String {
        &mut self.vbank_num
    }

    // Take field
    pub fn take_vbank_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vbank_num, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Payment {
    fn is_initialized(&self) -> bool {
        for v in &self.cancel_history {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.amount = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.apply_num)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.bank_code = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bank_name)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer_addr)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer_email)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer_name)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer_postcode)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer_tel)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.cancel_amount = tmp;
                },
                11 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cancel_history)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cancel_reason)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.cancel_receipt_urls)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.cancelled_at = tmp;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_code)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_name)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_number)?;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.card_quota = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.card_type = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.cash_receipt_issued = tmp;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.channel)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom_data)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_uid)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_uid_usage)?;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.escrow = tmp;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fail_reason)?;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.failed_at = tmp;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.imp_uid)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.merchant_uid)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.paid_at = tmp;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pay_method)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_id)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_provider)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_tid)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receipt_url)?;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.started_at = tmp;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user_agent)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vbank_code)?;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.vbank_date = tmp;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vbank_holder)?;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.vbank_issued_at = tmp;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vbank_name)?;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vbank_num)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(1, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.apply_num.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.apply_num);
        }
        if self.bank_code != 0 {
            my_size += ::protobuf::rt::value_size(3, self.bank_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bank_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.bank_name);
        }
        if !self.buyer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.buyer_addr);
        }
        if !self.buyer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.buyer_email);
        }
        if !self.buyer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.buyer_name);
        }
        if !self.buyer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.buyer_postcode);
        }
        if !self.buyer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.buyer_tel);
        }
        if self.cancel_amount != 0 {
            my_size += ::protobuf::rt::value_size(10, self.cancel_amount, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cancel_history {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.cancel_reason.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.cancel_reason);
        }
        for value in &self.cancel_receipt_urls {
            my_size += ::protobuf::rt::string_size(13, &value);
        };
        if self.cancelled_at != 0 {
            my_size += ::protobuf::rt::value_size(14, self.cancelled_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.card_code.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.card_code);
        }
        if !self.card_name.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.card_name);
        }
        if !self.card_number.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.card_number);
        }
        if self.card_quota != 0 {
            my_size += ::protobuf::rt::value_size(18, self.card_quota, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.card_type != 0 {
            my_size += ::protobuf::rt::value_size(19, self.card_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cash_receipt_issued != false {
            my_size += 3;
        }
        if !self.channel.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.channel);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.currency);
        }
        if !self.custom_data.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.custom_data);
        }
        if !self.customer_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.customer_uid);
        }
        if !self.customer_uid_usage.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.customer_uid_usage);
        }
        if self.escrow != false {
            my_size += 3;
        }
        if !self.fail_reason.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.fail_reason);
        }
        if self.failed_at != 0 {
            my_size += ::protobuf::rt::value_size(28, self.failed_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.imp_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.imp_uid);
        }
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.merchant_uid);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.name);
        }
        if self.paid_at != 0 {
            my_size += ::protobuf::rt::value_size(32, self.paid_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.pay_method.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.pay_method);
        }
        if !self.pg_id.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.pg_id);
        }
        if !self.pg_provider.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.pg_provider);
        }
        if !self.pg_tid.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.pg_tid);
        }
        if !self.receipt_url.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.receipt_url);
        }
        if self.started_at != 0 {
            my_size += ::protobuf::rt::value_size(38, self.started_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.status);
        }
        if !self.user_agent.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.user_agent);
        }
        if !self.vbank_code.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.vbank_code);
        }
        if self.vbank_date != 0 {
            my_size += ::protobuf::rt::value_size(42, self.vbank_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.vbank_holder.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.vbank_holder);
        }
        if self.vbank_issued_at != 0 {
            my_size += ::protobuf::rt::value_size(44, self.vbank_issued_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.vbank_name.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.vbank_name);
        }
        if !self.vbank_num.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.vbank_num);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.amount != 0 {
            os.write_int32(1, self.amount)?;
        }
        if !self.apply_num.is_empty() {
            os.write_string(2, &self.apply_num)?;
        }
        if self.bank_code != 0 {
            os.write_int32(3, self.bank_code)?;
        }
        if !self.bank_name.is_empty() {
            os.write_string(4, &self.bank_name)?;
        }
        if !self.buyer_addr.is_empty() {
            os.write_string(5, &self.buyer_addr)?;
        }
        if !self.buyer_email.is_empty() {
            os.write_string(6, &self.buyer_email)?;
        }
        if !self.buyer_name.is_empty() {
            os.write_string(7, &self.buyer_name)?;
        }
        if !self.buyer_postcode.is_empty() {
            os.write_string(8, &self.buyer_postcode)?;
        }
        if !self.buyer_tel.is_empty() {
            os.write_string(9, &self.buyer_tel)?;
        }
        if self.cancel_amount != 0 {
            os.write_int32(10, self.cancel_amount)?;
        }
        for v in &self.cancel_history {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.cancel_reason.is_empty() {
            os.write_string(12, &self.cancel_reason)?;
        }
        for v in &self.cancel_receipt_urls {
            os.write_string(13, &v)?;
        };
        if self.cancelled_at != 0 {
            os.write_int32(14, self.cancelled_at)?;
        }
        if !self.card_code.is_empty() {
            os.write_string(15, &self.card_code)?;
        }
        if !self.card_name.is_empty() {
            os.write_string(16, &self.card_name)?;
        }
        if !self.card_number.is_empty() {
            os.write_string(17, &self.card_number)?;
        }
        if self.card_quota != 0 {
            os.write_int32(18, self.card_quota)?;
        }
        if self.card_type != 0 {
            os.write_int32(19, self.card_type)?;
        }
        if self.cash_receipt_issued != false {
            os.write_bool(20, self.cash_receipt_issued)?;
        }
        if !self.channel.is_empty() {
            os.write_string(21, &self.channel)?;
        }
        if !self.currency.is_empty() {
            os.write_string(22, &self.currency)?;
        }
        if !self.custom_data.is_empty() {
            os.write_string(23, &self.custom_data)?;
        }
        if !self.customer_uid.is_empty() {
            os.write_string(24, &self.customer_uid)?;
        }
        if !self.customer_uid_usage.is_empty() {
            os.write_string(25, &self.customer_uid_usage)?;
        }
        if self.escrow != false {
            os.write_bool(26, self.escrow)?;
        }
        if !self.fail_reason.is_empty() {
            os.write_string(27, &self.fail_reason)?;
        }
        if self.failed_at != 0 {
            os.write_int32(28, self.failed_at)?;
        }
        if !self.imp_uid.is_empty() {
            os.write_string(29, &self.imp_uid)?;
        }
        if !self.merchant_uid.is_empty() {
            os.write_string(30, &self.merchant_uid)?;
        }
        if !self.name.is_empty() {
            os.write_string(31, &self.name)?;
        }
        if self.paid_at != 0 {
            os.write_int32(32, self.paid_at)?;
        }
        if !self.pay_method.is_empty() {
            os.write_string(33, &self.pay_method)?;
        }
        if !self.pg_id.is_empty() {
            os.write_string(34, &self.pg_id)?;
        }
        if !self.pg_provider.is_empty() {
            os.write_string(35, &self.pg_provider)?;
        }
        if !self.pg_tid.is_empty() {
            os.write_string(36, &self.pg_tid)?;
        }
        if !self.receipt_url.is_empty() {
            os.write_string(37, &self.receipt_url)?;
        }
        if self.started_at != 0 {
            os.write_int32(38, self.started_at)?;
        }
        if !self.status.is_empty() {
            os.write_string(39, &self.status)?;
        }
        if !self.user_agent.is_empty() {
            os.write_string(40, &self.user_agent)?;
        }
        if !self.vbank_code.is_empty() {
            os.write_string(41, &self.vbank_code)?;
        }
        if self.vbank_date != 0 {
            os.write_int32(42, self.vbank_date)?;
        }
        if !self.vbank_holder.is_empty() {
            os.write_string(43, &self.vbank_holder)?;
        }
        if self.vbank_issued_at != 0 {
            os.write_int32(44, self.vbank_issued_at)?;
        }
        if !self.vbank_name.is_empty() {
            os.write_string(45, &self.vbank_name)?;
        }
        if !self.vbank_num.is_empty() {
            os.write_string(46, &self.vbank_num)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Payment {
        Payment::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "amount",
                |m: &Payment| { &m.amount },
                |m: &mut Payment| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "apply_num",
                |m: &Payment| { &m.apply_num },
                |m: &mut Payment| { &mut m.apply_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "bank_code",
                |m: &Payment| { &m.bank_code },
                |m: &mut Payment| { &mut m.bank_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bank_name",
                |m: &Payment| { &m.bank_name },
                |m: &mut Payment| { &mut m.bank_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer_addr",
                |m: &Payment| { &m.buyer_addr },
                |m: &mut Payment| { &mut m.buyer_addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer_email",
                |m: &Payment| { &m.buyer_email },
                |m: &mut Payment| { &mut m.buyer_email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer_name",
                |m: &Payment| { &m.buyer_name },
                |m: &mut Payment| { &mut m.buyer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer_postcode",
                |m: &Payment| { &m.buyer_postcode },
                |m: &mut Payment| { &mut m.buyer_postcode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer_tel",
                |m: &Payment| { &m.buyer_tel },
                |m: &mut Payment| { &mut m.buyer_tel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "cancel_amount",
                |m: &Payment| { &m.cancel_amount },
                |m: &mut Payment| { &mut m.cancel_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CancelHistory>>(
                "cancel_history",
                |m: &Payment| { &m.cancel_history },
                |m: &mut Payment| { &mut m.cancel_history },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cancel_reason",
                |m: &Payment| { &m.cancel_reason },
                |m: &mut Payment| { &mut m.cancel_reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cancel_receipt_urls",
                |m: &Payment| { &m.cancel_receipt_urls },
                |m: &mut Payment| { &mut m.cancel_receipt_urls },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "cancelled_at",
                |m: &Payment| { &m.cancelled_at },
                |m: &mut Payment| { &mut m.cancelled_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_code",
                |m: &Payment| { &m.card_code },
                |m: &mut Payment| { &mut m.card_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_name",
                |m: &Payment| { &m.card_name },
                |m: &mut Payment| { &mut m.card_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_number",
                |m: &Payment| { &m.card_number },
                |m: &mut Payment| { &mut m.card_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "card_quota",
                |m: &Payment| { &m.card_quota },
                |m: &mut Payment| { &mut m.card_quota },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "card_type",
                |m: &Payment| { &m.card_type },
                |m: &mut Payment| { &mut m.card_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "cash_receipt_issued",
                |m: &Payment| { &m.cash_receipt_issued },
                |m: &mut Payment| { &mut m.cash_receipt_issued },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "channel",
                |m: &Payment| { &m.channel },
                |m: &mut Payment| { &mut m.channel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &Payment| { &m.currency },
                |m: &mut Payment| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "custom_data",
                |m: &Payment| { &m.custom_data },
                |m: &mut Payment| { &mut m.custom_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid",
                |m: &Payment| { &m.customer_uid },
                |m: &mut Payment| { &mut m.customer_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid_usage",
                |m: &Payment| { &m.customer_uid_usage },
                |m: &mut Payment| { &mut m.customer_uid_usage },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "escrow",
                |m: &Payment| { &m.escrow },
                |m: &mut Payment| { &mut m.escrow },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fail_reason",
                |m: &Payment| { &m.fail_reason },
                |m: &mut Payment| { &mut m.fail_reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "failed_at",
                |m: &Payment| { &m.failed_at },
                |m: &mut Payment| { &mut m.failed_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "imp_uid",
                |m: &Payment| { &m.imp_uid },
                |m: &mut Payment| { &mut m.imp_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "merchant_uid",
                |m: &Payment| { &m.merchant_uid },
                |m: &mut Payment| { &mut m.merchant_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Payment| { &m.name },
                |m: &mut Payment| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "paid_at",
                |m: &Payment| { &m.paid_at },
                |m: &mut Payment| { &mut m.paid_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pay_method",
                |m: &Payment| { &m.pay_method },
                |m: &mut Payment| { &mut m.pay_method },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_id",
                |m: &Payment| { &m.pg_id },
                |m: &mut Payment| { &mut m.pg_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_provider",
                |m: &Payment| { &m.pg_provider },
                |m: &mut Payment| { &mut m.pg_provider },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_tid",
                |m: &Payment| { &m.pg_tid },
                |m: &mut Payment| { &mut m.pg_tid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "receipt_url",
                |m: &Payment| { &m.receipt_url },
                |m: &mut Payment| { &mut m.receipt_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "started_at",
                |m: &Payment| { &m.started_at },
                |m: &mut Payment| { &mut m.started_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status",
                |m: &Payment| { &m.status },
                |m: &mut Payment| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "user_agent",
                |m: &Payment| { &m.user_agent },
                |m: &mut Payment| { &mut m.user_agent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "vbank_code",
                |m: &Payment| { &m.vbank_code },
                |m: &mut Payment| { &mut m.vbank_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "vbank_date",
                |m: &Payment| { &m.vbank_date },
                |m: &mut Payment| { &mut m.vbank_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "vbank_holder",
                |m: &Payment| { &m.vbank_holder },
                |m: &mut Payment| { &mut m.vbank_holder },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "vbank_issued_at",
                |m: &Payment| { &m.vbank_issued_at },
                |m: &mut Payment| { &mut m.vbank_issued_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "vbank_name",
                |m: &Payment| { &m.vbank_name },
                |m: &mut Payment| { &mut m.vbank_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "vbank_num",
                |m: &Payment| { &m.vbank_num },
                |m: &mut Payment| { &mut m.vbank_num },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Payment>(
                "Payment",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Payment {
        static instance: ::protobuf::rt::LazyV2<Payment> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Payment::new)
    }
}

impl ::protobuf::Clear for Payment {
    fn clear(&mut self) {
        self.amount = 0;
        self.apply_num.clear();
        self.bank_code = 0;
        self.bank_name.clear();
        self.buyer_addr.clear();
        self.buyer_email.clear();
        self.buyer_name.clear();
        self.buyer_postcode.clear();
        self.buyer_tel.clear();
        self.cancel_amount = 0;
        self.cancel_history.clear();
        self.cancel_reason.clear();
        self.cancel_receipt_urls.clear();
        self.cancelled_at = 0;
        self.card_code.clear();
        self.card_name.clear();
        self.card_number.clear();
        self.card_quota = 0;
        self.card_type = 0;
        self.cash_receipt_issued = false;
        self.channel.clear();
        self.currency.clear();
        self.custom_data.clear();
        self.customer_uid.clear();
        self.customer_uid_usage.clear();
        self.escrow = false;
        self.fail_reason.clear();
        self.failed_at = 0;
        self.imp_uid.clear();
        self.merchant_uid.clear();
        self.name.clear();
        self.paid_at = 0;
        self.pay_method.clear();
        self.pg_id.clear();
        self.pg_provider.clear();
        self.pg_tid.clear();
        self.receipt_url.clear();
        self.started_at = 0;
        self.status.clear();
        self.user_agent.clear();
        self.vbank_code.clear();
        self.vbank_date = 0;
        self.vbank_holder.clear();
        self.vbank_issued_at = 0;
        self.vbank_name.clear();
        self.vbank_num.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Payment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Payment {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelHistory {
    // message fields
    pub pg_tid: ::std::string::String,
    pub amount: i32,
    pub cancelled_at: i32,
    pub reason: ::std::string::String,
    pub receipt_url: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelHistory {
    fn default() -> &'a CancelHistory {
        <CancelHistory as ::protobuf::Message>::default_instance()
    }
}

impl CancelHistory {
    pub fn new() -> CancelHistory {
        ::std::default::Default::default()
    }

    // string pg_tid = 1;


    pub fn get_pg_tid(&self) -> &str {
        &self.pg_tid
    }
    pub fn clear_pg_tid(&mut self) {
        self.pg_tid.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_tid(&mut self, v: ::std::string::String) {
        self.pg_tid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_tid(&mut self) -> &mut ::std::string::String {
        &mut self.pg_tid
    }

    // Take field
    pub fn take_pg_tid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_tid, ::std::string::String::new())
    }

    // int32 amount = 2;


    pub fn get_amount(&self) -> i32 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i32) {
        self.amount = v;
    }

    // int32 cancelled_at = 3;


    pub fn get_cancelled_at(&self) -> i32 {
        self.cancelled_at
    }
    pub fn clear_cancelled_at(&mut self) {
        self.cancelled_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_cancelled_at(&mut self, v: i32) {
        self.cancelled_at = v;
    }

    // string reason = 4;


    pub fn get_reason(&self) -> &str {
        &self.reason
    }
    pub fn clear_reason(&mut self) {
        self.reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        &mut self.reason
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reason, ::std::string::String::new())
    }

    // string receipt_url = 5;


    pub fn get_receipt_url(&self) -> &str {
        &self.receipt_url
    }
    pub fn clear_receipt_url(&mut self) {
        self.receipt_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_receipt_url(&mut self, v: ::std::string::String) {
        self.receipt_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receipt_url(&mut self) -> &mut ::std::string::String {
        &mut self.receipt_url
    }

    // Take field
    pub fn take_receipt_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receipt_url, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CancelHistory {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_tid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.cancelled_at = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reason)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receipt_url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pg_tid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pg_tid);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(2, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cancelled_at != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cancelled_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.reason.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.reason);
        }
        if !self.receipt_url.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.receipt_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pg_tid.is_empty() {
            os.write_string(1, &self.pg_tid)?;
        }
        if self.amount != 0 {
            os.write_int32(2, self.amount)?;
        }
        if self.cancelled_at != 0 {
            os.write_int32(3, self.cancelled_at)?;
        }
        if !self.reason.is_empty() {
            os.write_string(4, &self.reason)?;
        }
        if !self.receipt_url.is_empty() {
            os.write_string(5, &self.receipt_url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelHistory {
        CancelHistory::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_tid",
                |m: &CancelHistory| { &m.pg_tid },
                |m: &mut CancelHistory| { &mut m.pg_tid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "amount",
                |m: &CancelHistory| { &m.amount },
                |m: &mut CancelHistory| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "cancelled_at",
                |m: &CancelHistory| { &m.cancelled_at },
                |m: &mut CancelHistory| { &mut m.cancelled_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reason",
                |m: &CancelHistory| { &m.reason },
                |m: &mut CancelHistory| { &mut m.reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "receipt_url",
                |m: &CancelHistory| { &m.receipt_url },
                |m: &mut CancelHistory| { &mut m.receipt_url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CancelHistory>(
                "CancelHistory",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CancelHistory {
        static instance: ::protobuf::rt::LazyV2<CancelHistory> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CancelHistory::new)
    }
}

impl ::protobuf::Clear for CancelHistory {
    fn clear(&mut self) {
        self.pg_tid.clear();
        self.amount = 0;
        self.cancelled_at = 0;
        self.reason.clear();
        self.receipt_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelHistory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelHistory {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentPage {
    // message fields
    pub total: i32,
    pub previous: i32,
    pub next: i32,
    pub list: ::protobuf::RepeatedField<Payment>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentPage {
    fn default() -> &'a PaymentPage {
        <PaymentPage as ::protobuf::Message>::default_instance()
    }
}

impl PaymentPage {
    pub fn new() -> PaymentPage {
        ::std::default::Default::default()
    }

    // int32 total = 1;


    pub fn get_total(&self) -> i32 {
        self.total
    }
    pub fn clear_total(&mut self) {
        self.total = 0;
    }

    // Param is passed by value, moved
    pub fn set_total(&mut self, v: i32) {
        self.total = v;
    }

    // int32 previous = 2;


    pub fn get_previous(&self) -> i32 {
        self.previous
    }
    pub fn clear_previous(&mut self) {
        self.previous = 0;
    }

    // Param is passed by value, moved
    pub fn set_previous(&mut self, v: i32) {
        self.previous = v;
    }

    // int32 next = 3;


    pub fn get_next(&self) -> i32 {
        self.next
    }
    pub fn clear_next(&mut self) {
        self.next = 0;
    }

    // Param is passed by value, moved
    pub fn set_next(&mut self, v: i32) {
        self.next = v;
    }

    // repeated .payment.Payment list = 4;


    pub fn get_list(&self) -> &[Payment] {
        &self.list
    }
    pub fn clear_list(&mut self) {
        self.list.clear();
    }

    // Param is passed by value, moved
    pub fn set_list(&mut self, v: ::protobuf::RepeatedField<Payment>) {
        self.list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_list(&mut self) -> &mut ::protobuf::RepeatedField<Payment> {
        &mut self.list
    }

    // Take field
    pub fn take_list(&mut self) -> ::protobuf::RepeatedField<Payment> {
        ::std::mem::replace(&mut self.list, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PaymentPage {
    fn is_initialized(&self) -> bool {
        for v in &self.list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.total = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.previous = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.next = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.previous != 0 {
            my_size += ::protobuf::rt::value_size(2, self.previous, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next != 0 {
            my_size += ::protobuf::rt::value_size(3, self.next, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total != 0 {
            os.write_int32(1, self.total)?;
        }
        if self.previous != 0 {
            os.write_int32(2, self.previous)?;
        }
        if self.next != 0 {
            os.write_int32(3, self.next)?;
        }
        for v in &self.list {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentPage {
        PaymentPage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "total",
                |m: &PaymentPage| { &m.total },
                |m: &mut PaymentPage| { &mut m.total },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "previous",
                |m: &PaymentPage| { &m.previous },
                |m: &mut PaymentPage| { &mut m.previous },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "next",
                |m: &PaymentPage| { &m.next },
                |m: &mut PaymentPage| { &mut m.next },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Payment>>(
                "list",
                |m: &PaymentPage| { &m.list },
                |m: &mut PaymentPage| { &mut m.list },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentPage>(
                "PaymentPage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentPage {
        static instance: ::protobuf::rt::LazyV2<PaymentPage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentPage::new)
    }
}

impl ::protobuf::Clear for PaymentPage {
    fn clear(&mut self) {
        self.total = 0;
        self.previous = 0;
        self.next = 0;
        self.list.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentPage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentPage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentBalanceDetail {
    // message fields
    pub tax_free: i32,
    pub supply: i32,
    pub vat: i32,
    pub service: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentBalanceDetail {
    fn default() -> &'a PaymentBalanceDetail {
        <PaymentBalanceDetail as ::protobuf::Message>::default_instance()
    }
}

impl PaymentBalanceDetail {
    pub fn new() -> PaymentBalanceDetail {
        ::std::default::Default::default()
    }

    // int32 tax_free = 1;


    pub fn get_tax_free(&self) -> i32 {
        self.tax_free
    }
    pub fn clear_tax_free(&mut self) {
        self.tax_free = 0;
    }

    // Param is passed by value, moved
    pub fn set_tax_free(&mut self, v: i32) {
        self.tax_free = v;
    }

    // int32 supply = 2;


    pub fn get_supply(&self) -> i32 {
        self.supply
    }
    pub fn clear_supply(&mut self) {
        self.supply = 0;
    }

    // Param is passed by value, moved
    pub fn set_supply(&mut self, v: i32) {
        self.supply = v;
    }

    // int32 vat = 3;


    pub fn get_vat(&self) -> i32 {
        self.vat
    }
    pub fn clear_vat(&mut self) {
        self.vat = 0;
    }

    // Param is passed by value, moved
    pub fn set_vat(&mut self, v: i32) {
        self.vat = v;
    }

    // int32 service = 4;


    pub fn get_service(&self) -> i32 {
        self.service
    }
    pub fn clear_service(&mut self) {
        self.service = 0;
    }

    // Param is passed by value, moved
    pub fn set_service(&mut self, v: i32) {
        self.service = v;
    }
}

impl ::protobuf::Message for PaymentBalanceDetail {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.tax_free = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.supply = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.vat = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.service = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tax_free != 0 {
            my_size += ::protobuf::rt::value_size(1, self.tax_free, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.supply != 0 {
            my_size += ::protobuf::rt::value_size(2, self.supply, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.vat != 0 {
            my_size += ::protobuf::rt::value_size(3, self.vat, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.service != 0 {
            my_size += ::protobuf::rt::value_size(4, self.service, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.tax_free != 0 {
            os.write_int32(1, self.tax_free)?;
        }
        if self.supply != 0 {
            os.write_int32(2, self.supply)?;
        }
        if self.vat != 0 {
            os.write_int32(3, self.vat)?;
        }
        if self.service != 0 {
            os.write_int32(4, self.service)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentBalanceDetail {
        PaymentBalanceDetail::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "tax_free",
                |m: &PaymentBalanceDetail| { &m.tax_free },
                |m: &mut PaymentBalanceDetail| { &mut m.tax_free },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "supply",
                |m: &PaymentBalanceDetail| { &m.supply },
                |m: &mut PaymentBalanceDetail| { &mut m.supply },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "vat",
                |m: &PaymentBalanceDetail| { &m.vat },
                |m: &mut PaymentBalanceDetail| { &mut m.vat },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "service",
                |m: &PaymentBalanceDetail| { &m.service },
                |m: &mut PaymentBalanceDetail| { &mut m.service },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentBalanceDetail>(
                "PaymentBalanceDetail",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentBalanceDetail {
        static instance: ::protobuf::rt::LazyV2<PaymentBalanceDetail> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentBalanceDetail::new)
    }
}

impl ::protobuf::Clear for PaymentBalanceDetail {
    fn clear(&mut self) {
        self.tax_free = 0;
        self.supply = 0;
        self.vat = 0;
        self.service = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentBalanceDetail {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentBalanceDetail {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentBalance {
    // message fields
    pub amount: i32,
    pub cash_receipt: ::protobuf::SingularPtrField<PaymentBalanceDetail>,
    pub primary: ::protobuf::SingularPtrField<PaymentBalanceDetail>,
    pub secondary: ::protobuf::SingularPtrField<PaymentBalanceDetail>,
    pub discount: ::protobuf::SingularPtrField<PaymentBalanceDetail>,
    pub histories: ::protobuf::RepeatedField<PaymentBalanceHistory>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentBalance {
    fn default() -> &'a PaymentBalance {
        <PaymentBalance as ::protobuf::Message>::default_instance()
    }
}

impl PaymentBalance {
    pub fn new() -> PaymentBalance {
        ::std::default::Default::default()
    }

    // int32 amount = 1;


    pub fn get_amount(&self) -> i32 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i32) {
        self.amount = v;
    }

    // .payment.PaymentBalanceDetail cash_receipt = 2;


    pub fn get_cash_receipt(&self) -> &PaymentBalanceDetail {
        self.cash_receipt.as_ref().unwrap_or_else(|| <PaymentBalanceDetail as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cash_receipt(&mut self) {
        self.cash_receipt.clear();
    }

    pub fn has_cash_receipt(&self) -> bool {
        self.cash_receipt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cash_receipt(&mut self, v: PaymentBalanceDetail) {
        self.cash_receipt = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cash_receipt(&mut self) -> &mut PaymentBalanceDetail {
        if self.cash_receipt.is_none() {
            self.cash_receipt.set_default();
        }
        self.cash_receipt.as_mut().unwrap()
    }

    // Take field
    pub fn take_cash_receipt(&mut self) -> PaymentBalanceDetail {
        self.cash_receipt.take().unwrap_or_else(|| PaymentBalanceDetail::new())
    }

    // .payment.PaymentBalanceDetail primary = 3;


    pub fn get_primary(&self) -> &PaymentBalanceDetail {
        self.primary.as_ref().unwrap_or_else(|| <PaymentBalanceDetail as ::protobuf::Message>::default_instance())
    }
    pub fn clear_primary(&mut self) {
        self.primary.clear();
    }

    pub fn has_primary(&self) -> bool {
        self.primary.is_some()
    }

    // Param is passed by value, moved
    pub fn set_primary(&mut self, v: PaymentBalanceDetail) {
        self.primary = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_primary(&mut self) -> &mut PaymentBalanceDetail {
        if self.primary.is_none() {
            self.primary.set_default();
        }
        self.primary.as_mut().unwrap()
    }

    // Take field
    pub fn take_primary(&mut self) -> PaymentBalanceDetail {
        self.primary.take().unwrap_or_else(|| PaymentBalanceDetail::new())
    }

    // .payment.PaymentBalanceDetail secondary = 4;


    pub fn get_secondary(&self) -> &PaymentBalanceDetail {
        self.secondary.as_ref().unwrap_or_else(|| <PaymentBalanceDetail as ::protobuf::Message>::default_instance())
    }
    pub fn clear_secondary(&mut self) {
        self.secondary.clear();
    }

    pub fn has_secondary(&self) -> bool {
        self.secondary.is_some()
    }

    // Param is passed by value, moved
    pub fn set_secondary(&mut self, v: PaymentBalanceDetail) {
        self.secondary = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secondary(&mut self) -> &mut PaymentBalanceDetail {
        if self.secondary.is_none() {
            self.secondary.set_default();
        }
        self.secondary.as_mut().unwrap()
    }

    // Take field
    pub fn take_secondary(&mut self) -> PaymentBalanceDetail {
        self.secondary.take().unwrap_or_else(|| PaymentBalanceDetail::new())
    }

    // .payment.PaymentBalanceDetail discount = 5;


    pub fn get_discount(&self) -> &PaymentBalanceDetail {
        self.discount.as_ref().unwrap_or_else(|| <PaymentBalanceDetail as ::protobuf::Message>::default_instance())
    }
    pub fn clear_discount(&mut self) {
        self.discount.clear();
    }

    pub fn has_discount(&self) -> bool {
        self.discount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_discount(&mut self, v: PaymentBalanceDetail) {
        self.discount = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_discount(&mut self) -> &mut PaymentBalanceDetail {
        if self.discount.is_none() {
            self.discount.set_default();
        }
        self.discount.as_mut().unwrap()
    }

    // Take field
    pub fn take_discount(&mut self) -> PaymentBalanceDetail {
        self.discount.take().unwrap_or_else(|| PaymentBalanceDetail::new())
    }

    // repeated .payment.PaymentBalanceHistory histories = 6;


    pub fn get_histories(&self) -> &[PaymentBalanceHistory] {
        &self.histories
    }
    pub fn clear_histories(&mut self) {
        self.histories.clear();
    }

    // Param is passed by value, moved
    pub fn set_histories(&mut self, v: ::protobuf::RepeatedField<PaymentBalanceHistory>) {
        self.histories = v;
    }

    // Mutable pointer to the field.
    pub fn mut_histories(&mut self) -> &mut ::protobuf::RepeatedField<PaymentBalanceHistory> {
        &mut self.histories
    }

    // Take field
    pub fn take_histories(&mut self) -> ::protobuf::RepeatedField<PaymentBalanceHistory> {
        ::std::mem::replace(&mut self.histories, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PaymentBalance {
    fn is_initialized(&self) -> bool {
        for v in &self.cash_receipt {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.primary {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.secondary {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.discount {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.histories {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.amount = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cash_receipt)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.primary)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.secondary)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.discount)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.histories)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(1, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.cash_receipt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.primary.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.secondary.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.discount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.histories {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.amount != 0 {
            os.write_int32(1, self.amount)?;
        }
        if let Some(ref v) = self.cash_receipt.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.primary.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.secondary.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.discount.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.histories {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentBalance {
        PaymentBalance::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "amount",
                |m: &PaymentBalance| { &m.amount },
                |m: &mut PaymentBalance| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PaymentBalanceDetail>>(
                "cash_receipt",
                |m: &PaymentBalance| { &m.cash_receipt },
                |m: &mut PaymentBalance| { &mut m.cash_receipt },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PaymentBalanceDetail>>(
                "primary",
                |m: &PaymentBalance| { &m.primary },
                |m: &mut PaymentBalance| { &mut m.primary },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PaymentBalanceDetail>>(
                "secondary",
                |m: &PaymentBalance| { &m.secondary },
                |m: &mut PaymentBalance| { &mut m.secondary },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PaymentBalanceDetail>>(
                "discount",
                |m: &PaymentBalance| { &m.discount },
                |m: &mut PaymentBalance| { &mut m.discount },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PaymentBalanceHistory>>(
                "histories",
                |m: &PaymentBalance| { &m.histories },
                |m: &mut PaymentBalance| { &mut m.histories },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentBalance>(
                "PaymentBalance",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentBalance {
        static instance: ::protobuf::rt::LazyV2<PaymentBalance> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentBalance::new)
    }
}

impl ::protobuf::Clear for PaymentBalance {
    fn clear(&mut self) {
        self.amount = 0;
        self.cash_receipt.clear();
        self.primary.clear();
        self.secondary.clear();
        self.discount.clear();
        self.histories.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentBalance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentBalance {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentBalanceHistory {
    // message fields
    pub cash_receipt: ::protobuf::SingularPtrField<PaymentBalanceDetail>,
    pub primary: ::protobuf::SingularPtrField<PaymentBalanceDetail>,
    pub secondary: ::protobuf::SingularPtrField<PaymentBalanceDetail>,
    pub discount: ::protobuf::SingularPtrField<PaymentBalanceDetail>,
    pub created: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentBalanceHistory {
    fn default() -> &'a PaymentBalanceHistory {
        <PaymentBalanceHistory as ::protobuf::Message>::default_instance()
    }
}

impl PaymentBalanceHistory {
    pub fn new() -> PaymentBalanceHistory {
        ::std::default::Default::default()
    }

    // .payment.PaymentBalanceDetail cash_receipt = 1;


    pub fn get_cash_receipt(&self) -> &PaymentBalanceDetail {
        self.cash_receipt.as_ref().unwrap_or_else(|| <PaymentBalanceDetail as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cash_receipt(&mut self) {
        self.cash_receipt.clear();
    }

    pub fn has_cash_receipt(&self) -> bool {
        self.cash_receipt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cash_receipt(&mut self, v: PaymentBalanceDetail) {
        self.cash_receipt = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cash_receipt(&mut self) -> &mut PaymentBalanceDetail {
        if self.cash_receipt.is_none() {
            self.cash_receipt.set_default();
        }
        self.cash_receipt.as_mut().unwrap()
    }

    // Take field
    pub fn take_cash_receipt(&mut self) -> PaymentBalanceDetail {
        self.cash_receipt.take().unwrap_or_else(|| PaymentBalanceDetail::new())
    }

    // .payment.PaymentBalanceDetail primary = 2;


    pub fn get_primary(&self) -> &PaymentBalanceDetail {
        self.primary.as_ref().unwrap_or_else(|| <PaymentBalanceDetail as ::protobuf::Message>::default_instance())
    }
    pub fn clear_primary(&mut self) {
        self.primary.clear();
    }

    pub fn has_primary(&self) -> bool {
        self.primary.is_some()
    }

    // Param is passed by value, moved
    pub fn set_primary(&mut self, v: PaymentBalanceDetail) {
        self.primary = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_primary(&mut self) -> &mut PaymentBalanceDetail {
        if self.primary.is_none() {
            self.primary.set_default();
        }
        self.primary.as_mut().unwrap()
    }

    // Take field
    pub fn take_primary(&mut self) -> PaymentBalanceDetail {
        self.primary.take().unwrap_or_else(|| PaymentBalanceDetail::new())
    }

    // .payment.PaymentBalanceDetail secondary = 3;


    pub fn get_secondary(&self) -> &PaymentBalanceDetail {
        self.secondary.as_ref().unwrap_or_else(|| <PaymentBalanceDetail as ::protobuf::Message>::default_instance())
    }
    pub fn clear_secondary(&mut self) {
        self.secondary.clear();
    }

    pub fn has_secondary(&self) -> bool {
        self.secondary.is_some()
    }

    // Param is passed by value, moved
    pub fn set_secondary(&mut self, v: PaymentBalanceDetail) {
        self.secondary = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secondary(&mut self) -> &mut PaymentBalanceDetail {
        if self.secondary.is_none() {
            self.secondary.set_default();
        }
        self.secondary.as_mut().unwrap()
    }

    // Take field
    pub fn take_secondary(&mut self) -> PaymentBalanceDetail {
        self.secondary.take().unwrap_or_else(|| PaymentBalanceDetail::new())
    }

    // .payment.PaymentBalanceDetail discount = 4;


    pub fn get_discount(&self) -> &PaymentBalanceDetail {
        self.discount.as_ref().unwrap_or_else(|| <PaymentBalanceDetail as ::protobuf::Message>::default_instance())
    }
    pub fn clear_discount(&mut self) {
        self.discount.clear();
    }

    pub fn has_discount(&self) -> bool {
        self.discount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_discount(&mut self, v: PaymentBalanceDetail) {
        self.discount = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_discount(&mut self) -> &mut PaymentBalanceDetail {
        if self.discount.is_none() {
            self.discount.set_default();
        }
        self.discount.as_mut().unwrap()
    }

    // Take field
    pub fn take_discount(&mut self) -> PaymentBalanceDetail {
        self.discount.take().unwrap_or_else(|| PaymentBalanceDetail::new())
    }

    // int32 created = 5;


    pub fn get_created(&self) -> i32 {
        self.created
    }
    pub fn clear_created(&mut self) {
        self.created = 0;
    }

    // Param is passed by value, moved
    pub fn set_created(&mut self, v: i32) {
        self.created = v;
    }
}

impl ::protobuf::Message for PaymentBalanceHistory {
    fn is_initialized(&self) -> bool {
        for v in &self.cash_receipt {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.primary {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.secondary {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.discount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cash_receipt)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.primary)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.secondary)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.discount)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.created = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.cash_receipt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.primary.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.secondary.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.discount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.created != 0 {
            my_size += ::protobuf::rt::value_size(5, self.created, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.cash_receipt.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.primary.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.secondary.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.discount.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.created != 0 {
            os.write_int32(5, self.created)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentBalanceHistory {
        PaymentBalanceHistory::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PaymentBalanceDetail>>(
                "cash_receipt",
                |m: &PaymentBalanceHistory| { &m.cash_receipt },
                |m: &mut PaymentBalanceHistory| { &mut m.cash_receipt },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PaymentBalanceDetail>>(
                "primary",
                |m: &PaymentBalanceHistory| { &m.primary },
                |m: &mut PaymentBalanceHistory| { &mut m.primary },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PaymentBalanceDetail>>(
                "secondary",
                |m: &PaymentBalanceHistory| { &m.secondary },
                |m: &mut PaymentBalanceHistory| { &mut m.secondary },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PaymentBalanceDetail>>(
                "discount",
                |m: &PaymentBalanceHistory| { &m.discount },
                |m: &mut PaymentBalanceHistory| { &mut m.discount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "created",
                |m: &PaymentBalanceHistory| { &m.created },
                |m: &mut PaymentBalanceHistory| { &mut m.created },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentBalanceHistory>(
                "PaymentBalanceHistory",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentBalanceHistory {
        static instance: ::protobuf::rt::LazyV2<PaymentBalanceHistory> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentBalanceHistory::new)
    }
}

impl ::protobuf::Clear for PaymentBalanceHistory {
    fn clear(&mut self) {
        self.cash_receipt.clear();
        self.primary.clear();
        self.secondary.clear();
        self.discount.clear();
        self.created = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentBalanceHistory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentBalanceHistory {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentRequest {
    // message fields
    pub imp_uid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentRequest {
    fn default() -> &'a PaymentRequest {
        <PaymentRequest as ::protobuf::Message>::default_instance()
    }
}

impl PaymentRequest {
    pub fn new() -> PaymentRequest {
        ::std::default::Default::default()
    }

    // string imp_uid = 1;


    pub fn get_imp_uid(&self) -> &str {
        &self.imp_uid
    }
    pub fn clear_imp_uid(&mut self) {
        self.imp_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_imp_uid(&mut self, v: ::std::string::String) {
        self.imp_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_imp_uid(&mut self) -> &mut ::std::string::String {
        &mut self.imp_uid
    }

    // Take field
    pub fn take_imp_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.imp_uid, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PaymentRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.imp_uid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.imp_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.imp_uid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.imp_uid.is_empty() {
            os.write_string(1, &self.imp_uid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentRequest {
        PaymentRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "imp_uid",
                |m: &PaymentRequest| { &m.imp_uid },
                |m: &mut PaymentRequest| { &mut m.imp_uid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentRequest>(
                "PaymentRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentRequest {
        static instance: ::protobuf::rt::LazyV2<PaymentRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentRequest::new)
    }
}

impl ::protobuf::Clear for PaymentRequest {
    fn clear(&mut self) {
        self.imp_uid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<Payment>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentResponse {
    fn default() -> &'a PaymentResponse {
        <PaymentResponse as ::protobuf::Message>::default_instance()
    }
}

impl PaymentResponse {
    pub fn new() -> PaymentResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .payment.Payment response = 3;


    pub fn get_response(&self) -> &Payment {
        self.response.as_ref().unwrap_or_else(|| <Payment as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: Payment) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut Payment {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> Payment {
        self.response.take().unwrap_or_else(|| Payment::new())
    }
}

impl ::protobuf::Message for PaymentResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentResponse {
        PaymentResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &PaymentResponse| { &m.code },
                |m: &mut PaymentResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &PaymentResponse| { &m.message },
                |m: &mut PaymentResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Payment>>(
                "response",
                |m: &PaymentResponse| { &m.response },
                |m: &mut PaymentResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentResponse>(
                "PaymentResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentResponse {
        static instance: ::protobuf::rt::LazyV2<PaymentResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentResponse::new)
    }
}

impl ::protobuf::Clear for PaymentResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentsRequest {
    // message fields
    pub imp_uid: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentsRequest {
    fn default() -> &'a PaymentsRequest {
        <PaymentsRequest as ::protobuf::Message>::default_instance()
    }
}

impl PaymentsRequest {
    pub fn new() -> PaymentsRequest {
        ::std::default::Default::default()
    }

    // repeated string imp_uid = 1;


    pub fn get_imp_uid(&self) -> &[::std::string::String] {
        &self.imp_uid
    }
    pub fn clear_imp_uid(&mut self) {
        self.imp_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_imp_uid(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.imp_uid = v;
    }

    // Mutable pointer to the field.
    pub fn mut_imp_uid(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.imp_uid
    }

    // Take field
    pub fn take_imp_uid(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.imp_uid, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PaymentsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.imp_uid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.imp_uid {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.imp_uid {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentsRequest {
        PaymentsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "imp_uid",
                |m: &PaymentsRequest| { &m.imp_uid },
                |m: &mut PaymentsRequest| { &mut m.imp_uid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentsRequest>(
                "PaymentsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentsRequest {
        static instance: ::protobuf::rt::LazyV2<PaymentsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentsRequest::new)
    }
}

impl ::protobuf::Clear for PaymentsRequest {
    fn clear(&mut self) {
        self.imp_uid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentsResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::RepeatedField<Payment>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentsResponse {
    fn default() -> &'a PaymentsResponse {
        <PaymentsResponse as ::protobuf::Message>::default_instance()
    }
}

impl PaymentsResponse {
    pub fn new() -> PaymentsResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // repeated .payment.Payment response = 3;


    pub fn get_response(&self) -> &[Payment] {
        &self.response
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: ::protobuf::RepeatedField<Payment>) {
        self.response = v;
    }

    // Mutable pointer to the field.
    pub fn mut_response(&mut self) -> &mut ::protobuf::RepeatedField<Payment> {
        &mut self.response
    }

    // Take field
    pub fn take_response(&mut self) -> ::protobuf::RepeatedField<Payment> {
        ::std::mem::replace(&mut self.response, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PaymentsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        for value in &self.response {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        for v in &self.response {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentsResponse {
        PaymentsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &PaymentsResponse| { &m.code },
                |m: &mut PaymentsResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &PaymentsResponse| { &m.message },
                |m: &mut PaymentsResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Payment>>(
                "response",
                |m: &PaymentsResponse| { &m.response },
                |m: &mut PaymentsResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentsResponse>(
                "PaymentsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentsResponse {
        static instance: ::protobuf::rt::LazyV2<PaymentsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentsResponse::new)
    }
}

impl ::protobuf::Clear for PaymentsResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentsMerchantUidRequest {
    // message fields
    pub merchant_uid: ::std::string::String,
    pub status: ::std::string::String,
    pub page: i32,
    pub sorting: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentsMerchantUidRequest {
    fn default() -> &'a PaymentsMerchantUidRequest {
        <PaymentsMerchantUidRequest as ::protobuf::Message>::default_instance()
    }
}

impl PaymentsMerchantUidRequest {
    pub fn new() -> PaymentsMerchantUidRequest {
        ::std::default::Default::default()
    }

    // string merchant_uid = 1;


    pub fn get_merchant_uid(&self) -> &str {
        &self.merchant_uid
    }
    pub fn clear_merchant_uid(&mut self) {
        self.merchant_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_merchant_uid(&mut self, v: ::std::string::String) {
        self.merchant_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_merchant_uid(&mut self) -> &mut ::std::string::String {
        &mut self.merchant_uid
    }

    // Take field
    pub fn take_merchant_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.merchant_uid, ::std::string::String::new())
    }

    // string status = 2;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    // int32 page = 3;


    pub fn get_page(&self) -> i32 {
        self.page
    }
    pub fn clear_page(&mut self) {
        self.page = 0;
    }

    // Param is passed by value, moved
    pub fn set_page(&mut self, v: i32) {
        self.page = v;
    }

    // string sorting = 4;


    pub fn get_sorting(&self) -> &str {
        &self.sorting
    }
    pub fn clear_sorting(&mut self) {
        self.sorting.clear();
    }

    // Param is passed by value, moved
    pub fn set_sorting(&mut self, v: ::std::string::String) {
        self.sorting = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sorting(&mut self) -> &mut ::std::string::String {
        &mut self.sorting
    }

    // Take field
    pub fn take_sorting(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sorting, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PaymentsMerchantUidRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.merchant_uid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sorting)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.merchant_uid);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.status);
        }
        if self.page != 0 {
            my_size += ::protobuf::rt::value_size(3, self.page, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.sorting.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.sorting);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.merchant_uid.is_empty() {
            os.write_string(1, &self.merchant_uid)?;
        }
        if !self.status.is_empty() {
            os.write_string(2, &self.status)?;
        }
        if self.page != 0 {
            os.write_int32(3, self.page)?;
        }
        if !self.sorting.is_empty() {
            os.write_string(4, &self.sorting)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentsMerchantUidRequest {
        PaymentsMerchantUidRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "merchant_uid",
                |m: &PaymentsMerchantUidRequest| { &m.merchant_uid },
                |m: &mut PaymentsMerchantUidRequest| { &mut m.merchant_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status",
                |m: &PaymentsMerchantUidRequest| { &m.status },
                |m: &mut PaymentsMerchantUidRequest| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page",
                |m: &PaymentsMerchantUidRequest| { &m.page },
                |m: &mut PaymentsMerchantUidRequest| { &mut m.page },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sorting",
                |m: &PaymentsMerchantUidRequest| { &m.sorting },
                |m: &mut PaymentsMerchantUidRequest| { &mut m.sorting },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentsMerchantUidRequest>(
                "PaymentsMerchantUidRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentsMerchantUidRequest {
        static instance: ::protobuf::rt::LazyV2<PaymentsMerchantUidRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentsMerchantUidRequest::new)
    }
}

impl ::protobuf::Clear for PaymentsMerchantUidRequest {
    fn clear(&mut self) {
        self.merchant_uid.clear();
        self.status.clear();
        self.page = 0;
        self.sorting.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentsMerchantUidRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentsMerchantUidRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentsMerchantUidResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<PaymentPage>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentsMerchantUidResponse {
    fn default() -> &'a PaymentsMerchantUidResponse {
        <PaymentsMerchantUidResponse as ::protobuf::Message>::default_instance()
    }
}

impl PaymentsMerchantUidResponse {
    pub fn new() -> PaymentsMerchantUidResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .payment.PaymentPage response = 3;


    pub fn get_response(&self) -> &PaymentPage {
        self.response.as_ref().unwrap_or_else(|| <PaymentPage as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: PaymentPage) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut PaymentPage {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> PaymentPage {
        self.response.take().unwrap_or_else(|| PaymentPage::new())
    }
}

impl ::protobuf::Message for PaymentsMerchantUidResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentsMerchantUidResponse {
        PaymentsMerchantUidResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &PaymentsMerchantUidResponse| { &m.code },
                |m: &mut PaymentsMerchantUidResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &PaymentsMerchantUidResponse| { &m.message },
                |m: &mut PaymentsMerchantUidResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PaymentPage>>(
                "response",
                |m: &PaymentsMerchantUidResponse| { &m.response },
                |m: &mut PaymentsMerchantUidResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentsMerchantUidResponse>(
                "PaymentsMerchantUidResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentsMerchantUidResponse {
        static instance: ::protobuf::rt::LazyV2<PaymentsMerchantUidResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentsMerchantUidResponse::new)
    }
}

impl ::protobuf::Clear for PaymentsMerchantUidResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentsMerchantUidResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentsMerchantUidResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentStatusRequest {
    // message fields
    pub status: ::std::string::String,
    pub page: i32,
    pub limit: i32,
    pub from: i32,
    pub to: i32,
    pub sorting: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentStatusRequest {
    fn default() -> &'a PaymentStatusRequest {
        <PaymentStatusRequest as ::protobuf::Message>::default_instance()
    }
}

impl PaymentStatusRequest {
    pub fn new() -> PaymentStatusRequest {
        ::std::default::Default::default()
    }

    // string status = 1;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    // int32 page = 2;


    pub fn get_page(&self) -> i32 {
        self.page
    }
    pub fn clear_page(&mut self) {
        self.page = 0;
    }

    // Param is passed by value, moved
    pub fn set_page(&mut self, v: i32) {
        self.page = v;
    }

    // int32 limit = 3;


    pub fn get_limit(&self) -> i32 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: i32) {
        self.limit = v;
    }

    // int32 from = 4;


    pub fn get_from(&self) -> i32 {
        self.from
    }
    pub fn clear_from(&mut self) {
        self.from = 0;
    }

    // Param is passed by value, moved
    pub fn set_from(&mut self, v: i32) {
        self.from = v;
    }

    // int32 to = 5;


    pub fn get_to(&self) -> i32 {
        self.to
    }
    pub fn clear_to(&mut self) {
        self.to = 0;
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: i32) {
        self.to = v;
    }

    // string sorting = 6;


    pub fn get_sorting(&self) -> &str {
        &self.sorting
    }
    pub fn clear_sorting(&mut self) {
        self.sorting.clear();
    }

    // Param is passed by value, moved
    pub fn set_sorting(&mut self, v: ::std::string::String) {
        self.sorting = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sorting(&mut self) -> &mut ::std::string::String {
        &mut self.sorting
    }

    // Take field
    pub fn take_sorting(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sorting, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PaymentStatusRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.limit = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.from = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.to = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sorting)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.status);
        }
        if self.page != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(3, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.from != 0 {
            my_size += ::protobuf::rt::value_size(4, self.from, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.to != 0 {
            my_size += ::protobuf::rt::value_size(5, self.to, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.sorting.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.sorting);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.status.is_empty() {
            os.write_string(1, &self.status)?;
        }
        if self.page != 0 {
            os.write_int32(2, self.page)?;
        }
        if self.limit != 0 {
            os.write_int32(3, self.limit)?;
        }
        if self.from != 0 {
            os.write_int32(4, self.from)?;
        }
        if self.to != 0 {
            os.write_int32(5, self.to)?;
        }
        if !self.sorting.is_empty() {
            os.write_string(6, &self.sorting)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentStatusRequest {
        PaymentStatusRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status",
                |m: &PaymentStatusRequest| { &m.status },
                |m: &mut PaymentStatusRequest| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page",
                |m: &PaymentStatusRequest| { &m.page },
                |m: &mut PaymentStatusRequest| { &mut m.page },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "limit",
                |m: &PaymentStatusRequest| { &m.limit },
                |m: &mut PaymentStatusRequest| { &mut m.limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "from",
                |m: &PaymentStatusRequest| { &m.from },
                |m: &mut PaymentStatusRequest| { &mut m.from },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "to",
                |m: &PaymentStatusRequest| { &m.to },
                |m: &mut PaymentStatusRequest| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sorting",
                |m: &PaymentStatusRequest| { &m.sorting },
                |m: &mut PaymentStatusRequest| { &mut m.sorting },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentStatusRequest>(
                "PaymentStatusRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentStatusRequest {
        static instance: ::protobuf::rt::LazyV2<PaymentStatusRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentStatusRequest::new)
    }
}

impl ::protobuf::Clear for PaymentStatusRequest {
    fn clear(&mut self) {
        self.status.clear();
        self.page = 0;
        self.limit = 0;
        self.from = 0;
        self.to = 0;
        self.sorting.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentStatusRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentStatusRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentStatusResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<PaymentPage>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentStatusResponse {
    fn default() -> &'a PaymentStatusResponse {
        <PaymentStatusResponse as ::protobuf::Message>::default_instance()
    }
}

impl PaymentStatusResponse {
    pub fn new() -> PaymentStatusResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .payment.PaymentPage response = 3;


    pub fn get_response(&self) -> &PaymentPage {
        self.response.as_ref().unwrap_or_else(|| <PaymentPage as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: PaymentPage) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut PaymentPage {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> PaymentPage {
        self.response.take().unwrap_or_else(|| PaymentPage::new())
    }
}

impl ::protobuf::Message for PaymentStatusResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentStatusResponse {
        PaymentStatusResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &PaymentStatusResponse| { &m.code },
                |m: &mut PaymentStatusResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &PaymentStatusResponse| { &m.message },
                |m: &mut PaymentStatusResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PaymentPage>>(
                "response",
                |m: &PaymentStatusResponse| { &m.response },
                |m: &mut PaymentStatusResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentStatusResponse>(
                "PaymentStatusResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentStatusResponse {
        static instance: ::protobuf::rt::LazyV2<PaymentStatusResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentStatusResponse::new)
    }
}

impl ::protobuf::Clear for PaymentStatusResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentStatusResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentStatusResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentMerchantUidRequest {
    // message fields
    pub merchant_uid: ::std::string::String,
    pub status: ::std::string::String,
    pub sorting: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentMerchantUidRequest {
    fn default() -> &'a PaymentMerchantUidRequest {
        <PaymentMerchantUidRequest as ::protobuf::Message>::default_instance()
    }
}

impl PaymentMerchantUidRequest {
    pub fn new() -> PaymentMerchantUidRequest {
        ::std::default::Default::default()
    }

    // string merchant_uid = 1;


    pub fn get_merchant_uid(&self) -> &str {
        &self.merchant_uid
    }
    pub fn clear_merchant_uid(&mut self) {
        self.merchant_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_merchant_uid(&mut self, v: ::std::string::String) {
        self.merchant_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_merchant_uid(&mut self) -> &mut ::std::string::String {
        &mut self.merchant_uid
    }

    // Take field
    pub fn take_merchant_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.merchant_uid, ::std::string::String::new())
    }

    // string status = 2;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    // string sorting = 3;


    pub fn get_sorting(&self) -> &str {
        &self.sorting
    }
    pub fn clear_sorting(&mut self) {
        self.sorting.clear();
    }

    // Param is passed by value, moved
    pub fn set_sorting(&mut self, v: ::std::string::String) {
        self.sorting = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sorting(&mut self) -> &mut ::std::string::String {
        &mut self.sorting
    }

    // Take field
    pub fn take_sorting(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sorting, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PaymentMerchantUidRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.merchant_uid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sorting)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.merchant_uid);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.status);
        }
        if !self.sorting.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sorting);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.merchant_uid.is_empty() {
            os.write_string(1, &self.merchant_uid)?;
        }
        if !self.status.is_empty() {
            os.write_string(2, &self.status)?;
        }
        if !self.sorting.is_empty() {
            os.write_string(3, &self.sorting)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentMerchantUidRequest {
        PaymentMerchantUidRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "merchant_uid",
                |m: &PaymentMerchantUidRequest| { &m.merchant_uid },
                |m: &mut PaymentMerchantUidRequest| { &mut m.merchant_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status",
                |m: &PaymentMerchantUidRequest| { &m.status },
                |m: &mut PaymentMerchantUidRequest| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sorting",
                |m: &PaymentMerchantUidRequest| { &m.sorting },
                |m: &mut PaymentMerchantUidRequest| { &mut m.sorting },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentMerchantUidRequest>(
                "PaymentMerchantUidRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentMerchantUidRequest {
        static instance: ::protobuf::rt::LazyV2<PaymentMerchantUidRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentMerchantUidRequest::new)
    }
}

impl ::protobuf::Clear for PaymentMerchantUidRequest {
    fn clear(&mut self) {
        self.merchant_uid.clear();
        self.status.clear();
        self.sorting.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentMerchantUidRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentMerchantUidRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentMerchantUidResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<Payment>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentMerchantUidResponse {
    fn default() -> &'a PaymentMerchantUidResponse {
        <PaymentMerchantUidResponse as ::protobuf::Message>::default_instance()
    }
}

impl PaymentMerchantUidResponse {
    pub fn new() -> PaymentMerchantUidResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .payment.Payment response = 3;


    pub fn get_response(&self) -> &Payment {
        self.response.as_ref().unwrap_or_else(|| <Payment as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: Payment) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut Payment {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> Payment {
        self.response.take().unwrap_or_else(|| Payment::new())
    }
}

impl ::protobuf::Message for PaymentMerchantUidResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentMerchantUidResponse {
        PaymentMerchantUidResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &PaymentMerchantUidResponse| { &m.code },
                |m: &mut PaymentMerchantUidResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &PaymentMerchantUidResponse| { &m.message },
                |m: &mut PaymentMerchantUidResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Payment>>(
                "response",
                |m: &PaymentMerchantUidResponse| { &m.response },
                |m: &mut PaymentMerchantUidResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentMerchantUidResponse>(
                "PaymentMerchantUidResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentMerchantUidResponse {
        static instance: ::protobuf::rt::LazyV2<PaymentMerchantUidResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentMerchantUidResponse::new)
    }
}

impl ::protobuf::Clear for PaymentMerchantUidResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentMerchantUidResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentMerchantUidResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentCancelRequest {
    // message fields
    pub imp_uid: ::std::string::String,
    pub merchant_uid: ::std::string::String,
    pub amount: f64,
    pub tax_free: f64,
    pub checksum: f64,
    pub reason: ::std::string::String,
    pub refund_holder: ::std::string::String,
    pub refund_bank: ::std::string::String,
    pub refund_account: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentCancelRequest {
    fn default() -> &'a PaymentCancelRequest {
        <PaymentCancelRequest as ::protobuf::Message>::default_instance()
    }
}

impl PaymentCancelRequest {
    pub fn new() -> PaymentCancelRequest {
        ::std::default::Default::default()
    }

    // string imp_uid = 1;


    pub fn get_imp_uid(&self) -> &str {
        &self.imp_uid
    }
    pub fn clear_imp_uid(&mut self) {
        self.imp_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_imp_uid(&mut self, v: ::std::string::String) {
        self.imp_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_imp_uid(&mut self) -> &mut ::std::string::String {
        &mut self.imp_uid
    }

    // Take field
    pub fn take_imp_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.imp_uid, ::std::string::String::new())
    }

    // string merchant_uid = 2;


    pub fn get_merchant_uid(&self) -> &str {
        &self.merchant_uid
    }
    pub fn clear_merchant_uid(&mut self) {
        self.merchant_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_merchant_uid(&mut self, v: ::std::string::String) {
        self.merchant_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_merchant_uid(&mut self) -> &mut ::std::string::String {
        &mut self.merchant_uid
    }

    // Take field
    pub fn take_merchant_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.merchant_uid, ::std::string::String::new())
    }

    // double amount = 3;


    pub fn get_amount(&self) -> f64 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: f64) {
        self.amount = v;
    }

    // double tax_free = 4;


    pub fn get_tax_free(&self) -> f64 {
        self.tax_free
    }
    pub fn clear_tax_free(&mut self) {
        self.tax_free = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tax_free(&mut self, v: f64) {
        self.tax_free = v;
    }

    // double checksum = 5;


    pub fn get_checksum(&self) -> f64 {
        self.checksum
    }
    pub fn clear_checksum(&mut self) {
        self.checksum = 0.;
    }

    // Param is passed by value, moved
    pub fn set_checksum(&mut self, v: f64) {
        self.checksum = v;
    }

    // string reason = 6;


    pub fn get_reason(&self) -> &str {
        &self.reason
    }
    pub fn clear_reason(&mut self) {
        self.reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        &mut self.reason
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reason, ::std::string::String::new())
    }

    // string refund_holder = 7;


    pub fn get_refund_holder(&self) -> &str {
        &self.refund_holder
    }
    pub fn clear_refund_holder(&mut self) {
        self.refund_holder.clear();
    }

    // Param is passed by value, moved
    pub fn set_refund_holder(&mut self, v: ::std::string::String) {
        self.refund_holder = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refund_holder(&mut self) -> &mut ::std::string::String {
        &mut self.refund_holder
    }

    // Take field
    pub fn take_refund_holder(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.refund_holder, ::std::string::String::new())
    }

    // string refund_bank = 8;


    pub fn get_refund_bank(&self) -> &str {
        &self.refund_bank
    }
    pub fn clear_refund_bank(&mut self) {
        self.refund_bank.clear();
    }

    // Param is passed by value, moved
    pub fn set_refund_bank(&mut self, v: ::std::string::String) {
        self.refund_bank = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refund_bank(&mut self) -> &mut ::std::string::String {
        &mut self.refund_bank
    }

    // Take field
    pub fn take_refund_bank(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.refund_bank, ::std::string::String::new())
    }

    // string refund_account = 9;


    pub fn get_refund_account(&self) -> &str {
        &self.refund_account
    }
    pub fn clear_refund_account(&mut self) {
        self.refund_account.clear();
    }

    // Param is passed by value, moved
    pub fn set_refund_account(&mut self, v: ::std::string::String) {
        self.refund_account = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refund_account(&mut self) -> &mut ::std::string::String {
        &mut self.refund_account
    }

    // Take field
    pub fn take_refund_account(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.refund_account, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PaymentCancelRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.imp_uid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.merchant_uid)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amount = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tax_free = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.checksum = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reason)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.refund_holder)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.refund_bank)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.refund_account)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.imp_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.imp_uid);
        }
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.merchant_uid);
        }
        if self.amount != 0. {
            my_size += 9;
        }
        if self.tax_free != 0. {
            my_size += 9;
        }
        if self.checksum != 0. {
            my_size += 9;
        }
        if !self.reason.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.reason);
        }
        if !self.refund_holder.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.refund_holder);
        }
        if !self.refund_bank.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.refund_bank);
        }
        if !self.refund_account.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.refund_account);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.imp_uid.is_empty() {
            os.write_string(1, &self.imp_uid)?;
        }
        if !self.merchant_uid.is_empty() {
            os.write_string(2, &self.merchant_uid)?;
        }
        if self.amount != 0. {
            os.write_double(3, self.amount)?;
        }
        if self.tax_free != 0. {
            os.write_double(4, self.tax_free)?;
        }
        if self.checksum != 0. {
            os.write_double(5, self.checksum)?;
        }
        if !self.reason.is_empty() {
            os.write_string(6, &self.reason)?;
        }
        if !self.refund_holder.is_empty() {
            os.write_string(7, &self.refund_holder)?;
        }
        if !self.refund_bank.is_empty() {
            os.write_string(8, &self.refund_bank)?;
        }
        if !self.refund_account.is_empty() {
            os.write_string(9, &self.refund_account)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentCancelRequest {
        PaymentCancelRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "imp_uid",
                |m: &PaymentCancelRequest| { &m.imp_uid },
                |m: &mut PaymentCancelRequest| { &mut m.imp_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "merchant_uid",
                |m: &PaymentCancelRequest| { &m.merchant_uid },
                |m: &mut PaymentCancelRequest| { &mut m.merchant_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "amount",
                |m: &PaymentCancelRequest| { &m.amount },
                |m: &mut PaymentCancelRequest| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tax_free",
                |m: &PaymentCancelRequest| { &m.tax_free },
                |m: &mut PaymentCancelRequest| { &mut m.tax_free },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "checksum",
                |m: &PaymentCancelRequest| { &m.checksum },
                |m: &mut PaymentCancelRequest| { &mut m.checksum },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reason",
                |m: &PaymentCancelRequest| { &m.reason },
                |m: &mut PaymentCancelRequest| { &mut m.reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "refund_holder",
                |m: &PaymentCancelRequest| { &m.refund_holder },
                |m: &mut PaymentCancelRequest| { &mut m.refund_holder },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "refund_bank",
                |m: &PaymentCancelRequest| { &m.refund_bank },
                |m: &mut PaymentCancelRequest| { &mut m.refund_bank },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "refund_account",
                |m: &PaymentCancelRequest| { &m.refund_account },
                |m: &mut PaymentCancelRequest| { &mut m.refund_account },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentCancelRequest>(
                "PaymentCancelRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentCancelRequest {
        static instance: ::protobuf::rt::LazyV2<PaymentCancelRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentCancelRequest::new)
    }
}

impl ::protobuf::Clear for PaymentCancelRequest {
    fn clear(&mut self) {
        self.imp_uid.clear();
        self.merchant_uid.clear();
        self.amount = 0.;
        self.tax_free = 0.;
        self.checksum = 0.;
        self.reason.clear();
        self.refund_holder.clear();
        self.refund_bank.clear();
        self.refund_account.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentCancelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentCancelRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentCancelResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<Payment>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentCancelResponse {
    fn default() -> &'a PaymentCancelResponse {
        <PaymentCancelResponse as ::protobuf::Message>::default_instance()
    }
}

impl PaymentCancelResponse {
    pub fn new() -> PaymentCancelResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .payment.Payment response = 3;


    pub fn get_response(&self) -> &Payment {
        self.response.as_ref().unwrap_or_else(|| <Payment as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: Payment) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut Payment {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> Payment {
        self.response.take().unwrap_or_else(|| Payment::new())
    }
}

impl ::protobuf::Message for PaymentCancelResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentCancelResponse {
        PaymentCancelResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &PaymentCancelResponse| { &m.code },
                |m: &mut PaymentCancelResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &PaymentCancelResponse| { &m.message },
                |m: &mut PaymentCancelResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Payment>>(
                "response",
                |m: &PaymentCancelResponse| { &m.response },
                |m: &mut PaymentCancelResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentCancelResponse>(
                "PaymentCancelResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentCancelResponse {
        static instance: ::protobuf::rt::LazyV2<PaymentCancelResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentCancelResponse::new)
    }
}

impl ::protobuf::Clear for PaymentCancelResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentCancelResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentCancelResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentBalanceRequest {
    // message fields
    pub imp_uid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentBalanceRequest {
    fn default() -> &'a PaymentBalanceRequest {
        <PaymentBalanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl PaymentBalanceRequest {
    pub fn new() -> PaymentBalanceRequest {
        ::std::default::Default::default()
    }

    // string imp_uid = 1;


    pub fn get_imp_uid(&self) -> &str {
        &self.imp_uid
    }
    pub fn clear_imp_uid(&mut self) {
        self.imp_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_imp_uid(&mut self, v: ::std::string::String) {
        self.imp_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_imp_uid(&mut self) -> &mut ::std::string::String {
        &mut self.imp_uid
    }

    // Take field
    pub fn take_imp_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.imp_uid, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PaymentBalanceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.imp_uid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.imp_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.imp_uid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.imp_uid.is_empty() {
            os.write_string(1, &self.imp_uid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentBalanceRequest {
        PaymentBalanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "imp_uid",
                |m: &PaymentBalanceRequest| { &m.imp_uid },
                |m: &mut PaymentBalanceRequest| { &mut m.imp_uid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentBalanceRequest>(
                "PaymentBalanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentBalanceRequest {
        static instance: ::protobuf::rt::LazyV2<PaymentBalanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentBalanceRequest::new)
    }
}

impl ::protobuf::Clear for PaymentBalanceRequest {
    fn clear(&mut self) {
        self.imp_uid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentBalanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentBalanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentBalanceResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<PaymentBalance>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentBalanceResponse {
    fn default() -> &'a PaymentBalanceResponse {
        <PaymentBalanceResponse as ::protobuf::Message>::default_instance()
    }
}

impl PaymentBalanceResponse {
    pub fn new() -> PaymentBalanceResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .payment.PaymentBalance response = 3;


    pub fn get_response(&self) -> &PaymentBalance {
        self.response.as_ref().unwrap_or_else(|| <PaymentBalance as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: PaymentBalance) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut PaymentBalance {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> PaymentBalance {
        self.response.take().unwrap_or_else(|| PaymentBalance::new())
    }
}

impl ::protobuf::Message for PaymentBalanceResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentBalanceResponse {
        PaymentBalanceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &PaymentBalanceResponse| { &m.code },
                |m: &mut PaymentBalanceResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &PaymentBalanceResponse| { &m.message },
                |m: &mut PaymentBalanceResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PaymentBalance>>(
                "response",
                |m: &PaymentBalanceResponse| { &m.response },
                |m: &mut PaymentBalanceResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentBalanceResponse>(
                "PaymentBalanceResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentBalanceResponse {
        static instance: ::protobuf::rt::LazyV2<PaymentBalanceResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentBalanceResponse::new)
    }
}

impl ::protobuf::Clear for PaymentBalanceResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentBalanceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentBalanceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Prepare {
    // message fields
    pub merchant_uid: ::std::string::String,
    pub amount: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Prepare {
    fn default() -> &'a Prepare {
        <Prepare as ::protobuf::Message>::default_instance()
    }
}

impl Prepare {
    pub fn new() -> Prepare {
        ::std::default::Default::default()
    }

    // string merchant_uid = 1;


    pub fn get_merchant_uid(&self) -> &str {
        &self.merchant_uid
    }
    pub fn clear_merchant_uid(&mut self) {
        self.merchant_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_merchant_uid(&mut self, v: ::std::string::String) {
        self.merchant_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_merchant_uid(&mut self) -> &mut ::std::string::String {
        &mut self.merchant_uid
    }

    // Take field
    pub fn take_merchant_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.merchant_uid, ::std::string::String::new())
    }

    // int32 amount = 2;


    pub fn get_amount(&self) -> i32 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i32) {
        self.amount = v;
    }
}

impl ::protobuf::Message for Prepare {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.merchant_uid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.merchant_uid);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(2, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.merchant_uid.is_empty() {
            os.write_string(1, &self.merchant_uid)?;
        }
        if self.amount != 0 {
            os.write_int32(2, self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Prepare {
        Prepare::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "merchant_uid",
                |m: &Prepare| { &m.merchant_uid },
                |m: &mut Prepare| { &mut m.merchant_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "amount",
                |m: &Prepare| { &m.amount },
                |m: &mut Prepare| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Prepare>(
                "Prepare",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Prepare {
        static instance: ::protobuf::rt::LazyV2<Prepare> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Prepare::new)
    }
}

impl ::protobuf::Clear for Prepare {
    fn clear(&mut self) {
        self.merchant_uid.clear();
        self.amount = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Prepare {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Prepare {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentPrepareRequest {
    // message fields
    pub merchant_uid: ::std::string::String,
    pub amount: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentPrepareRequest {
    fn default() -> &'a PaymentPrepareRequest {
        <PaymentPrepareRequest as ::protobuf::Message>::default_instance()
    }
}

impl PaymentPrepareRequest {
    pub fn new() -> PaymentPrepareRequest {
        ::std::default::Default::default()
    }

    // string merchant_uid = 1;


    pub fn get_merchant_uid(&self) -> &str {
        &self.merchant_uid
    }
    pub fn clear_merchant_uid(&mut self) {
        self.merchant_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_merchant_uid(&mut self, v: ::std::string::String) {
        self.merchant_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_merchant_uid(&mut self) -> &mut ::std::string::String {
        &mut self.merchant_uid
    }

    // Take field
    pub fn take_merchant_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.merchant_uid, ::std::string::String::new())
    }

    // double amount = 2;


    pub fn get_amount(&self) -> f64 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: f64) {
        self.amount = v;
    }
}

impl ::protobuf::Message for PaymentPrepareRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.merchant_uid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.merchant_uid);
        }
        if self.amount != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.merchant_uid.is_empty() {
            os.write_string(1, &self.merchant_uid)?;
        }
        if self.amount != 0. {
            os.write_double(2, self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentPrepareRequest {
        PaymentPrepareRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "merchant_uid",
                |m: &PaymentPrepareRequest| { &m.merchant_uid },
                |m: &mut PaymentPrepareRequest| { &mut m.merchant_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "amount",
                |m: &PaymentPrepareRequest| { &m.amount },
                |m: &mut PaymentPrepareRequest| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentPrepareRequest>(
                "PaymentPrepareRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentPrepareRequest {
        static instance: ::protobuf::rt::LazyV2<PaymentPrepareRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentPrepareRequest::new)
    }
}

impl ::protobuf::Clear for PaymentPrepareRequest {
    fn clear(&mut self) {
        self.merchant_uid.clear();
        self.amount = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentPrepareRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentPrepareRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentPrepareResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<Prepare>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentPrepareResponse {
    fn default() -> &'a PaymentPrepareResponse {
        <PaymentPrepareResponse as ::protobuf::Message>::default_instance()
    }
}

impl PaymentPrepareResponse {
    pub fn new() -> PaymentPrepareResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .payment.Prepare response = 3;


    pub fn get_response(&self) -> &Prepare {
        self.response.as_ref().unwrap_or_else(|| <Prepare as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: Prepare) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut Prepare {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> Prepare {
        self.response.take().unwrap_or_else(|| Prepare::new())
    }
}

impl ::protobuf::Message for PaymentPrepareResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentPrepareResponse {
        PaymentPrepareResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &PaymentPrepareResponse| { &m.code },
                |m: &mut PaymentPrepareResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &PaymentPrepareResponse| { &m.message },
                |m: &mut PaymentPrepareResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Prepare>>(
                "response",
                |m: &PaymentPrepareResponse| { &m.response },
                |m: &mut PaymentPrepareResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentPrepareResponse>(
                "PaymentPrepareResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentPrepareResponse {
        static instance: ::protobuf::rt::LazyV2<PaymentPrepareResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentPrepareResponse::new)
    }
}

impl ::protobuf::Clear for PaymentPrepareResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentPrepareResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentPrepareResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15payment/payment.proto\x12\x07payment\"\xcd\x0b\n\x07Payment\x12\
    \x16\n\x06amount\x18\x01\x20\x01(\x05R\x06amount\x12\x1b\n\tapply_num\
    \x18\x02\x20\x01(\tR\x08applyNum\x12\x1b\n\tbank_code\x18\x03\x20\x01(\
    \x05R\x08bankCode\x12\x1b\n\tbank_name\x18\x04\x20\x01(\tR\x08bankName\
    \x12\x1d\n\nbuyer_addr\x18\x05\x20\x01(\tR\tbuyerAddr\x12\x1f\n\x0bbuyer\
    _email\x18\x06\x20\x01(\tR\nbuyerEmail\x12\x1d\n\nbuyer_name\x18\x07\x20\
    \x01(\tR\tbuyerName\x12%\n\x0ebuyer_postcode\x18\x08\x20\x01(\tR\rbuyerP\
    ostcode\x12\x1b\n\tbuyer_tel\x18\t\x20\x01(\tR\x08buyerTel\x12#\n\rcance\
    l_amount\x18\n\x20\x01(\x05R\x0ccancelAmount\x12=\n\x0ecancel_history\
    \x18\x0b\x20\x03(\x0b2\x16.payment.CancelHistoryR\rcancelHistory\x12#\n\
    \rcancel_reason\x18\x0c\x20\x01(\tR\x0ccancelReason\x12.\n\x13cancel_rec\
    eipt_urls\x18\r\x20\x03(\tR\x11cancelReceiptUrls\x12!\n\x0ccancelled_at\
    \x18\x0e\x20\x01(\x05R\x0bcancelledAt\x12\x1b\n\tcard_code\x18\x0f\x20\
    \x01(\tR\x08cardCode\x12\x1b\n\tcard_name\x18\x10\x20\x01(\tR\x08cardNam\
    e\x12\x1f\n\x0bcard_number\x18\x11\x20\x01(\tR\ncardNumber\x12\x1d\n\nca\
    rd_quota\x18\x12\x20\x01(\x05R\tcardQuota\x12\x1b\n\tcard_type\x18\x13\
    \x20\x01(\x05R\x08cardType\x12.\n\x13cash_receipt_issued\x18\x14\x20\x01\
    (\x08R\x11cashReceiptIssued\x12\x18\n\x07channel\x18\x15\x20\x01(\tR\x07\
    channel\x12\x1a\n\x08currency\x18\x16\x20\x01(\tR\x08currency\x12\x1f\n\
    \x0bcustom_data\x18\x17\x20\x01(\tR\ncustomData\x12!\n\x0ccustomer_uid\
    \x18\x18\x20\x01(\tR\x0bcustomerUid\x12,\n\x12customer_uid_usage\x18\x19\
    \x20\x01(\tR\x10customerUidUsage\x12\x16\n\x06escrow\x18\x1a\x20\x01(\
    \x08R\x06escrow\x12\x1f\n\x0bfail_reason\x18\x1b\x20\x01(\tR\nfailReason\
    \x12\x1b\n\tfailed_at\x18\x1c\x20\x01(\x05R\x08failedAt\x12\x17\n\x07imp\
    _uid\x18\x1d\x20\x01(\tR\x06impUid\x12!\n\x0cmerchant_uid\x18\x1e\x20\
    \x01(\tR\x0bmerchantUid\x12\x12\n\x04name\x18\x1f\x20\x01(\tR\x04name\
    \x12\x17\n\x07paid_at\x18\x20\x20\x01(\x05R\x06paidAt\x12\x1d\n\npay_met\
    hod\x18!\x20\x01(\tR\tpayMethod\x12\x13\n\x05pg_id\x18\"\x20\x01(\tR\x04\
    pgId\x12\x1f\n\x0bpg_provider\x18#\x20\x01(\tR\npgProvider\x12\x15\n\x06\
    pg_tid\x18$\x20\x01(\tR\x05pgTid\x12\x1f\n\x0breceipt_url\x18%\x20\x01(\
    \tR\nreceiptUrl\x12\x1d\n\nstarted_at\x18&\x20\x01(\x05R\tstartedAt\x12\
    \x16\n\x06status\x18'\x20\x01(\tR\x06status\x12\x1d\n\nuser_agent\x18(\
    \x20\x01(\tR\tuserAgent\x12\x1d\n\nvbank_code\x18)\x20\x01(\tR\tvbankCod\
    e\x12\x1d\n\nvbank_date\x18*\x20\x01(\x05R\tvbankDate\x12!\n\x0cvbank_ho\
    lder\x18+\x20\x01(\tR\x0bvbankHolder\x12&\n\x0fvbank_issued_at\x18,\x20\
    \x01(\x05R\rvbankIssuedAt\x12\x1d\n\nvbank_name\x18-\x20\x01(\tR\tvbankN\
    ame\x12\x1b\n\tvbank_num\x18.\x20\x01(\tR\x08vbankNum\"\x9a\x01\n\rCance\
    lHistory\x12\x15\n\x06pg_tid\x18\x01\x20\x01(\tR\x05pgTid\x12\x16\n\x06a\
    mount\x18\x02\x20\x01(\x05R\x06amount\x12!\n\x0ccancelled_at\x18\x03\x20\
    \x01(\x05R\x0bcancelledAt\x12\x16\n\x06reason\x18\x04\x20\x01(\tR\x06rea\
    son\x12\x1f\n\x0breceipt_url\x18\x05\x20\x01(\tR\nreceiptUrl\"y\n\x0bPay\
    mentPage\x12\x14\n\x05total\x18\x01\x20\x01(\x05R\x05total\x12\x1a\n\x08\
    previous\x18\x02\x20\x01(\x05R\x08previous\x12\x12\n\x04next\x18\x03\x20\
    \x01(\x05R\x04next\x12$\n\x04list\x18\x04\x20\x03(\x0b2\x10.payment.Paym\
    entR\x04list\"u\n\x14PaymentBalanceDetail\x12\x19\n\x08tax_free\x18\x01\
    \x20\x01(\x05R\x07taxFree\x12\x16\n\x06supply\x18\x02\x20\x01(\x05R\x06s\
    upply\x12\x10\n\x03vat\x18\x03\x20\x01(\x05R\x03vat\x12\x18\n\x07service\
    \x18\x04\x20\x01(\x05R\x07service\"\xd9\x02\n\x0ePaymentBalance\x12\x16\
    \n\x06amount\x18\x01\x20\x01(\x05R\x06amount\x12@\n\x0ccash_receipt\x18\
    \x02\x20\x01(\x0b2\x1d.payment.PaymentBalanceDetailR\x0bcashReceipt\x127\
    \n\x07primary\x18\x03\x20\x01(\x0b2\x1d.payment.PaymentBalanceDetailR\
    \x07primary\x12;\n\tsecondary\x18\x04\x20\x01(\x0b2\x1d.payment.PaymentB\
    alanceDetailR\tsecondary\x129\n\x08discount\x18\x05\x20\x01(\x0b2\x1d.pa\
    yment.PaymentBalanceDetailR\x08discount\x12<\n\thistories\x18\x06\x20\
    \x03(\x0b2\x1e.payment.PaymentBalanceHistoryR\thistories\"\xa4\x02\n\x15\
    PaymentBalanceHistory\x12@\n\x0ccash_receipt\x18\x01\x20\x01(\x0b2\x1d.p\
    ayment.PaymentBalanceDetailR\x0bcashReceipt\x127\n\x07primary\x18\x02\
    \x20\x01(\x0b2\x1d.payment.PaymentBalanceDetailR\x07primary\x12;\n\tseco\
    ndary\x18\x03\x20\x01(\x0b2\x1d.payment.PaymentBalanceDetailR\tsecondary\
    \x129\n\x08discount\x18\x04\x20\x01(\x0b2\x1d.payment.PaymentBalanceDeta\
    ilR\x08discount\x12\x18\n\x07created\x18\x05\x20\x01(\x05R\x07created\")\
    \n\x0ePaymentRequest\x12\x17\n\x07imp_uid\x18\x01\x20\x01(\tR\x06impUid\
    \"m\n\x0fPaymentResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\
    \x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\x12,\n\x08response\
    \x18\x03\x20\x01(\x0b2\x10.payment.PaymentR\x08response\"*\n\x0fPayments\
    Request\x12\x17\n\x07imp_uid\x18\x01\x20\x03(\tR\x06impUid\"n\n\x10Payme\
    ntsResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\
    \x07message\x18\x02\x20\x01(\tR\x07message\x12,\n\x08response\x18\x03\
    \x20\x03(\x0b2\x10.payment.PaymentR\x08response\"\x85\x01\n\x1aPaymentsM\
    erchantUidRequest\x12!\n\x0cmerchant_uid\x18\x01\x20\x01(\tR\x0bmerchant\
    Uid\x12\x16\n\x06status\x18\x02\x20\x01(\tR\x06status\x12\x12\n\x04page\
    \x18\x03\x20\x01(\x05R\x04page\x12\x18\n\x07sorting\x18\x04\x20\x01(\tR\
    \x07sorting\"}\n\x1bPaymentsMerchantUidResponse\x12\x12\n\x04code\x18\
    \x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07m\
    essage\x120\n\x08response\x18\x03\x20\x01(\x0b2\x14.payment.PaymentPageR\
    \x08response\"\x96\x01\n\x14PaymentStatusRequest\x12\x16\n\x06status\x18\
    \x01\x20\x01(\tR\x06status\x12\x12\n\x04page\x18\x02\x20\x01(\x05R\x04pa\
    ge\x12\x14\n\x05limit\x18\x03\x20\x01(\x05R\x05limit\x12\x12\n\x04from\
    \x18\x04\x20\x01(\x05R\x04from\x12\x0e\n\x02to\x18\x05\x20\x01(\x05R\x02\
    to\x12\x18\n\x07sorting\x18\x06\x20\x01(\tR\x07sorting\"w\n\x15PaymentSt\
    atusResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\
    \x07message\x18\x02\x20\x01(\tR\x07message\x120\n\x08response\x18\x03\
    \x20\x01(\x0b2\x14.payment.PaymentPageR\x08response\"p\n\x19PaymentMerch\
    antUidRequest\x12!\n\x0cmerchant_uid\x18\x01\x20\x01(\tR\x0bmerchantUid\
    \x12\x16\n\x06status\x18\x02\x20\x01(\tR\x06status\x12\x18\n\x07sorting\
    \x18\x03\x20\x01(\tR\x07sorting\"x\n\x1aPaymentMerchantUidResponse\x12\
    \x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\
    \x02\x20\x01(\tR\x07message\x12,\n\x08response\x18\x03\x20\x01(\x0b2\x10\
    .payment.PaymentR\x08response\"\xa6\x02\n\x14PaymentCancelRequest\x12\
    \x17\n\x07imp_uid\x18\x01\x20\x01(\tR\x06impUid\x12!\n\x0cmerchant_uid\
    \x18\x02\x20\x01(\tR\x0bmerchantUid\x12\x16\n\x06amount\x18\x03\x20\x01(\
    \x01R\x06amount\x12\x19\n\x08tax_free\x18\x04\x20\x01(\x01R\x07taxFree\
    \x12\x1a\n\x08checksum\x18\x05\x20\x01(\x01R\x08checksum\x12\x16\n\x06re\
    ason\x18\x06\x20\x01(\tR\x06reason\x12#\n\rrefund_holder\x18\x07\x20\x01\
    (\tR\x0crefundHolder\x12\x1f\n\x0brefund_bank\x18\x08\x20\x01(\tR\nrefun\
    dBank\x12%\n\x0erefund_account\x18\t\x20\x01(\tR\rrefundAccount\"s\n\x15\
    PaymentCancelResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\
    \x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\x12,\n\x08response\
    \x18\x03\x20\x01(\x0b2\x10.payment.PaymentR\x08response\"0\n\x15PaymentB\
    alanceRequest\x12\x17\n\x07imp_uid\x18\x01\x20\x01(\tR\x06impUid\"{\n\
    \x16PaymentBalanceResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04co\
    de\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\x123\n\x08respons\
    e\x18\x03\x20\x01(\x0b2\x17.payment.PaymentBalanceR\x08response\"D\n\x07\
    Prepare\x12!\n\x0cmerchant_uid\x18\x01\x20\x01(\tR\x0bmerchantUid\x12\
    \x16\n\x06amount\x18\x02\x20\x01(\x05R\x06amount\"R\n\x15PaymentPrepareR\
    equest\x12!\n\x0cmerchant_uid\x18\x01\x20\x01(\tR\x0bmerchantUid\x12\x16\
    \n\x06amount\x18\x02\x20\x01(\x01R\x06amount\"t\n\x16PaymentPrepareRespo\
    nse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\
    \x18\x02\x20\x01(\tR\x07message\x12,\n\x08response\x18\x03\x20\x01(\x0b2\
    \x10.payment.PrepareR\x08responseB/Z-github.com/iamport/interface/build/\
    go/paymentJ\xce;\n\x07\x12\x05\0\0\xc3\x01\x01\n\x08\n\x01\x0c\x12\x03\0\
    \0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x10\n\x08\n\x01\x08\x12\x03\x03\0D\
    \n\t\n\x02\x08\x0b\x12\x03\x03\0D\n\n\n\x02\x04\0\x12\x04\x05\04\x01\n\n\
    \n\x03\x04\0\x01\x12\x03\x05\x08\x0f\n\x0b\n\x04\x04\0\x02\0\x12\x03\x06\
    \x04\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x06\x04\t\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x06\n\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x06\x13\
    \x14\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x07\x04\x19\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x07\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x07\x0b\
    \x14\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x07\x17\x18\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\x08\x04\x18\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x08\
    \x04\t\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x08\n\x13\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03\x08\x16\x17\n\x0b\n\x04\x04\0\x02\x03\x12\x03\t\x04\
    \x19\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\t\x04\n\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03\t\x0b\x14\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\t\x17\
    \x18\n\x0b\n\x04\x04\0\x02\x04\x12\x03\n\x04\x1a\n\x0c\n\x05\x04\0\x02\
    \x04\x05\x12\x03\n\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\n\x0b\x15\
    \n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\n\x18\x19\n\x0b\n\x04\x04\0\x02\
    \x05\x12\x03\x0b\x04\x1b\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x0b\x04\n\
    \n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0b\x0b\x16\n\x0c\n\x05\x04\0\x02\
    \x05\x03\x12\x03\x0b\x19\x1a\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x0c\x04\
    \x1a\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\x0c\x04\n\n\x0c\n\x05\x04\0\
    \x02\x06\x01\x12\x03\x0c\x0b\x15\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\
    \x0c\x18\x19\n\x0b\n\x04\x04\0\x02\x07\x12\x03\r\x04\x1e\n\x0c\n\x05\x04\
    \0\x02\x07\x05\x12\x03\r\x04\n\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\r\
    \x0b\x19\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\r\x1c\x1d\n\x0b\n\x04\x04\
    \0\x02\x08\x12\x03\x0e\x04\x19\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03\x0e\
    \x04\n\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x0e\x0b\x14\n\x0c\n\x05\x04\
    \0\x02\x08\x03\x12\x03\x0e\x17\x18\n\x0b\n\x04\x04\0\x02\t\x12\x03\x0f\
    \x04\x1d\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03\x0f\x04\t\n\x0c\n\x05\x04\0\
    \x02\t\x01\x12\x03\x0f\n\x17\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03\x0f\x1a\
    \x1c\n\x0b\n\x04\x04\0\x02\n\x12\x03\x10\x04/\n\x0c\n\x05\x04\0\x02\n\
    \x04\x12\x03\x10\x04\x0c\n\x0c\n\x05\x04\0\x02\n\x06\x12\x03\x10\r\x1a\n\
    \x0c\n\x05\x04\0\x02\n\x01\x12\x03\x10\x1b)\n\x0c\n\x05\x04\0\x02\n\x03\
    \x12\x03\x10,.\n\x0b\n\x04\x04\0\x02\x0b\x12\x03\x11\x04\x1e\n\x0c\n\x05\
    \x04\0\x02\x0b\x05\x12\x03\x11\x04\n\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\
    \x03\x11\x0b\x18\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\x03\x11\x1b\x1d\n\x0b\
    \n\x04\x04\0\x02\x0c\x12\x03\x12\x04-\n\x0c\n\x05\x04\0\x02\x0c\x04\x12\
    \x03\x12\x04\x0c\n\x0c\n\x05\x04\0\x02\x0c\x05\x12\x03\x12\r\x13\n\x0c\n\
    \x05\x04\0\x02\x0c\x01\x12\x03\x12\x14'\n\x0c\n\x05\x04\0\x02\x0c\x03\
    \x12\x03\x12*,\n\x0b\n\x04\x04\0\x02\r\x12\x03\x13\x04\x1c\n\x0c\n\x05\
    \x04\0\x02\r\x05\x12\x03\x13\x04\t\n\x0c\n\x05\x04\0\x02\r\x01\x12\x03\
    \x13\n\x16\n\x0c\n\x05\x04\0\x02\r\x03\x12\x03\x13\x19\x1b\n\x0b\n\x04\
    \x04\0\x02\x0e\x12\x03\x14\x04\x1a\n\x0c\n\x05\x04\0\x02\x0e\x05\x12\x03\
    \x14\x04\n\n\x0c\n\x05\x04\0\x02\x0e\x01\x12\x03\x14\x0b\x14\n\x0c\n\x05\
    \x04\0\x02\x0e\x03\x12\x03\x14\x17\x19\n\x0b\n\x04\x04\0\x02\x0f\x12\x03\
    \x15\x04\x1a\n\x0c\n\x05\x04\0\x02\x0f\x05\x12\x03\x15\x04\n\n\x0c\n\x05\
    \x04\0\x02\x0f\x01\x12\x03\x15\x0b\x14\n\x0c\n\x05\x04\0\x02\x0f\x03\x12\
    \x03\x15\x17\x19\n\x0b\n\x04\x04\0\x02\x10\x12\x03\x16\x04\x1c\n\x0c\n\
    \x05\x04\0\x02\x10\x05\x12\x03\x16\x04\n\n\x0c\n\x05\x04\0\x02\x10\x01\
    \x12\x03\x16\x0b\x16\n\x0c\n\x05\x04\0\x02\x10\x03\x12\x03\x16\x19\x1b\n\
    \x0b\n\x04\x04\0\x02\x11\x12\x03\x17\x04\x1a\n\x0c\n\x05\x04\0\x02\x11\
    \x05\x12\x03\x17\x04\t\n\x0c\n\x05\x04\0\x02\x11\x01\x12\x03\x17\n\x14\n\
    \x0c\n\x05\x04\0\x02\x11\x03\x12\x03\x17\x17\x19\n\x0b\n\x04\x04\0\x02\
    \x12\x12\x03\x18\x04\x19\n\x0c\n\x05\x04\0\x02\x12\x05\x12\x03\x18\x04\t\
    \n\x0c\n\x05\x04\0\x02\x12\x01\x12\x03\x18\n\x13\n\x0c\n\x05\x04\0\x02\
    \x12\x03\x12\x03\x18\x16\x18\n\x0b\n\x04\x04\0\x02\x13\x12\x03\x19\x04\"\
    \n\x0c\n\x05\x04\0\x02\x13\x05\x12\x03\x19\x04\x08\n\x0c\n\x05\x04\0\x02\
    \x13\x01\x12\x03\x19\t\x1c\n\x0c\n\x05\x04\0\x02\x13\x03\x12\x03\x19\x1f\
    !\n\x0b\n\x04\x04\0\x02\x14\x12\x03\x1a\x04\x18\n\x0c\n\x05\x04\0\x02\
    \x14\x05\x12\x03\x1a\x04\n\n\x0c\n\x05\x04\0\x02\x14\x01\x12\x03\x1a\x0b\
    \x12\n\x0c\n\x05\x04\0\x02\x14\x03\x12\x03\x1a\x15\x17\n\x0b\n\x04\x04\0\
    \x02\x15\x12\x03\x1b\x04\x19\n\x0c\n\x05\x04\0\x02\x15\x05\x12\x03\x1b\
    \x04\n\n\x0c\n\x05\x04\0\x02\x15\x01\x12\x03\x1b\x0b\x13\n\x0c\n\x05\x04\
    \0\x02\x15\x03\x12\x03\x1b\x16\x18\n\x0b\n\x04\x04\0\x02\x16\x12\x03\x1c\
    \x04\x1c\n\x0c\n\x05\x04\0\x02\x16\x05\x12\x03\x1c\x04\n\n\x0c\n\x05\x04\
    \0\x02\x16\x01\x12\x03\x1c\x0b\x16\n\x0c\n\x05\x04\0\x02\x16\x03\x12\x03\
    \x1c\x19\x1b\n\x0b\n\x04\x04\0\x02\x17\x12\x03\x1d\x04\x1d\n\x0c\n\x05\
    \x04\0\x02\x17\x05\x12\x03\x1d\x04\n\n\x0c\n\x05\x04\0\x02\x17\x01\x12\
    \x03\x1d\x0b\x17\n\x0c\n\x05\x04\0\x02\x17\x03\x12\x03\x1d\x1a\x1c\n\x0b\
    \n\x04\x04\0\x02\x18\x12\x03\x1e\x04#\n\x0c\n\x05\x04\0\x02\x18\x05\x12\
    \x03\x1e\x04\n\n\x0c\n\x05\x04\0\x02\x18\x01\x12\x03\x1e\x0b\x1d\n\x0c\n\
    \x05\x04\0\x02\x18\x03\x12\x03\x1e\x20\"\n\x0b\n\x04\x04\0\x02\x19\x12\
    \x03\x1f\x04\x15\n\x0c\n\x05\x04\0\x02\x19\x05\x12\x03\x1f\x04\x08\n\x0c\
    \n\x05\x04\0\x02\x19\x01\x12\x03\x1f\t\x0f\n\x0c\n\x05\x04\0\x02\x19\x03\
    \x12\x03\x1f\x12\x14\n\x0b\n\x04\x04\0\x02\x1a\x12\x03\x20\x04\x1c\n\x0c\
    \n\x05\x04\0\x02\x1a\x05\x12\x03\x20\x04\n\n\x0c\n\x05\x04\0\x02\x1a\x01\
    \x12\x03\x20\x0b\x16\n\x0c\n\x05\x04\0\x02\x1a\x03\x12\x03\x20\x19\x1b\n\
    \x0b\n\x04\x04\0\x02\x1b\x12\x03!\x04\x19\n\x0c\n\x05\x04\0\x02\x1b\x05\
    \x12\x03!\x04\t\n\x0c\n\x05\x04\0\x02\x1b\x01\x12\x03!\n\x13\n\x0c\n\x05\
    \x04\0\x02\x1b\x03\x12\x03!\x16\x18\n\x0b\n\x04\x04\0\x02\x1c\x12\x03\"\
    \x04\x18\n\x0c\n\x05\x04\0\x02\x1c\x05\x12\x03\"\x04\n\n\x0c\n\x05\x04\0\
    \x02\x1c\x01\x12\x03\"\x0b\x12\n\x0c\n\x05\x04\0\x02\x1c\x03\x12\x03\"\
    \x15\x17\n\x0b\n\x04\x04\0\x02\x1d\x12\x03#\x04\x1d\n\x0c\n\x05\x04\0\
    \x02\x1d\x05\x12\x03#\x04\n\n\x0c\n\x05\x04\0\x02\x1d\x01\x12\x03#\x0b\
    \x17\n\x0c\n\x05\x04\0\x02\x1d\x03\x12\x03#\x1a\x1c\n\x0b\n\x04\x04\0\
    \x02\x1e\x12\x03$\x04\x15\n\x0c\n\x05\x04\0\x02\x1e\x05\x12\x03$\x04\n\n\
    \x0c\n\x05\x04\0\x02\x1e\x01\x12\x03$\x0b\x0f\n\x0c\n\x05\x04\0\x02\x1e\
    \x03\x12\x03$\x12\x14\n\x0b\n\x04\x04\0\x02\x1f\x12\x03%\x04\x17\n\x0c\n\
    \x05\x04\0\x02\x1f\x05\x12\x03%\x04\t\n\x0c\n\x05\x04\0\x02\x1f\x01\x12\
    \x03%\n\x11\n\x0c\n\x05\x04\0\x02\x1f\x03\x12\x03%\x14\x16\n\x0b\n\x04\
    \x04\0\x02\x20\x12\x03&\x04\x1b\n\x0c\n\x05\x04\0\x02\x20\x05\x12\x03&\
    \x04\n\n\x0c\n\x05\x04\0\x02\x20\x01\x12\x03&\x0b\x15\n\x0c\n\x05\x04\0\
    \x02\x20\x03\x12\x03&\x18\x1a\n\x0b\n\x04\x04\0\x02!\x12\x03'\x04\x16\n\
    \x0c\n\x05\x04\0\x02!\x05\x12\x03'\x04\n\n\x0c\n\x05\x04\0\x02!\x01\x12\
    \x03'\x0b\x10\n\x0c\n\x05\x04\0\x02!\x03\x12\x03'\x13\x15\n\x0b\n\x04\
    \x04\0\x02\"\x12\x03(\x04\x1c\n\x0c\n\x05\x04\0\x02\"\x05\x12\x03(\x04\n\
    \n\x0c\n\x05\x04\0\x02\"\x01\x12\x03(\x0b\x16\n\x0c\n\x05\x04\0\x02\"\
    \x03\x12\x03(\x19\x1b\n\x0b\n\x04\x04\0\x02#\x12\x03)\x04\x17\n\x0c\n\
    \x05\x04\0\x02#\x05\x12\x03)\x04\n\n\x0c\n\x05\x04\0\x02#\x01\x12\x03)\
    \x0b\x11\n\x0c\n\x05\x04\0\x02#\x03\x12\x03)\x14\x16\n\x0b\n\x04\x04\0\
    \x02$\x12\x03*\x04\x1c\n\x0c\n\x05\x04\0\x02$\x05\x12\x03*\x04\n\n\x0c\n\
    \x05\x04\0\x02$\x01\x12\x03*\x0b\x16\n\x0c\n\x05\x04\0\x02$\x03\x12\x03*\
    \x19\x1b\n\x0b\n\x04\x04\0\x02%\x12\x03+\x04\x1a\n\x0c\n\x05\x04\0\x02%\
    \x05\x12\x03+\x04\t\n\x0c\n\x05\x04\0\x02%\x01\x12\x03+\n\x14\n\x0c\n\
    \x05\x04\0\x02%\x03\x12\x03+\x17\x19\n\x0b\n\x04\x04\0\x02&\x12\x03,\x04\
    \x17\n\x0c\n\x05\x04\0\x02&\x05\x12\x03,\x04\n\n\x0c\n\x05\x04\0\x02&\
    \x01\x12\x03,\x0b\x11\n\x0c\n\x05\x04\0\x02&\x03\x12\x03,\x14\x16\n\x0b\
    \n\x04\x04\0\x02'\x12\x03-\x04\x1b\n\x0c\n\x05\x04\0\x02'\x05\x12\x03-\
    \x04\n\n\x0c\n\x05\x04\0\x02'\x01\x12\x03-\x0b\x15\n\x0c\n\x05\x04\0\x02\
    '\x03\x12\x03-\x18\x1a\n\x0b\n\x04\x04\0\x02(\x12\x03.\x04\x1b\n\x0c\n\
    \x05\x04\0\x02(\x05\x12\x03.\x04\n\n\x0c\n\x05\x04\0\x02(\x01\x12\x03.\
    \x0b\x15\n\x0c\n\x05\x04\0\x02(\x03\x12\x03.\x18\x1a\n\x0b\n\x04\x04\0\
    \x02)\x12\x03/\x04\x1a\n\x0c\n\x05\x04\0\x02)\x05\x12\x03/\x04\t\n\x0c\n\
    \x05\x04\0\x02)\x01\x12\x03/\n\x14\n\x0c\n\x05\x04\0\x02)\x03\x12\x03/\
    \x17\x19\n\x0b\n\x04\x04\0\x02*\x12\x030\x04\x1d\n\x0c\n\x05\x04\0\x02*\
    \x05\x12\x030\x04\n\n\x0c\n\x05\x04\0\x02*\x01\x12\x030\x0b\x17\n\x0c\n\
    \x05\x04\0\x02*\x03\x12\x030\x1a\x1c\n\x0b\n\x04\x04\0\x02+\x12\x031\x04\
    \x1f\n\x0c\n\x05\x04\0\x02+\x05\x12\x031\x04\t\n\x0c\n\x05\x04\0\x02+\
    \x01\x12\x031\n\x19\n\x0c\n\x05\x04\0\x02+\x03\x12\x031\x1c\x1e\n\x0b\n\
    \x04\x04\0\x02,\x12\x032\x04\x1b\n\x0c\n\x05\x04\0\x02,\x05\x12\x032\x04\
    \n\n\x0c\n\x05\x04\0\x02,\x01\x12\x032\x0b\x15\n\x0c\n\x05\x04\0\x02,\
    \x03\x12\x032\x18\x1a\n\x0b\n\x04\x04\0\x02-\x12\x033\x04\x1a\n\x0c\n\
    \x05\x04\0\x02-\x05\x12\x033\x04\n\n\x0c\n\x05\x04\0\x02-\x01\x12\x033\
    \x0b\x14\n\x0c\n\x05\x04\0\x02-\x03\x12\x033\x17\x19\n\n\n\x02\x04\x01\
    \x12\x046\0<\x01\n\n\n\x03\x04\x01\x01\x12\x036\x08\x15\n\x0b\n\x04\x04\
    \x01\x02\0\x12\x037\x04\x16\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x037\x04\n\
    \n\x0c\n\x05\x04\x01\x02\0\x01\x12\x037\x0b\x11\n\x0c\n\x05\x04\x01\x02\
    \0\x03\x12\x037\x14\x15\n\x0b\n\x04\x04\x01\x02\x01\x12\x038\x04\x15\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x038\x04\t\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x038\n\x10\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x038\x13\x14\
    \n\x0b\n\x04\x04\x01\x02\x02\x12\x039\x04\x1b\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x039\x04\t\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x039\n\x16\n\
    \x0c\n\x05\x04\x01\x02\x02\x03\x12\x039\x19\x1a\n\x0b\n\x04\x04\x01\x02\
    \x03\x12\x03:\x04\x16\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03:\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x03\x01\x12\x03:\x0b\x11\n\x0c\n\x05\x04\x01\x02\
    \x03\x03\x12\x03:\x14\x15\n\x0b\n\x04\x04\x01\x02\x04\x12\x03;\x04\x1b\n\
    \x0c\n\x05\x04\x01\x02\x04\x05\x12\x03;\x04\n\n\x0c\n\x05\x04\x01\x02\
    \x04\x01\x12\x03;\x0b\x16\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03;\x19\
    \x1a\n\n\n\x02\x04\x02\x12\x04>\0C\x01\n\n\n\x03\x04\x02\x01\x12\x03>\
    \x08\x13\n\x0b\n\x04\x04\x02\x02\0\x12\x03?\x04\x14\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03?\x04\t\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03?\n\x0f\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03?\x12\x13\n\x0b\n\x04\x04\x02\x02\
    \x01\x12\x03@\x04\x17\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03@\x04\t\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03@\n\x12\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03@\x15\x16\n\x0b\n\x04\x04\x02\x02\x02\x12\x03A\x04\x13\n\
    \x0c\n\x05\x04\x02\x02\x02\x05\x12\x03A\x04\t\n\x0c\n\x05\x04\x02\x02\
    \x02\x01\x12\x03A\n\x0e\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03A\x11\x12\
    \n\x0b\n\x04\x04\x02\x02\x03\x12\x03B\x04\x1e\n\x0c\n\x05\x04\x02\x02\
    \x03\x04\x12\x03B\x04\x0c\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03B\r\x14\
    \n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03B\x15\x19\n\x0c\n\x05\x04\x02\
    \x02\x03\x03\x12\x03B\x1c\x1d\n\n\n\x02\x04\x03\x12\x04E\0J\x01\n\n\n\
    \x03\x04\x03\x01\x12\x03E\x08\x1c\n\x0b\n\x04\x04\x03\x02\0\x12\x03F\x04\
    \x17\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03F\x04\t\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x03F\n\x12\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03F\x15\x16\
    \n\x0b\n\x04\x04\x03\x02\x01\x12\x03G\x04\x15\n\x0c\n\x05\x04\x03\x02\
    \x01\x05\x12\x03G\x04\t\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03G\n\x10\n\
    \x0c\n\x05\x04\x03\x02\x01\x03\x12\x03G\x13\x14\n\x0b\n\x04\x04\x03\x02\
    \x02\x12\x03H\x04\x12\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03H\x04\t\n\
    \x0c\n\x05\x04\x03\x02\x02\x01\x12\x03H\n\r\n\x0c\n\x05\x04\x03\x02\x02\
    \x03\x12\x03H\x10\x11\n\x0b\n\x04\x04\x03\x02\x03\x12\x03I\x04\x16\n\x0c\
    \n\x05\x04\x03\x02\x03\x05\x12\x03I\x04\t\n\x0c\n\x05\x04\x03\x02\x03\
    \x01\x12\x03I\n\x11\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03I\x14\x15\n\n\
    \n\x02\x04\x04\x12\x04L\0S\x01\n\n\n\x03\x04\x04\x01\x12\x03L\x08\x16\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x03M\x04\x15\n\x0c\n\x05\x04\x04\x02\0\x05\
    \x12\x03M\x04\t\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03M\n\x10\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x03M\x13\x14\n\x0b\n\x04\x04\x04\x02\x01\x12\x03N\
    \x04*\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03N\x04\x18\n\x0c\n\x05\x04\
    \x04\x02\x01\x01\x12\x03N\x19%\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03N(\
    )\n\x0b\n\x04\x04\x04\x02\x02\x12\x03O\x04%\n\x0c\n\x05\x04\x04\x02\x02\
    \x06\x12\x03O\x04\x18\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03O\x19\x20\n\
    \x0c\n\x05\x04\x04\x02\x02\x03\x12\x03O#$\n\x0b\n\x04\x04\x04\x02\x03\
    \x12\x03P\x04'\n\x0c\n\x05\x04\x04\x02\x03\x06\x12\x03P\x04\x18\n\x0c\n\
    \x05\x04\x04\x02\x03\x01\x12\x03P\x19\"\n\x0c\n\x05\x04\x04\x02\x03\x03\
    \x12\x03P%&\n\x0b\n\x04\x04\x04\x02\x04\x12\x03Q\x04&\n\x0c\n\x05\x04\
    \x04\x02\x04\x06\x12\x03Q\x04\x18\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\
    \x03Q\x19!\n\x0c\n\x05\x04\x04\x02\x04\x03\x12\x03Q$%\n\x0b\n\x04\x04\
    \x04\x02\x05\x12\x03R\x041\n\x0c\n\x05\x04\x04\x02\x05\x04\x12\x03R\x04\
    \x0c\n\x0c\n\x05\x04\x04\x02\x05\x06\x12\x03R\r\"\n\x0c\n\x05\x04\x04\
    \x02\x05\x01\x12\x03R#,\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03R/0\n\n\n\
    \x02\x04\x05\x12\x04U\0[\x01\n\n\n\x03\x04\x05\x01\x12\x03U\x08\x1d\n\
    \x0b\n\x04\x04\x05\x02\0\x12\x03V\x04*\n\x0c\n\x05\x04\x05\x02\0\x06\x12\
    \x03V\x04\x18\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03V\x19%\n\x0c\n\x05\
    \x04\x05\x02\0\x03\x12\x03V()\n\x0b\n\x04\x04\x05\x02\x01\x12\x03W\x04%\
    \n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x03W\x04\x18\n\x0c\n\x05\x04\x05\
    \x02\x01\x01\x12\x03W\x19\x20\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03W#$\
    \n\x0b\n\x04\x04\x05\x02\x02\x12\x03X\x04'\n\x0c\n\x05\x04\x05\x02\x02\
    \x06\x12\x03X\x04\x18\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03X\x19\"\n\
    \x0c\n\x05\x04\x05\x02\x02\x03\x12\x03X%&\n\x0b\n\x04\x04\x05\x02\x03\
    \x12\x03Y\x04&\n\x0c\n\x05\x04\x05\x02\x03\x06\x12\x03Y\x04\x18\n\x0c\n\
    \x05\x04\x05\x02\x03\x01\x12\x03Y\x19!\n\x0c\n\x05\x04\x05\x02\x03\x03\
    \x12\x03Y$%\n\x0b\n\x04\x04\x05\x02\x04\x12\x03Z\x04\x16\n\x0c\n\x05\x04\
    \x05\x02\x04\x05\x12\x03Z\x04\t\n\x0c\n\x05\x04\x05\x02\x04\x01\x12\x03Z\
    \n\x11\n\x0c\n\x05\x04\x05\x02\x04\x03\x12\x03Z\x14\x15\n\n\n\x02\x04\
    \x06\x12\x04]\0_\x01\n\n\n\x03\x04\x06\x01\x12\x03]\x08\x16\n\x0b\n\x04\
    \x04\x06\x02\0\x12\x03^\x04\x17\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03^\
    \x04\n\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03^\x0b\x12\n\x0c\n\x05\x04\
    \x06\x02\0\x03\x12\x03^\x15\x16\n\n\n\x02\x04\x07\x12\x04a\0e\x01\n\n\n\
    \x03\x04\x07\x01\x12\x03a\x08\x17\n\x0b\n\x04\x04\x07\x02\0\x12\x03b\x04\
    \x13\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03b\x04\t\n\x0c\n\x05\x04\x07\
    \x02\0\x01\x12\x03b\n\x0e\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03b\x11\x12\
    \n\x0b\n\x04\x04\x07\x02\x01\x12\x03c\x04\x17\n\x0c\n\x05\x04\x07\x02\
    \x01\x05\x12\x03c\x04\n\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03c\x0b\x12\
    \n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03c\x15\x16\n\x0b\n\x04\x04\x07\
    \x02\x02\x12\x03d\x04\x19\n\x0c\n\x05\x04\x07\x02\x02\x06\x12\x03d\x04\
    \x0b\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03d\x0c\x14\n\x0c\n\x05\x04\
    \x07\x02\x02\x03\x12\x03d\x17\x18\n\n\n\x02\x04\x08\x12\x04g\0i\x01\n\n\
    \n\x03\x04\x08\x01\x12\x03g\x08\x17\n\x0b\n\x04\x04\x08\x02\0\x12\x03h\
    \x04\x20\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x03h\x04\x0c\n\x0c\n\x05\x04\
    \x08\x02\0\x05\x12\x03h\r\x13\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03h\x14\
    \x1b\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03h\x1e\x1f\n\n\n\x02\x04\t\x12\
    \x04k\0o\x01\n\n\n\x03\x04\t\x01\x12\x03k\x08\x18\n\x0b\n\x04\x04\t\x02\
    \0\x12\x03l\x04\x13\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03l\x04\t\n\x0c\n\
    \x05\x04\t\x02\0\x01\x12\x03l\n\x0e\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03l\
    \x11\x12\n\x0b\n\x04\x04\t\x02\x01\x12\x03m\x04\x17\n\x0c\n\x05\x04\t\
    \x02\x01\x05\x12\x03m\x04\n\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03m\x0b\
    \x12\n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03m\x15\x16\n\x0b\n\x04\x04\t\
    \x02\x02\x12\x03n\x04\"\n\x0c\n\x05\x04\t\x02\x02\x04\x12\x03n\x04\x0c\n\
    \x0c\n\x05\x04\t\x02\x02\x06\x12\x03n\r\x14\n\x0c\n\x05\x04\t\x02\x02\
    \x01\x12\x03n\x15\x1d\n\x0c\n\x05\x04\t\x02\x02\x03\x12\x03n\x20!\n\n\n\
    \x02\x04\n\x12\x04q\0v\x01\n\n\n\x03\x04\n\x01\x12\x03q\x08\"\n\x0b\n\
    \x04\x04\n\x02\0\x12\x03r\x04\x1c\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03r\
    \x04\n\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03r\x0b\x17\n\x0c\n\x05\x04\n\
    \x02\0\x03\x12\x03r\x1a\x1b\n\x0b\n\x04\x04\n\x02\x01\x12\x03s\x04\x16\n\
    \x0c\n\x05\x04\n\x02\x01\x05\x12\x03s\x04\n\n\x0c\n\x05\x04\n\x02\x01\
    \x01\x12\x03s\x0b\x11\n\x0c\n\x05\x04\n\x02\x01\x03\x12\x03s\x14\x15\n\
    \x0b\n\x04\x04\n\x02\x02\x12\x03t\x04\x13\n\x0c\n\x05\x04\n\x02\x02\x05\
    \x12\x03t\x04\t\n\x0c\n\x05\x04\n\x02\x02\x01\x12\x03t\n\x0e\n\x0c\n\x05\
    \x04\n\x02\x02\x03\x12\x03t\x11\x12\n\x0b\n\x04\x04\n\x02\x03\x12\x03u\
    \x04\x17\n\x0c\n\x05\x04\n\x02\x03\x05\x12\x03u\x04\n\n\x0c\n\x05\x04\n\
    \x02\x03\x01\x12\x03u\x0b\x12\n\x0c\n\x05\x04\n\x02\x03\x03\x12\x03u\x15\
    \x16\n\n\n\x02\x04\x0b\x12\x04x\0|\x01\n\n\n\x03\x04\x0b\x01\x12\x03x\
    \x08#\n\x0b\n\x04\x04\x0b\x02\0\x12\x03y\x04\x13\n\x0c\n\x05\x04\x0b\x02\
    \0\x05\x12\x03y\x04\t\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\x03y\n\x0e\n\x0c\
    \n\x05\x04\x0b\x02\0\x03\x12\x03y\x11\x12\n\x0b\n\x04\x04\x0b\x02\x01\
    \x12\x03z\x04\x17\n\x0c\n\x05\x04\x0b\x02\x01\x05\x12\x03z\x04\n\n\x0c\n\
    \x05\x04\x0b\x02\x01\x01\x12\x03z\x0b\x12\n\x0c\n\x05\x04\x0b\x02\x01\
    \x03\x12\x03z\x15\x16\n\x0b\n\x04\x04\x0b\x02\x02\x12\x03{\x04\x1d\n\x0c\
    \n\x05\x04\x0b\x02\x02\x06\x12\x03{\x04\x0f\n\x0c\n\x05\x04\x0b\x02\x02\
    \x01\x12\x03{\x10\x18\n\x0c\n\x05\x04\x0b\x02\x02\x03\x12\x03{\x1b\x1c\n\
    \x0b\n\x02\x04\x0c\x12\x05~\0\x85\x01\x01\n\n\n\x03\x04\x0c\x01\x12\x03~\
    \x08\x1c\n\x0b\n\x04\x04\x0c\x02\0\x12\x03\x7f\x04\x16\n\x0c\n\x05\x04\
    \x0c\x02\0\x05\x12\x03\x7f\x04\n\n\x0c\n\x05\x04\x0c\x02\0\x01\x12\x03\
    \x7f\x0b\x11\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03\x7f\x14\x15\n\x0c\n\
    \x04\x04\x0c\x02\x01\x12\x04\x80\x01\x04\x13\n\r\n\x05\x04\x0c\x02\x01\
    \x05\x12\x04\x80\x01\x04\t\n\r\n\x05\x04\x0c\x02\x01\x01\x12\x04\x80\x01\
    \n\x0e\n\r\n\x05\x04\x0c\x02\x01\x03\x12\x04\x80\x01\x11\x12\n\x0c\n\x04\
    \x04\x0c\x02\x02\x12\x04\x81\x01\x04\x14\n\r\n\x05\x04\x0c\x02\x02\x05\
    \x12\x04\x81\x01\x04\t\n\r\n\x05\x04\x0c\x02\x02\x01\x12\x04\x81\x01\n\
    \x0f\n\r\n\x05\x04\x0c\x02\x02\x03\x12\x04\x81\x01\x12\x13\n\x0c\n\x04\
    \x04\x0c\x02\x03\x12\x04\x82\x01\x04\x13\n\r\n\x05\x04\x0c\x02\x03\x05\
    \x12\x04\x82\x01\x04\t\n\r\n\x05\x04\x0c\x02\x03\x01\x12\x04\x82\x01\n\
    \x0e\n\r\n\x05\x04\x0c\x02\x03\x03\x12\x04\x82\x01\x11\x12\n\x0c\n\x04\
    \x04\x0c\x02\x04\x12\x04\x83\x01\x04\x11\n\r\n\x05\x04\x0c\x02\x04\x05\
    \x12\x04\x83\x01\x04\t\n\r\n\x05\x04\x0c\x02\x04\x01\x12\x04\x83\x01\n\
    \x0c\n\r\n\x05\x04\x0c\x02\x04\x03\x12\x04\x83\x01\x0f\x10\n\x0c\n\x04\
    \x04\x0c\x02\x05\x12\x04\x84\x01\x04\x17\n\r\n\x05\x04\x0c\x02\x05\x05\
    \x12\x04\x84\x01\x04\n\n\r\n\x05\x04\x0c\x02\x05\x01\x12\x04\x84\x01\x0b\
    \x12\n\r\n\x05\x04\x0c\x02\x05\x03\x12\x04\x84\x01\x15\x16\n\x0c\n\x02\
    \x04\r\x12\x06\x87\x01\0\x8b\x01\x01\n\x0b\n\x03\x04\r\x01\x12\x04\x87\
    \x01\x08\x1d\n\x0c\n\x04\x04\r\x02\0\x12\x04\x88\x01\x04\x13\n\r\n\x05\
    \x04\r\x02\0\x05\x12\x04\x88\x01\x04\t\n\r\n\x05\x04\r\x02\0\x01\x12\x04\
    \x88\x01\n\x0e\n\r\n\x05\x04\r\x02\0\x03\x12\x04\x88\x01\x11\x12\n\x0c\n\
    \x04\x04\r\x02\x01\x12\x04\x89\x01\x04\x17\n\r\n\x05\x04\r\x02\x01\x05\
    \x12\x04\x89\x01\x04\n\n\r\n\x05\x04\r\x02\x01\x01\x12\x04\x89\x01\x0b\
    \x12\n\r\n\x05\x04\r\x02\x01\x03\x12\x04\x89\x01\x15\x16\n\x0c\n\x04\x04\
    \r\x02\x02\x12\x04\x8a\x01\x04\x1d\n\r\n\x05\x04\r\x02\x02\x06\x12\x04\
    \x8a\x01\x04\x0f\n\r\n\x05\x04\r\x02\x02\x01\x12\x04\x8a\x01\x10\x18\n\r\
    \n\x05\x04\r\x02\x02\x03\x12\x04\x8a\x01\x1b\x1c\n\x0c\n\x02\x04\x0e\x12\
    \x06\x8d\x01\0\x91\x01\x01\n\x0b\n\x03\x04\x0e\x01\x12\x04\x8d\x01\x08!\
    \n\x0c\n\x04\x04\x0e\x02\0\x12\x04\x8e\x01\x04\x1c\n\r\n\x05\x04\x0e\x02\
    \0\x05\x12\x04\x8e\x01\x04\n\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\x8e\x01\
    \x0b\x17\n\r\n\x05\x04\x0e\x02\0\x03\x12\x04\x8e\x01\x1a\x1b\n\x0c\n\x04\
    \x04\x0e\x02\x01\x12\x04\x8f\x01\x04\x16\n\r\n\x05\x04\x0e\x02\x01\x05\
    \x12\x04\x8f\x01\x04\n\n\r\n\x05\x04\x0e\x02\x01\x01\x12\x04\x8f\x01\x0b\
    \x11\n\r\n\x05\x04\x0e\x02\x01\x03\x12\x04\x8f\x01\x14\x15\n\x0c\n\x04\
    \x04\x0e\x02\x02\x12\x04\x90\x01\x04\x17\n\r\n\x05\x04\x0e\x02\x02\x05\
    \x12\x04\x90\x01\x04\n\n\r\n\x05\x04\x0e\x02\x02\x01\x12\x04\x90\x01\x0b\
    \x12\n\r\n\x05\x04\x0e\x02\x02\x03\x12\x04\x90\x01\x15\x16\n\x0c\n\x02\
    \x04\x0f\x12\x06\x93\x01\0\x97\x01\x01\n\x0b\n\x03\x04\x0f\x01\x12\x04\
    \x93\x01\x08\"\n\x0c\n\x04\x04\x0f\x02\0\x12\x04\x94\x01\x04\x13\n\r\n\
    \x05\x04\x0f\x02\0\x05\x12\x04\x94\x01\x04\t\n\r\n\x05\x04\x0f\x02\0\x01\
    \x12\x04\x94\x01\n\x0e\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\x94\x01\x11\
    \x12\n\x0c\n\x04\x04\x0f\x02\x01\x12\x04\x95\x01\x04\x17\n\r\n\x05\x04\
    \x0f\x02\x01\x05\x12\x04\x95\x01\x04\n\n\r\n\x05\x04\x0f\x02\x01\x01\x12\
    \x04\x95\x01\x0b\x12\n\r\n\x05\x04\x0f\x02\x01\x03\x12\x04\x95\x01\x15\
    \x16\n\x0c\n\x04\x04\x0f\x02\x02\x12\x04\x96\x01\x04\x19\n\r\n\x05\x04\
    \x0f\x02\x02\x06\x12\x04\x96\x01\x04\x0b\n\r\n\x05\x04\x0f\x02\x02\x01\
    \x12\x04\x96\x01\x0c\x14\n\r\n\x05\x04\x0f\x02\x02\x03\x12\x04\x96\x01\
    \x17\x18\n\x0c\n\x02\x04\x10\x12\x06\x99\x01\0\xa3\x01\x01\n\x0b\n\x03\
    \x04\x10\x01\x12\x04\x99\x01\x08\x1c\n\x0c\n\x04\x04\x10\x02\0\x12\x04\
    \x9a\x01\x04\x17\n\r\n\x05\x04\x10\x02\0\x05\x12\x04\x9a\x01\x04\n\n\r\n\
    \x05\x04\x10\x02\0\x01\x12\x04\x9a\x01\x0b\x12\n\r\n\x05\x04\x10\x02\0\
    \x03\x12\x04\x9a\x01\x15\x16\n\x0c\n\x04\x04\x10\x02\x01\x12\x04\x9b\x01\
    \x04\x1c\n\r\n\x05\x04\x10\x02\x01\x05\x12\x04\x9b\x01\x04\n\n\r\n\x05\
    \x04\x10\x02\x01\x01\x12\x04\x9b\x01\x0b\x17\n\r\n\x05\x04\x10\x02\x01\
    \x03\x12\x04\x9b\x01\x1a\x1b\n\x0c\n\x04\x04\x10\x02\x02\x12\x04\x9c\x01\
    \x04\x16\n\r\n\x05\x04\x10\x02\x02\x05\x12\x04\x9c\x01\x04\n\n\r\n\x05\
    \x04\x10\x02\x02\x01\x12\x04\x9c\x01\x0b\x11\n\r\n\x05\x04\x10\x02\x02\
    \x03\x12\x04\x9c\x01\x14\x15\n\x0c\n\x04\x04\x10\x02\x03\x12\x04\x9d\x01\
    \x04\x18\n\r\n\x05\x04\x10\x02\x03\x05\x12\x04\x9d\x01\x04\n\n\r\n\x05\
    \x04\x10\x02\x03\x01\x12\x04\x9d\x01\x0b\x13\n\r\n\x05\x04\x10\x02\x03\
    \x03\x12\x04\x9d\x01\x16\x17\n\x0c\n\x04\x04\x10\x02\x04\x12\x04\x9e\x01\
    \x04\x18\n\r\n\x05\x04\x10\x02\x04\x05\x12\x04\x9e\x01\x04\n\n\r\n\x05\
    \x04\x10\x02\x04\x01\x12\x04\x9e\x01\x0b\x13\n\r\n\x05\x04\x10\x02\x04\
    \x03\x12\x04\x9e\x01\x16\x17\n\x0c\n\x04\x04\x10\x02\x05\x12\x04\x9f\x01\
    \x04\x16\n\r\n\x05\x04\x10\x02\x05\x05\x12\x04\x9f\x01\x04\n\n\r\n\x05\
    \x04\x10\x02\x05\x01\x12\x04\x9f\x01\x0b\x11\n\r\n\x05\x04\x10\x02\x05\
    \x03\x12\x04\x9f\x01\x14\x15\n\x0c\n\x04\x04\x10\x02\x06\x12\x04\xa0\x01\
    \x04\x1d\n\r\n\x05\x04\x10\x02\x06\x05\x12\x04\xa0\x01\x04\n\n\r\n\x05\
    \x04\x10\x02\x06\x01\x12\x04\xa0\x01\x0b\x18\n\r\n\x05\x04\x10\x02\x06\
    \x03\x12\x04\xa0\x01\x1b\x1c\n\x0c\n\x04\x04\x10\x02\x07\x12\x04\xa1\x01\
    \x04\x1b\n\r\n\x05\x04\x10\x02\x07\x05\x12\x04\xa1\x01\x04\n\n\r\n\x05\
    \x04\x10\x02\x07\x01\x12\x04\xa1\x01\x0b\x16\n\r\n\x05\x04\x10\x02\x07\
    \x03\x12\x04\xa1\x01\x19\x1a\n\x0c\n\x04\x04\x10\x02\x08\x12\x04\xa2\x01\
    \x04\x1e\n\r\n\x05\x04\x10\x02\x08\x05\x12\x04\xa2\x01\x04\n\n\r\n\x05\
    \x04\x10\x02\x08\x01\x12\x04\xa2\x01\x0b\x19\n\r\n\x05\x04\x10\x02\x08\
    \x03\x12\x04\xa2\x01\x1c\x1d\n\x0c\n\x02\x04\x11\x12\x06\xa5\x01\0\xa9\
    \x01\x01\n\x0b\n\x03\x04\x11\x01\x12\x04\xa5\x01\x08\x1d\n\x0c\n\x04\x04\
    \x11\x02\0\x12\x04\xa6\x01\x04\x13\n\r\n\x05\x04\x11\x02\0\x05\x12\x04\
    \xa6\x01\x04\t\n\r\n\x05\x04\x11\x02\0\x01\x12\x04\xa6\x01\n\x0e\n\r\n\
    \x05\x04\x11\x02\0\x03\x12\x04\xa6\x01\x11\x12\n\x0c\n\x04\x04\x11\x02\
    \x01\x12\x04\xa7\x01\x04\x17\n\r\n\x05\x04\x11\x02\x01\x05\x12\x04\xa7\
    \x01\x04\n\n\r\n\x05\x04\x11\x02\x01\x01\x12\x04\xa7\x01\x0b\x12\n\r\n\
    \x05\x04\x11\x02\x01\x03\x12\x04\xa7\x01\x15\x16\n\x0c\n\x04\x04\x11\x02\
    \x02\x12\x04\xa8\x01\x04\x19\n\r\n\x05\x04\x11\x02\x02\x06\x12\x04\xa8\
    \x01\x04\x0b\n\r\n\x05\x04\x11\x02\x02\x01\x12\x04\xa8\x01\x0c\x14\n\r\n\
    \x05\x04\x11\x02\x02\x03\x12\x04\xa8\x01\x17\x18\n\x0c\n\x02\x04\x12\x12\
    \x06\xab\x01\0\xad\x01\x01\n\x0b\n\x03\x04\x12\x01\x12\x04\xab\x01\x08\
    \x1d\n\x0c\n\x04\x04\x12\x02\0\x12\x04\xac\x01\x04\x17\n\r\n\x05\x04\x12\
    \x02\0\x05\x12\x04\xac\x01\x04\n\n\r\n\x05\x04\x12\x02\0\x01\x12\x04\xac\
    \x01\x0b\x12\n\r\n\x05\x04\x12\x02\0\x03\x12\x04\xac\x01\x15\x16\n\x0c\n\
    \x02\x04\x13\x12\x06\xaf\x01\0\xb3\x01\x01\n\x0b\n\x03\x04\x13\x01\x12\
    \x04\xaf\x01\x08\x1e\n\x0c\n\x04\x04\x13\x02\0\x12\x04\xb0\x01\x04\x13\n\
    \r\n\x05\x04\x13\x02\0\x05\x12\x04\xb0\x01\x04\t\n\r\n\x05\x04\x13\x02\0\
    \x01\x12\x04\xb0\x01\n\x0e\n\r\n\x05\x04\x13\x02\0\x03\x12\x04\xb0\x01\
    \x11\x12\n\x0c\n\x04\x04\x13\x02\x01\x12\x04\xb1\x01\x04\x17\n\r\n\x05\
    \x04\x13\x02\x01\x05\x12\x04\xb1\x01\x04\n\n\r\n\x05\x04\x13\x02\x01\x01\
    \x12\x04\xb1\x01\x0b\x12\n\r\n\x05\x04\x13\x02\x01\x03\x12\x04\xb1\x01\
    \x15\x16\n\x0c\n\x04\x04\x13\x02\x02\x12\x04\xb2\x01\x04\x20\n\r\n\x05\
    \x04\x13\x02\x02\x06\x12\x04\xb2\x01\x04\x12\n\r\n\x05\x04\x13\x02\x02\
    \x01\x12\x04\xb2\x01\x13\x1b\n\r\n\x05\x04\x13\x02\x02\x03\x12\x04\xb2\
    \x01\x1e\x1f\n\x0c\n\x02\x04\x14\x12\x06\xb5\x01\0\xb8\x01\x01\n\x0b\n\
    \x03\x04\x14\x01\x12\x04\xb5\x01\x08\x0f\n\x0c\n\x04\x04\x14\x02\0\x12\
    \x04\xb6\x01\x04\x1c\n\r\n\x05\x04\x14\x02\0\x05\x12\x04\xb6\x01\x04\n\n\
    \r\n\x05\x04\x14\x02\0\x01\x12\x04\xb6\x01\x0b\x17\n\r\n\x05\x04\x14\x02\
    \0\x03\x12\x04\xb6\x01\x1a\x1b\n\x0c\n\x04\x04\x14\x02\x01\x12\x04\xb7\
    \x01\x04\x15\n\r\n\x05\x04\x14\x02\x01\x05\x12\x04\xb7\x01\x04\t\n\r\n\
    \x05\x04\x14\x02\x01\x01\x12\x04\xb7\x01\n\x10\n\r\n\x05\x04\x14\x02\x01\
    \x03\x12\x04\xb7\x01\x13\x14\n\x0c\n\x02\x04\x15\x12\x06\xba\x01\0\xbd\
    \x01\x01\n\x0b\n\x03\x04\x15\x01\x12\x04\xba\x01\x08\x1d\n\x0c\n\x04\x04\
    \x15\x02\0\x12\x04\xbb\x01\x04\x1c\n\r\n\x05\x04\x15\x02\0\x05\x12\x04\
    \xbb\x01\x04\n\n\r\n\x05\x04\x15\x02\0\x01\x12\x04\xbb\x01\x0b\x17\n\r\n\
    \x05\x04\x15\x02\0\x03\x12\x04\xbb\x01\x1a\x1b\n\x0c\n\x04\x04\x15\x02\
    \x01\x12\x04\xbc\x01\x04\x16\n\r\n\x05\x04\x15\x02\x01\x05\x12\x04\xbc\
    \x01\x04\n\n\r\n\x05\x04\x15\x02\x01\x01\x12\x04\xbc\x01\x0b\x11\n\r\n\
    \x05\x04\x15\x02\x01\x03\x12\x04\xbc\x01\x14\x15\n\x0c\n\x02\x04\x16\x12\
    \x06\xbf\x01\0\xc3\x01\x01\n\x0b\n\x03\x04\x16\x01\x12\x04\xbf\x01\x08\
    \x1e\n\x0c\n\x04\x04\x16\x02\0\x12\x04\xc0\x01\x04\x13\n\r\n\x05\x04\x16\
    \x02\0\x05\x12\x04\xc0\x01\x04\t\n\r\n\x05\x04\x16\x02\0\x01\x12\x04\xc0\
    \x01\n\x0e\n\r\n\x05\x04\x16\x02\0\x03\x12\x04\xc0\x01\x11\x12\n\x0c\n\
    \x04\x04\x16\x02\x01\x12\x04\xc1\x01\x04\x17\n\r\n\x05\x04\x16\x02\x01\
    \x05\x12\x04\xc1\x01\x04\n\n\r\n\x05\x04\x16\x02\x01\x01\x12\x04\xc1\x01\
    \x0b\x12\n\r\n\x05\x04\x16\x02\x01\x03\x12\x04\xc1\x01\x15\x16\n\x0c\n\
    \x04\x04\x16\x02\x02\x12\x04\xc2\x01\x04\x19\n\r\n\x05\x04\x16\x02\x02\
    \x06\x12\x04\xc2\x01\x04\x0b\n\r\n\x05\x04\x16\x02\x02\x01\x12\x04\xc2\
    \x01\x0c\x14\n\r\n\x05\x04\x16\x02\x02\x03\x12\x04\xc2\x01\x17\x18b\x06p\
    roto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
