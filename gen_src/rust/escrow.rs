// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `v1/escrow/escrow.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct Info {
    // message fields
    pub name: ::std::string::String,
    pub tel: ::std::string::String,
    pub addr: ::std::string::String,
    pub postcode: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Info {
    fn default() -> &'a Info {
        <Info as ::protobuf::Message>::default_instance()
    }
}

impl Info {
    pub fn new() -> Info {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Info| { &m.name },
            |m: &mut Info| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tel",
            |m: &Info| { &m.tel },
            |m: &mut Info| { &mut m.tel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "addr",
            |m: &Info| { &m.addr },
            |m: &mut Info| { &mut m.addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "postcode",
            |m: &Info| { &m.postcode },
            |m: &mut Info| { &mut m.postcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Info>(
            "Info",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for Info {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.tel = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.addr = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.postcode = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.tel.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tel);
        }
        if !self.addr.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.addr);
        }
        if !self.postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.postcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.tel.is_empty() {
            os.write_string(2, &self.tel)?;
        }
        if !self.addr.is_empty() {
            os.write_string(3, &self.addr)?;
        }
        if !self.postcode.is_empty() {
            os.write_string(4, &self.postcode)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Info {
        Info::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static Info {
        static instance: Info = Info {
            name: ::std::string::String::new(),
            tel: ::std::string::String::new(),
            addr: ::std::string::String::new(),
            postcode: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for Info {
    fn clear(&mut self) {
        self.name.clear();
        self.tel.clear();
        self.addr.clear();
        self.postcode.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Info {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct Logis {
    // message fields
    pub company: ::std::string::String,
    pub invoice: ::std::string::String,
    pub sent_at: i32,
    pub applied_at: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Logis {
    fn default() -> &'a Logis {
        <Logis as ::protobuf::Message>::default_instance()
    }
}

impl Logis {
    pub fn new() -> Logis {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "company",
            |m: &Logis| { &m.company },
            |m: &mut Logis| { &mut m.company },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "invoice",
            |m: &Logis| { &m.invoice },
            |m: &mut Logis| { &mut m.invoice },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sent_at",
            |m: &Logis| { &m.sent_at },
            |m: &mut Logis| { &mut m.sent_at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "applied_at",
            |m: &Logis| { &m.applied_at },
            |m: &mut Logis| { &mut m.applied_at },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Logis>(
            "Logis",
            1,
            fields,
        )
    }
}

impl ::protobuf::Message for Logis {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.company = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.invoice = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.sent_at = is.read_int32()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.applied_at = is.read_int32()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.company.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.company);
        }
        if !self.invoice.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.invoice);
        }
        if self.sent_at != 0 {
            my_size += ::protobuf::rt::value_size(3, self.sent_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.applied_at != 0 {
            my_size += ::protobuf::rt::value_size(4, self.applied_at, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.company.is_empty() {
            os.write_string(1, &self.company)?;
        }
        if !self.invoice.is_empty() {
            os.write_string(2, &self.invoice)?;
        }
        if self.sent_at != 0 {
            os.write_int32(3, self.sent_at)?;
        }
        if self.applied_at != 0 {
            os.write_int32(4, self.applied_at)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Logis {
        Logis::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 1)
    }

    fn default_instance() -> &'static Logis {
        static instance: Logis = Logis {
            company: ::std::string::String::new(),
            invoice: ::std::string::String::new(),
            sent_at: 0,
            applied_at: 0,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for Logis {
    fn clear(&mut self) {
        self.company.clear();
        self.invoice.clear();
        self.sent_at = 0;
        self.applied_at = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Logis {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Logis {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct EscrowRequest {
    // message fields
    pub imp_uid: ::std::string::String,
    pub sender: ::protobuf::MessageField<Info>,
    pub receiver: ::protobuf::MessageField<Info>,
    pub logis: ::protobuf::MessageField<Logis>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a EscrowRequest {
    fn default() -> &'a EscrowRequest {
        <EscrowRequest as ::protobuf::Message>::default_instance()
    }
}

impl EscrowRequest {
    pub fn new() -> EscrowRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "imp_uid",
            |m: &EscrowRequest| { &m.imp_uid },
            |m: &mut EscrowRequest| { &mut m.imp_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Info>(
            "sender",
            |m: &EscrowRequest| { &m.sender },
            |m: &mut EscrowRequest| { &mut m.sender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Info>(
            "receiver",
            |m: &EscrowRequest| { &m.receiver },
            |m: &mut EscrowRequest| { &mut m.receiver },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Logis>(
            "logis",
            |m: &EscrowRequest| { &m.logis },
            |m: &mut EscrowRequest| { &mut m.logis },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EscrowRequest>(
            "EscrowRequest",
            2,
            fields,
        )
    }
}

impl ::protobuf::Message for EscrowRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.sender {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.receiver {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.logis {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.imp_uid = is.read_string()?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.sender)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.receiver)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.logis)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.imp_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.imp_uid);
        }
        if let Some(v) = self.sender.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.receiver.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.logis.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.imp_uid.is_empty() {
            os.write_string(1, &self.imp_uid)?;
        }
        if let Some(v) = self.sender.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.receiver.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.logis.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> EscrowRequest {
        EscrowRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 2)
    }

    fn default_instance() -> &'static EscrowRequest {
        static instance: EscrowRequest = EscrowRequest {
            imp_uid: ::std::string::String::new(),
            sender: ::protobuf::MessageField::none(),
            receiver: ::protobuf::MessageField::none(),
            logis: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for EscrowRequest {
    fn clear(&mut self) {
        self.imp_uid.clear();
        self.sender.clear();
        self.receiver.clear();
        self.logis.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EscrowRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EscrowRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct EscrowResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<Logis>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a EscrowResponse {
    fn default() -> &'a EscrowResponse {
        <EscrowResponse as ::protobuf::Message>::default_instance()
    }
}

impl EscrowResponse {
    pub fn new() -> EscrowResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &EscrowResponse| { &m.code },
            |m: &mut EscrowResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &EscrowResponse| { &m.message },
            |m: &mut EscrowResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Logis>(
            "response",
            |m: &EscrowResponse| { &m.response },
            |m: &mut EscrowResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EscrowResponse>(
            "EscrowResponse",
            3,
            fields,
        )
    }
}

impl ::protobuf::Message for EscrowResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> EscrowResponse {
        EscrowResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 3)
    }

    fn default_instance() -> &'static EscrowResponse {
        static instance: EscrowResponse = EscrowResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for EscrowResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EscrowResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EscrowResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16v1/escrow/escrow.proto\x12\x06escrow\x1a\x1cgoogle/api/annotations\
    .proto\"\\\n\x04Info\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\
    \x10\n\x03tel\x18\x02\x20\x01(\tR\x03tel\x12\x12\n\x04addr\x18\x03\x20\
    \x01(\tR\x04addr\x12\x1a\n\x08postcode\x18\x04\x20\x01(\tR\x08postcode\"\
    s\n\x05Logis\x12\x18\n\x07company\x18\x01\x20\x01(\tR\x07company\x12\x18\
    \n\x07invoice\x18\x02\x20\x01(\tR\x07invoice\x12\x17\n\x07sent_at\x18\
    \x03\x20\x01(\x05R\x06sentAt\x12\x1d\n\napplied_at\x18\x04\x20\x01(\x05R\
    \tappliedAt\"\x9d\x01\n\rEscrowRequest\x12\x17\n\x07imp_uid\x18\x01\x20\
    \x01(\tR\x06impUid\x12$\n\x06sender\x18\x02\x20\x01(\x0b2\x0c.escrow.Inf\
    oR\x06sender\x12(\n\x08receiver\x18\x03\x20\x01(\x0b2\x0c.escrow.InfoR\
    \x08receiver\x12#\n\x05logis\x18\x04\x20\x01(\x0b2\r.escrow.LogisR\x05lo\
    gis\"i\n\x0eEscrowResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04co\
    de\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\x12)\n\x08respons\
    e\x18\x03\x20\x01(\x0b2\r.escrow.LogisR\x08response2\xe6\x01\n\rEscrowSe\
    rvice\x12j\n\rEscrowPostRPC\x12\x15.escrow.EscrowRequest\x1a\x16.escrow.\
    EscrowResponse\"*\x82\xd3\xe4\x93\x02$\"\x1f/api/v1/escrows/logis/{imp_u\
    id}:\x01*\x12i\n\x0cEscrowPutRPC\x12\x15.escrow.EscrowRequest\x1a\x16.es\
    crow.EscrowResponse\"*\x82\xd3\xe4\x93\x02$\x1a\x1f/api/v1/escrows/logis\
    /{imp_uid}:\x01*B3Z1github.com/iamport/interface/gen_src/go/v1/escrowJ\
    \xa1\t\n\x06\x12\x04\0\0/\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x01\0\x0f\n\t\n\x02\x03\0\x12\x03\x03\0&\n\x08\n\x01\
    \x08\x12\x03\x04\0H\n\t\n\x02\x08\x0b\x12\x03\x04\0H\n\n\n\x02\x06\0\x12\
    \x04\x06\0\x14\x01\n\n\n\x03\x06\0\x01\x12\x03\x06\x08\x15\n\x0c\n\x04\
    \x06\0\x02\0\x12\x04\x07\x04\x0c\x05\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\
    \x07\x08\x15\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x07\x16#\n\x0c\n\x05\
    \x06\0\x02\0\x03\x12\x03\x07.<\n\r\n\x05\x06\0\x02\0\x04\x12\x04\x08\x08\
    \x0b\n\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04\x08\x08\x0b\n\n\
    \x0c\n\x04\x06\0\x02\x01\x12\x04\x0e\x04\x13\x05\n\x0c\n\x05\x06\0\x02\
    \x01\x01\x12\x03\x0e\x08\x14\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x0e\
    \x15\"\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x0e-;\n\r\n\x05\x06\0\x02\
    \x01\x04\x12\x04\x0f\x08\x12\n\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\
    \x12\x04\x0f\x08\x12\n\n\n\n\x02\x04\0\x12\x04\x16\0\x1b\x01\n\n\n\x03\
    \x04\0\x01\x12\x03\x16\x08\x0c\n\x0b\n\x04\x04\0\x02\0\x12\x03\x17\x04\
    \x14\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x17\x04\n\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03\x17\x0b\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x17\x12\
    \x13\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x18\x04\x13\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x18\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x18\x0b\
    \x0e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x18\x11\x12\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\x19\x04\x14\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x19\
    \x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x19\x0b\x0f\n\x0c\n\x05\x04\
    \0\x02\x02\x03\x12\x03\x19\x12\x13\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x1a\
    \x04\x18\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x1a\x04\n\n\x0c\n\x05\x04\
    \0\x02\x03\x01\x12\x03\x1a\x0b\x13\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\
    \x1a\x16\x17\n\n\n\x02\x04\x01\x12\x04\x1d\0\"\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03\x1d\x08\r\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1e\x04\x17\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\x1e\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x1e\x0b\x12\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1e\x15\x16\n\
    \x0b\n\x04\x04\x01\x02\x01\x12\x03\x1f\x04\x17\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03\x1f\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1f\
    \x0b\x12\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1f\x15\x16\n\x0b\n\x04\
    \x04\x01\x02\x02\x12\x03\x20\x04\x15\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\
    \x03\x20\x04\t\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x20\n\x11\n\x0c\n\
    \x05\x04\x01\x02\x02\x03\x12\x03\x20\x13\x14\n\x0b\n\x04\x04\x01\x02\x03\
    \x12\x03!\x04\x19\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03!\x04\t\n\x0c\n\
    \x05\x04\x01\x02\x03\x01\x12\x03!\n\x14\n\x0c\n\x05\x04\x01\x02\x03\x03\
    \x12\x03!\x17\x18\n\n\n\x02\x04\x02\x12\x04$\0)\x01\n\n\n\x03\x04\x02\
    \x01\x12\x03$\x08\x15\n\x0b\n\x04\x04\x02\x02\0\x12\x03%\x04\x17\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03%\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03%\x0b\x12\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03%\x15\x16\n\x0b\n\x04\
    \x04\x02\x02\x01\x12\x03&\x04\x14\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\
    \x03&\x04\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03&\t\x0f\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03&\x12\x13\n\x0b\n\x04\x04\x02\x02\x02\x12\
    \x03'\x04\x16\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03'\x04\x08\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03'\t\x11\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03'\x14\x15\n\x0b\n\x04\x04\x02\x02\x03\x12\x03(\x04\x14\n\x0c\n\
    \x05\x04\x02\x02\x03\x06\x12\x03(\x04\t\n\x0c\n\x05\x04\x02\x02\x03\x01\
    \x12\x03(\n\x0f\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03(\x12\x13\n\n\n\
    \x02\x04\x03\x12\x04+\0/\x01\n\n\n\x03\x04\x03\x01\x12\x03+\x08\x16\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03,\x04\x13\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03,\x04\t\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03,\n\x0e\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03,\x11\x12\n\x0b\n\x04\x04\x03\x02\x01\x12\x03-\
    \x04\x17\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03-\x04\n\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x03-\x0b\x12\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03-\x15\x16\n\x0b\n\x04\x04\x03\x02\x02\x12\x03.\x04\x17\n\x0c\n\x05\
    \x04\x03\x02\x02\x06\x12\x03.\x04\t\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\
    \x03.\n\x12\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03.\x15\x16b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(super::annotations::file_descriptor());
        let mut messages = ::std::vec::Vec::new();
        messages.push(Info::generated_message_descriptor_data());
        messages.push(Logis::generated_message_descriptor_data());
        messages.push(EscrowRequest::generated_message_descriptor_data());
        messages.push(EscrowResponse::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
