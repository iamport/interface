// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `escrow/escrow.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct Info {
    // message fields
    pub name: ::std::string::String,
    pub tel: ::std::string::String,
    pub addr: ::std::string::String,
    pub postcode: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Info {
    fn default() -> &'a Info {
        <Info as ::protobuf::Message>::default_instance()
    }
}

impl Info {
    pub fn new() -> Info {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string tel = 2;


    pub fn get_tel(&self) -> &str {
        &self.tel
    }
    pub fn clear_tel(&mut self) {
        self.tel.clear();
    }

    // Param is passed by value, moved
    pub fn set_tel(&mut self, v: ::std::string::String) {
        self.tel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tel(&mut self) -> &mut ::std::string::String {
        &mut self.tel
    }

    // Take field
    pub fn take_tel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tel, ::std::string::String::new())
    }

    // string addr = 3;


    pub fn get_addr(&self) -> &str {
        &self.addr
    }
    pub fn clear_addr(&mut self) {
        self.addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_addr(&mut self, v: ::std::string::String) {
        self.addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr(&mut self) -> &mut ::std::string::String {
        &mut self.addr
    }

    // Take field
    pub fn take_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.addr, ::std::string::String::new())
    }

    // string postcode = 4;


    pub fn get_postcode(&self) -> &str {
        &self.postcode
    }
    pub fn clear_postcode(&mut self) {
        self.postcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_postcode(&mut self, v: ::std::string::String) {
        self.postcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_postcode(&mut self) -> &mut ::std::string::String {
        &mut self.postcode
    }

    // Take field
    pub fn take_postcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.postcode, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Info {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tel)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.addr)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.postcode)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.tel.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tel);
        }
        if !self.addr.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.addr);
        }
        if !self.postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.postcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.tel.is_empty() {
            os.write_string(2, &self.tel)?;
        }
        if !self.addr.is_empty() {
            os.write_string(3, &self.addr)?;
        }
        if !self.postcode.is_empty() {
            os.write_string(4, &self.postcode)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Info {
        Info::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Info| { &m.name },
                |m: &mut Info| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tel",
                |m: &Info| { &m.tel },
                |m: &mut Info| { &mut m.tel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "addr",
                |m: &Info| { &m.addr },
                |m: &mut Info| { &mut m.addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "postcode",
                |m: &Info| { &m.postcode },
                |m: &mut Info| { &mut m.postcode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Info>(
                "Info",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Info {
        static instance: ::protobuf::rt::LazyV2<Info> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Info::new)
    }
}

impl ::protobuf::Clear for Info {
    fn clear(&mut self) {
        self.name.clear();
        self.tel.clear();
        self.addr.clear();
        self.postcode.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Info {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Logis {
    // message fields
    pub company: ::std::string::String,
    pub invoice: ::std::string::String,
    pub sent_at: i32,
    pub applied_at: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Logis {
    fn default() -> &'a Logis {
        <Logis as ::protobuf::Message>::default_instance()
    }
}

impl Logis {
    pub fn new() -> Logis {
        ::std::default::Default::default()
    }

    // string company = 1;


    pub fn get_company(&self) -> &str {
        &self.company
    }
    pub fn clear_company(&mut self) {
        self.company.clear();
    }

    // Param is passed by value, moved
    pub fn set_company(&mut self, v: ::std::string::String) {
        self.company = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_company(&mut self) -> &mut ::std::string::String {
        &mut self.company
    }

    // Take field
    pub fn take_company(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.company, ::std::string::String::new())
    }

    // string invoice = 2;


    pub fn get_invoice(&self) -> &str {
        &self.invoice
    }
    pub fn clear_invoice(&mut self) {
        self.invoice.clear();
    }

    // Param is passed by value, moved
    pub fn set_invoice(&mut self, v: ::std::string::String) {
        self.invoice = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invoice(&mut self) -> &mut ::std::string::String {
        &mut self.invoice
    }

    // Take field
    pub fn take_invoice(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.invoice, ::std::string::String::new())
    }

    // int32 sent_at = 3;


    pub fn get_sent_at(&self) -> i32 {
        self.sent_at
    }
    pub fn clear_sent_at(&mut self) {
        self.sent_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_sent_at(&mut self, v: i32) {
        self.sent_at = v;
    }

    // int32 applied_at = 4;


    pub fn get_applied_at(&self) -> i32 {
        self.applied_at
    }
    pub fn clear_applied_at(&mut self) {
        self.applied_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_applied_at(&mut self, v: i32) {
        self.applied_at = v;
    }
}

impl ::protobuf::Message for Logis {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.company)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.invoice)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.sent_at = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.applied_at = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.company.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.company);
        }
        if !self.invoice.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.invoice);
        }
        if self.sent_at != 0 {
            my_size += ::protobuf::rt::value_size(3, self.sent_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.applied_at != 0 {
            my_size += ::protobuf::rt::value_size(4, self.applied_at, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.company.is_empty() {
            os.write_string(1, &self.company)?;
        }
        if !self.invoice.is_empty() {
            os.write_string(2, &self.invoice)?;
        }
        if self.sent_at != 0 {
            os.write_int32(3, self.sent_at)?;
        }
        if self.applied_at != 0 {
            os.write_int32(4, self.applied_at)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Logis {
        Logis::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "company",
                |m: &Logis| { &m.company },
                |m: &mut Logis| { &mut m.company },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "invoice",
                |m: &Logis| { &m.invoice },
                |m: &mut Logis| { &mut m.invoice },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "sent_at",
                |m: &Logis| { &m.sent_at },
                |m: &mut Logis| { &mut m.sent_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "applied_at",
                |m: &Logis| { &m.applied_at },
                |m: &mut Logis| { &mut m.applied_at },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Logis>(
                "Logis",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Logis {
        static instance: ::protobuf::rt::LazyV2<Logis> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Logis::new)
    }
}

impl ::protobuf::Clear for Logis {
    fn clear(&mut self) {
        self.company.clear();
        self.invoice.clear();
        self.sent_at = 0;
        self.applied_at = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Logis {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Logis {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EscrowRequest {
    // message fields
    pub imp_uid: ::std::string::String,
    pub sender: ::protobuf::SingularPtrField<Info>,
    pub receiver: ::protobuf::SingularPtrField<Info>,
    pub logis: ::protobuf::SingularPtrField<Logis>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EscrowRequest {
    fn default() -> &'a EscrowRequest {
        <EscrowRequest as ::protobuf::Message>::default_instance()
    }
}

impl EscrowRequest {
    pub fn new() -> EscrowRequest {
        ::std::default::Default::default()
    }

    // string imp_uid = 1;


    pub fn get_imp_uid(&self) -> &str {
        &self.imp_uid
    }
    pub fn clear_imp_uid(&mut self) {
        self.imp_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_imp_uid(&mut self, v: ::std::string::String) {
        self.imp_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_imp_uid(&mut self) -> &mut ::std::string::String {
        &mut self.imp_uid
    }

    // Take field
    pub fn take_imp_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.imp_uid, ::std::string::String::new())
    }

    // .escrow.Info sender = 2;


    pub fn get_sender(&self) -> &Info {
        self.sender.as_ref().unwrap_or_else(|| <Info as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    pub fn has_sender(&self) -> bool {
        self.sender.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: Info) {
        self.sender = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut Info {
        if self.sender.is_none() {
            self.sender.set_default();
        }
        self.sender.as_mut().unwrap()
    }

    // Take field
    pub fn take_sender(&mut self) -> Info {
        self.sender.take().unwrap_or_else(|| Info::new())
    }

    // .escrow.Info receiver = 3;


    pub fn get_receiver(&self) -> &Info {
        self.receiver.as_ref().unwrap_or_else(|| <Info as ::protobuf::Message>::default_instance())
    }
    pub fn clear_receiver(&mut self) {
        self.receiver.clear();
    }

    pub fn has_receiver(&self) -> bool {
        self.receiver.is_some()
    }

    // Param is passed by value, moved
    pub fn set_receiver(&mut self, v: Info) {
        self.receiver = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiver(&mut self) -> &mut Info {
        if self.receiver.is_none() {
            self.receiver.set_default();
        }
        self.receiver.as_mut().unwrap()
    }

    // Take field
    pub fn take_receiver(&mut self) -> Info {
        self.receiver.take().unwrap_or_else(|| Info::new())
    }

    // .escrow.Logis logis = 4;


    pub fn get_logis(&self) -> &Logis {
        self.logis.as_ref().unwrap_or_else(|| <Logis as ::protobuf::Message>::default_instance())
    }
    pub fn clear_logis(&mut self) {
        self.logis.clear();
    }

    pub fn has_logis(&self) -> bool {
        self.logis.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logis(&mut self, v: Logis) {
        self.logis = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logis(&mut self) -> &mut Logis {
        if self.logis.is_none() {
            self.logis.set_default();
        }
        self.logis.as_mut().unwrap()
    }

    // Take field
    pub fn take_logis(&mut self) -> Logis {
        self.logis.take().unwrap_or_else(|| Logis::new())
    }
}

impl ::protobuf::Message for EscrowRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.sender {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.receiver {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.logis {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.imp_uid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sender)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.receiver)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.logis)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.imp_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.imp_uid);
        }
        if let Some(ref v) = self.sender.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.receiver.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.logis.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.imp_uid.is_empty() {
            os.write_string(1, &self.imp_uid)?;
        }
        if let Some(ref v) = self.sender.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.receiver.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.logis.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EscrowRequest {
        EscrowRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "imp_uid",
                |m: &EscrowRequest| { &m.imp_uid },
                |m: &mut EscrowRequest| { &mut m.imp_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Info>>(
                "sender",
                |m: &EscrowRequest| { &m.sender },
                |m: &mut EscrowRequest| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Info>>(
                "receiver",
                |m: &EscrowRequest| { &m.receiver },
                |m: &mut EscrowRequest| { &mut m.receiver },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Logis>>(
                "logis",
                |m: &EscrowRequest| { &m.logis },
                |m: &mut EscrowRequest| { &mut m.logis },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EscrowRequest>(
                "EscrowRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EscrowRequest {
        static instance: ::protobuf::rt::LazyV2<EscrowRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EscrowRequest::new)
    }
}

impl ::protobuf::Clear for EscrowRequest {
    fn clear(&mut self) {
        self.imp_uid.clear();
        self.sender.clear();
        self.receiver.clear();
        self.logis.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EscrowRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EscrowRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EscrowResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<Logis>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EscrowResponse {
    fn default() -> &'a EscrowResponse {
        <EscrowResponse as ::protobuf::Message>::default_instance()
    }
}

impl EscrowResponse {
    pub fn new() -> EscrowResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .escrow.Logis response = 3;


    pub fn get_response(&self) -> &Logis {
        self.response.as_ref().unwrap_or_else(|| <Logis as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: Logis) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut Logis {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> Logis {
        self.response.take().unwrap_or_else(|| Logis::new())
    }
}

impl ::protobuf::Message for EscrowResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EscrowResponse {
        EscrowResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &EscrowResponse| { &m.code },
                |m: &mut EscrowResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &EscrowResponse| { &m.message },
                |m: &mut EscrowResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Logis>>(
                "response",
                |m: &EscrowResponse| { &m.response },
                |m: &mut EscrowResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EscrowResponse>(
                "EscrowResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EscrowResponse {
        static instance: ::protobuf::rt::LazyV2<EscrowResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EscrowResponse::new)
    }
}

impl ::protobuf::Clear for EscrowResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EscrowResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EscrowResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13escrow/escrow.proto\x12\x06escrow\"\\\n\x04Info\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\x12\x10\n\x03tel\x18\x02\x20\x01(\tR\x03tel\
    \x12\x12\n\x04addr\x18\x03\x20\x01(\tR\x04addr\x12\x1a\n\x08postcode\x18\
    \x04\x20\x01(\tR\x08postcode\"s\n\x05Logis\x12\x18\n\x07company\x18\x01\
    \x20\x01(\tR\x07company\x12\x18\n\x07invoice\x18\x02\x20\x01(\tR\x07invo\
    ice\x12\x17\n\x07sent_at\x18\x03\x20\x01(\x05R\x06sentAt\x12\x1d\n\nappl\
    ied_at\x18\x04\x20\x01(\x05R\tappliedAt\"\x9d\x01\n\rEscrowRequest\x12\
    \x17\n\x07imp_uid\x18\x01\x20\x01(\tR\x06impUid\x12$\n\x06sender\x18\x02\
    \x20\x01(\x0b2\x0c.escrow.InfoR\x06sender\x12(\n\x08receiver\x18\x03\x20\
    \x01(\x0b2\x0c.escrow.InfoR\x08receiver\x12#\n\x05logis\x18\x04\x20\x01(\
    \x0b2\r.escrow.LogisR\x05logis\"i\n\x0eEscrowResponse\x12\x12\n\x04code\
    \x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\
    \x07message\x12)\n\x08response\x18\x03\x20\x01(\x0b2\r.escrow.LogisR\x08\
    responseB0Z.github.com/iamport/interface/gen_src/go/escrowJ\xca\x07\n\
    \x06\x12\x04\0\0\x1e\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x01\0\x0f\n\x08\n\x01\x08\x12\x03\x03\0E\n\t\n\x02\x08\x0b\x12\
    \x03\x03\0E\n\n\n\x02\x04\0\x12\x04\x05\0\n\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x05\x08\x0c\n\x0b\n\x04\x04\0\x02\0\x12\x03\x06\x04\x14\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x06\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x06\x0b\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x06\x12\x13\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x07\x04\x13\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x07\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x07\x0b\x0e\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x07\x11\x12\n\x0b\n\x04\x04\0\x02\x02\x12\x03\
    \x08\x04\x14\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x08\x04\n\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\x08\x0b\x0f\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\x08\x12\x13\n\x0b\n\x04\x04\0\x02\x03\x12\x03\t\x04\x18\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x03\t\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\
    \t\x0b\x13\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\t\x16\x17\n\n\n\x02\x04\
    \x01\x12\x04\x0c\0\x11\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0c\x08\r\n\x0b\
    \n\x04\x04\x01\x02\0\x12\x03\r\x04\x17\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03\r\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\r\x0b\x12\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\r\x15\x16\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\
    \x0e\x04\x17\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0e\x04\n\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x03\x0e\x0b\x12\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03\x0e\x15\x16\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0f\x04\x15\
    \n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x0f\x04\t\n\x0c\n\x05\x04\x01\
    \x02\x02\x01\x12\x03\x0f\n\x11\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\
    \x0f\x13\x14\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x10\x04\x19\n\x0c\n\x05\
    \x04\x01\x02\x03\x05\x12\x03\x10\x04\t\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03\x10\n\x14\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x10\x17\x18\n\
    \n\n\x02\x04\x02\x12\x04\x13\0\x18\x01\n\n\n\x03\x04\x02\x01\x12\x03\x13\
    \x08\x15\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x14\x04\x17\n\x0c\n\x05\x04\
    \x02\x02\0\x05\x12\x03\x14\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\
    \x14\x0b\x12\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x14\x15\x16\n\x0b\n\
    \x04\x04\x02\x02\x01\x12\x03\x15\x04\x14\n\x0c\n\x05\x04\x02\x02\x01\x06\
    \x12\x03\x15\x04\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x15\t\x0f\n\
    \x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x15\x12\x13\n\x0b\n\x04\x04\x02\
    \x02\x02\x12\x03\x16\x04\x16\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x16\
    \x04\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x16\t\x11\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03\x16\x14\x15\n\x0b\n\x04\x04\x02\x02\x03\x12\
    \x03\x17\x04\x14\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03\x17\x04\t\n\x0c\
    \n\x05\x04\x02\x02\x03\x01\x12\x03\x17\n\x0f\n\x0c\n\x05\x04\x02\x02\x03\
    \x03\x12\x03\x17\x12\x13\n\n\n\x02\x04\x03\x12\x04\x1a\0\x1e\x01\n\n\n\
    \x03\x04\x03\x01\x12\x03\x1a\x08\x16\n\x0b\n\x04\x04\x03\x02\0\x12\x03\
    \x1b\x04\x13\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1b\x04\t\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03\x1b\n\x0e\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03\x1b\x11\x12\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x1c\x04\x17\n\x0c\n\
    \x05\x04\x03\x02\x01\x05\x12\x03\x1c\x04\n\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03\x1c\x0b\x12\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1c\x15\
    \x16\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\x1d\x04\x17\n\x0c\n\x05\x04\x03\
    \x02\x02\x06\x12\x03\x1d\x04\t\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\
    \x1d\n\x12\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x1d\x15\x16b\x06proto\
    3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
