// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `authenticate/token.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct Token {
    // message fields
    pub access_token: ::std::string::String,
    pub now: i32,
    pub expired_at: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Token {
    fn default() -> &'a Token {
        <Token as ::protobuf::Message>::default_instance()
    }
}

impl Token {
    pub fn new() -> Token {
        ::std::default::Default::default()
    }

    // string access_token = 1;


    pub fn get_access_token(&self) -> &str {
        &self.access_token
    }
    pub fn clear_access_token(&mut self) {
        self.access_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.access_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        &mut self.access_token
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.access_token, ::std::string::String::new())
    }

    // int32 now = 2;


    pub fn get_now(&self) -> i32 {
        self.now
    }
    pub fn clear_now(&mut self) {
        self.now = 0;
    }

    // Param is passed by value, moved
    pub fn set_now(&mut self, v: i32) {
        self.now = v;
    }

    // int32 expired_at = 3;


    pub fn get_expired_at(&self) -> i32 {
        self.expired_at
    }
    pub fn clear_expired_at(&mut self) {
        self.expired_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_expired_at(&mut self, v: i32) {
        self.expired_at = v;
    }
}

impl ::protobuf::Message for Token {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.access_token)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.now = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.expired_at = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.access_token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.access_token);
        }
        if self.now != 0 {
            my_size += ::protobuf::rt::value_size(2, self.now, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.expired_at != 0 {
            my_size += ::protobuf::rt::value_size(3, self.expired_at, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.access_token.is_empty() {
            os.write_string(1, &self.access_token)?;
        }
        if self.now != 0 {
            os.write_int32(2, self.now)?;
        }
        if self.expired_at != 0 {
            os.write_int32(3, self.expired_at)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Token {
        Token::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "access_token",
                |m: &Token| { &m.access_token },
                |m: &mut Token| { &mut m.access_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "now",
                |m: &Token| { &m.now },
                |m: &mut Token| { &mut m.now },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "expired_at",
                |m: &Token| { &m.expired_at },
                |m: &mut Token| { &mut m.expired_at },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Token>(
                "Token",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Token {
        static instance: ::protobuf::rt::LazyV2<Token> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Token::new)
    }
}

impl ::protobuf::Clear for Token {
    fn clear(&mut self) {
        self.access_token.clear();
        self.now = 0;
        self.expired_at = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Token {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Token {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TokenRequest {
    // message fields
    pub imp_key: ::std::string::String,
    pub imp_secret: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenRequest {
    fn default() -> &'a TokenRequest {
        <TokenRequest as ::protobuf::Message>::default_instance()
    }
}

impl TokenRequest {
    pub fn new() -> TokenRequest {
        ::std::default::Default::default()
    }

    // string imp_key = 1;


    pub fn get_imp_key(&self) -> &str {
        &self.imp_key
    }
    pub fn clear_imp_key(&mut self) {
        self.imp_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_imp_key(&mut self, v: ::std::string::String) {
        self.imp_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_imp_key(&mut self) -> &mut ::std::string::String {
        &mut self.imp_key
    }

    // Take field
    pub fn take_imp_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.imp_key, ::std::string::String::new())
    }

    // string imp_secret = 2;


    pub fn get_imp_secret(&self) -> &str {
        &self.imp_secret
    }
    pub fn clear_imp_secret(&mut self) {
        self.imp_secret.clear();
    }

    // Param is passed by value, moved
    pub fn set_imp_secret(&mut self, v: ::std::string::String) {
        self.imp_secret = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_imp_secret(&mut self) -> &mut ::std::string::String {
        &mut self.imp_secret
    }

    // Take field
    pub fn take_imp_secret(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.imp_secret, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TokenRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.imp_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.imp_secret)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.imp_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.imp_key);
        }
        if !self.imp_secret.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.imp_secret);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.imp_key.is_empty() {
            os.write_string(1, &self.imp_key)?;
        }
        if !self.imp_secret.is_empty() {
            os.write_string(2, &self.imp_secret)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TokenRequest {
        TokenRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "imp_key",
                |m: &TokenRequest| { &m.imp_key },
                |m: &mut TokenRequest| { &mut m.imp_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "imp_secret",
                |m: &TokenRequest| { &m.imp_secret },
                |m: &mut TokenRequest| { &mut m.imp_secret },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TokenRequest>(
                "TokenRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TokenRequest {
        static instance: ::protobuf::rt::LazyV2<TokenRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TokenRequest::new)
    }
}

impl ::protobuf::Clear for TokenRequest {
    fn clear(&mut self) {
        self.imp_key.clear();
        self.imp_secret.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TokenRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TokenResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<Token>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenResponse {
    fn default() -> &'a TokenResponse {
        <TokenResponse as ::protobuf::Message>::default_instance()
    }
}

impl TokenResponse {
    pub fn new() -> TokenResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .authenticate.Token response = 3;


    pub fn get_response(&self) -> &Token {
        self.response.as_ref().unwrap_or_else(|| <Token as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: Token) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut Token {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> Token {
        self.response.take().unwrap_or_else(|| Token::new())
    }
}

impl ::protobuf::Message for TokenResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TokenResponse {
        TokenResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &TokenResponse| { &m.code },
                |m: &mut TokenResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &TokenResponse| { &m.message },
                |m: &mut TokenResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Token>>(
                "response",
                |m: &TokenResponse| { &m.response },
                |m: &mut TokenResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TokenResponse>(
                "TokenResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TokenResponse {
        static instance: ::protobuf::rt::LazyV2<TokenResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TokenResponse::new)
    }
}

impl ::protobuf::Clear for TokenResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TokenResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18authenticate/token.proto\x12\x0cauthenticate\"[\n\x05Token\x12!\n\
    \x0caccess_token\x18\x01\x20\x01(\tR\x0baccessToken\x12\x10\n\x03now\x18\
    \x02\x20\x01(\x05R\x03now\x12\x1d\n\nexpired_at\x18\x03\x20\x01(\x05R\te\
    xpiredAt\"F\n\x0cTokenRequest\x12\x17\n\x07imp_key\x18\x01\x20\x01(\tR\
    \x06impKey\x12\x1d\n\nimp_secret\x18\x02\x20\x01(\tR\timpSecret\"n\n\rTo\
    kenResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\
    \x07message\x18\x02\x20\x01(\tR\x07message\x12/\n\x08response\x18\x03\
    \x20\x01(\x0b2\x13.authenticate.TokenR\x08responseB4Z2github.com/iamport\
    /interface/build/go/authenticateJ\xb1\x04\n\x06\x12\x04\0\0\x13\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x15\n\x08\n\
    \x01\x08\x12\x03\x03\0I\n\t\n\x02\x08\x0b\x12\x03\x03\0I\n\n\n\x02\x04\0\
    \x12\x04\x04\0\x08\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\r\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x05\x04\x1c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\
    \x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x0b\x17\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x05\x1a\x1b\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x04\
    \x12\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x04\t\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x06\n\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\
    \x10\x11\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x07\x04\x19\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x03\x07\x04\t\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x07\
    \n\x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x07\x17\x18\n\n\n\x02\x04\
    \x01\x12\x04\n\0\r\x01\n\n\n\x03\x04\x01\x01\x12\x03\n\x08\x14\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\x0b\x04\x17\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03\x0b\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0b\x0b\x12\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\x0b\x15\x16\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x0c\x04\x1a\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0c\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0c\x0b\x15\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\x0c\x18\x19\n\n\n\x02\x04\x02\x12\x04\x0f\0\x13\x01\
    \n\n\n\x03\x04\x02\x01\x12\x03\x0f\x08\x15\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03\x10\x04\x13\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x10\x04\t\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x10\n\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x10\x11\x12\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x11\x04\x17\n\
    \x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x11\x04\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03\x11\x0b\x12\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x11\
    \x15\x16\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x12\x04\x17\n\x0c\n\x05\x04\
    \x02\x02\x02\x06\x12\x03\x12\x04\t\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\
    \x03\x12\n\x12\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x12\x15\x16b\x06p\
    roto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
