// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `v2/payments/card/card.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct CardRegisterRequest {
    // message fields
    pub card_uid: ::std::string::String,
    pub card_number: ::std::string::String,
    pub expiry: ::std::string::String,
    pub bitrh: ::std::string::String,
    pub pwd_2digit: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub customer_tel: ::std::string::String,
    pub customer_email: ::std::string::String,
    pub customer_addr: ::std::string::String,
    pub customer_postcode: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardRegisterRequest {
    fn default() -> &'a CardRegisterRequest {
        <CardRegisterRequest as ::protobuf::Message>::default_instance()
    }
}

impl CardRegisterRequest {
    pub fn new() -> CardRegisterRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_uid",
            |m: &CardRegisterRequest| { &m.card_uid },
            |m: &mut CardRegisterRequest| { &mut m.card_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_number",
            |m: &CardRegisterRequest| { &m.card_number },
            |m: &mut CardRegisterRequest| { &mut m.card_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expiry",
            |m: &CardRegisterRequest| { &m.expiry },
            |m: &mut CardRegisterRequest| { &mut m.expiry },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bitrh",
            |m: &CardRegisterRequest| { &m.bitrh },
            |m: &mut CardRegisterRequest| { &mut m.bitrh },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pwd_2digit",
            |m: &CardRegisterRequest| { &m.pwd_2digit },
            |m: &mut CardRegisterRequest| { &mut m.pwd_2digit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_name",
            |m: &CardRegisterRequest| { &m.customer_name },
            |m: &mut CardRegisterRequest| { &mut m.customer_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_tel",
            |m: &CardRegisterRequest| { &m.customer_tel },
            |m: &mut CardRegisterRequest| { &mut m.customer_tel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_email",
            |m: &CardRegisterRequest| { &m.customer_email },
            |m: &mut CardRegisterRequest| { &mut m.customer_email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_addr",
            |m: &CardRegisterRequest| { &m.customer_addr },
            |m: &mut CardRegisterRequest| { &mut m.customer_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_postcode",
            |m: &CardRegisterRequest| { &m.customer_postcode },
            |m: &mut CardRegisterRequest| { &mut m.customer_postcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CardRegisterRequest>(
            "CardRegisterRequest",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for CardRegisterRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_uid = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_number = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expiry = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.bitrh = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pwd_2digit = is.read_string()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_name = is.read_string()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_tel = is.read_string()?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_email = is.read_string()?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_addr = is.read_string()?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_postcode = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_uid);
        }
        if !self.card_number.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.card_number);
        }
        if !self.expiry.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.expiry);
        }
        if !self.bitrh.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.bitrh);
        }
        if !self.pwd_2digit.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.pwd_2digit);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.customer_name);
        }
        if !self.customer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer_tel);
        }
        if !self.customer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.customer_email);
        }
        if !self.customer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.customer_addr);
        }
        if !self.customer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.customer_postcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_uid.is_empty() {
            os.write_string(1, &self.card_uid)?;
        }
        if !self.card_number.is_empty() {
            os.write_string(2, &self.card_number)?;
        }
        if !self.expiry.is_empty() {
            os.write_string(3, &self.expiry)?;
        }
        if !self.bitrh.is_empty() {
            os.write_string(4, &self.bitrh)?;
        }
        if !self.pwd_2digit.is_empty() {
            os.write_string(5, &self.pwd_2digit)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(6, &self.customer_name)?;
        }
        if !self.customer_tel.is_empty() {
            os.write_string(7, &self.customer_tel)?;
        }
        if !self.customer_email.is_empty() {
            os.write_string(8, &self.customer_email)?;
        }
        if !self.customer_addr.is_empty() {
            os.write_string(9, &self.customer_addr)?;
        }
        if !self.customer_postcode.is_empty() {
            os.write_string(10, &self.customer_postcode)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> CardRegisterRequest {
        CardRegisterRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static CardRegisterRequest {
        static instance: CardRegisterRequest = CardRegisterRequest {
            card_uid: ::std::string::String::new(),
            card_number: ::std::string::String::new(),
            expiry: ::std::string::String::new(),
            bitrh: ::std::string::String::new(),
            pwd_2digit: ::std::string::String::new(),
            customer_name: ::std::string::String::new(),
            customer_tel: ::std::string::String::new(),
            customer_email: ::std::string::String::new(),
            customer_addr: ::std::string::String::new(),
            customer_postcode: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for CardRegisterRequest {
    fn clear(&mut self) {
        self.card_uid.clear();
        self.card_number.clear();
        self.expiry.clear();
        self.bitrh.clear();
        self.pwd_2digit.clear();
        self.customer_name.clear();
        self.customer_tel.clear();
        self.customer_email.clear();
        self.customer_addr.clear();
        self.customer_postcode.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardRegisterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardRegisterRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct CardRegisterResultData {
    // message fields
    pub card_uid: ::std::string::String,
    pub card_name: ::std::string::String,
    pub card_code: ::std::string::String,
    pub bin_numbrer: ::std::string::String,
    pub birth_number: ::std::string::String,
    pub card_type: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub customer_tel: ::std::string::String,
    pub customer_email: ::std::string::String,
    pub customer_addr: ::std::string::String,
    pub customer_postcode: ::std::string::String,
    pub inserted: i32,
    pub updated: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardRegisterResultData {
    fn default() -> &'a CardRegisterResultData {
        <CardRegisterResultData as ::protobuf::Message>::default_instance()
    }
}

impl CardRegisterResultData {
    pub fn new() -> CardRegisterResultData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_uid",
            |m: &CardRegisterResultData| { &m.card_uid },
            |m: &mut CardRegisterResultData| { &mut m.card_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_name",
            |m: &CardRegisterResultData| { &m.card_name },
            |m: &mut CardRegisterResultData| { &mut m.card_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_code",
            |m: &CardRegisterResultData| { &m.card_code },
            |m: &mut CardRegisterResultData| { &mut m.card_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bin_numbrer",
            |m: &CardRegisterResultData| { &m.bin_numbrer },
            |m: &mut CardRegisterResultData| { &mut m.bin_numbrer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "birth_number",
            |m: &CardRegisterResultData| { &m.birth_number },
            |m: &mut CardRegisterResultData| { &mut m.birth_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_type",
            |m: &CardRegisterResultData| { &m.card_type },
            |m: &mut CardRegisterResultData| { &mut m.card_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_name",
            |m: &CardRegisterResultData| { &m.customer_name },
            |m: &mut CardRegisterResultData| { &mut m.customer_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_tel",
            |m: &CardRegisterResultData| { &m.customer_tel },
            |m: &mut CardRegisterResultData| { &mut m.customer_tel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_email",
            |m: &CardRegisterResultData| { &m.customer_email },
            |m: &mut CardRegisterResultData| { &mut m.customer_email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_addr",
            |m: &CardRegisterResultData| { &m.customer_addr },
            |m: &mut CardRegisterResultData| { &mut m.customer_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_postcode",
            |m: &CardRegisterResultData| { &m.customer_postcode },
            |m: &mut CardRegisterResultData| { &mut m.customer_postcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "inserted",
            |m: &CardRegisterResultData| { &m.inserted },
            |m: &mut CardRegisterResultData| { &mut m.inserted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "updated",
            |m: &CardRegisterResultData| { &m.updated },
            |m: &mut CardRegisterResultData| { &mut m.updated },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CardRegisterResultData>(
            "CardRegisterResultData",
            1,
            fields,
        )
    }
}

impl ::protobuf::Message for CardRegisterResultData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_uid = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_name = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_code = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.bin_numbrer = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.birth_number = is.read_string()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_type = is.read_string()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_name = is.read_string()?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_tel = is.read_string()?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_email = is.read_string()?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_addr = is.read_string()?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_postcode = is.read_string()?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inserted = is.read_int32()?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.updated = is.read_int32()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_uid);
        }
        if !self.card_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.card_name);
        }
        if !self.card_code.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.card_code);
        }
        if !self.bin_numbrer.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.bin_numbrer);
        }
        if !self.birth_number.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.birth_number);
        }
        if !self.card_type.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.card_type);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer_name);
        }
        if !self.customer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.customer_tel);
        }
        if !self.customer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.customer_email);
        }
        if !self.customer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.customer_addr);
        }
        if !self.customer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.customer_postcode);
        }
        if self.inserted != 0 {
            my_size += ::protobuf::rt::value_size(12, self.inserted, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.updated != 0 {
            my_size += ::protobuf::rt::value_size(13, self.updated, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_uid.is_empty() {
            os.write_string(1, &self.card_uid)?;
        }
        if !self.card_name.is_empty() {
            os.write_string(2, &self.card_name)?;
        }
        if !self.card_code.is_empty() {
            os.write_string(3, &self.card_code)?;
        }
        if !self.bin_numbrer.is_empty() {
            os.write_string(4, &self.bin_numbrer)?;
        }
        if !self.birth_number.is_empty() {
            os.write_string(5, &self.birth_number)?;
        }
        if !self.card_type.is_empty() {
            os.write_string(6, &self.card_type)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(7, &self.customer_name)?;
        }
        if !self.customer_tel.is_empty() {
            os.write_string(8, &self.customer_tel)?;
        }
        if !self.customer_email.is_empty() {
            os.write_string(9, &self.customer_email)?;
        }
        if !self.customer_addr.is_empty() {
            os.write_string(10, &self.customer_addr)?;
        }
        if !self.customer_postcode.is_empty() {
            os.write_string(11, &self.customer_postcode)?;
        }
        if self.inserted != 0 {
            os.write_int32(12, self.inserted)?;
        }
        if self.updated != 0 {
            os.write_int32(13, self.updated)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> CardRegisterResultData {
        CardRegisterResultData::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 1)
    }

    fn default_instance() -> &'static CardRegisterResultData {
        static instance: CardRegisterResultData = CardRegisterResultData {
            card_uid: ::std::string::String::new(),
            card_name: ::std::string::String::new(),
            card_code: ::std::string::String::new(),
            bin_numbrer: ::std::string::String::new(),
            birth_number: ::std::string::String::new(),
            card_type: ::std::string::String::new(),
            customer_name: ::std::string::String::new(),
            customer_tel: ::std::string::String::new(),
            customer_email: ::std::string::String::new(),
            customer_addr: ::std::string::String::new(),
            customer_postcode: ::std::string::String::new(),
            inserted: 0,
            updated: 0,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for CardRegisterResultData {
    fn clear(&mut self) {
        self.card_uid.clear();
        self.card_name.clear();
        self.card_code.clear();
        self.bin_numbrer.clear();
        self.birth_number.clear();
        self.card_type.clear();
        self.customer_name.clear();
        self.customer_tel.clear();
        self.customer_email.clear();
        self.customer_addr.clear();
        self.customer_postcode.clear();
        self.inserted = 0;
        self.updated = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardRegisterResultData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardRegisterResultData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct CardRegisterResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<CardRegisterResultData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardRegisterResponse {
    fn default() -> &'a CardRegisterResponse {
        <CardRegisterResponse as ::protobuf::Message>::default_instance()
    }
}

impl CardRegisterResponse {
    pub fn new() -> CardRegisterResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &CardRegisterResponse| { &m.code },
            |m: &mut CardRegisterResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &CardRegisterResponse| { &m.message },
            |m: &mut CardRegisterResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CardRegisterResultData>(
            "response",
            |m: &CardRegisterResponse| { &m.response },
            |m: &mut CardRegisterResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CardRegisterResponse>(
            "CardRegisterResponse",
            2,
            fields,
        )
    }
}

impl ::protobuf::Message for CardRegisterResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> CardRegisterResponse {
        CardRegisterResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 2)
    }

    fn default_instance() -> &'static CardRegisterResponse {
        static instance: CardRegisterResponse = CardRegisterResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for CardRegisterResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardRegisterResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardRegisterResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct GetCardInfoRequest {
    // message fields
    pub card_uid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetCardInfoRequest {
    fn default() -> &'a GetCardInfoRequest {
        <GetCardInfoRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetCardInfoRequest {
    pub fn new() -> GetCardInfoRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_uid",
            |m: &GetCardInfoRequest| { &m.card_uid },
            |m: &mut GetCardInfoRequest| { &mut m.card_uid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetCardInfoRequest>(
            "GetCardInfoRequest",
            3,
            fields,
        )
    }
}

impl ::protobuf::Message for GetCardInfoRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_uid = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_uid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_uid.is_empty() {
            os.write_string(1, &self.card_uid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> GetCardInfoRequest {
        GetCardInfoRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 3)
    }

    fn default_instance() -> &'static GetCardInfoRequest {
        static instance: GetCardInfoRequest = GetCardInfoRequest {
            card_uid: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for GetCardInfoRequest {
    fn clear(&mut self) {
        self.card_uid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetCardInfoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCardInfoRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct GetCardInfoData {
    // message fields
    pub card_uid: ::std::string::String,
    pub card_provider: ::std::string::String,
    pub card_code: ::std::string::String,
    pub bin_number: ::std::string::String,
    pub card_type: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub customer_tel: ::std::string::String,
    pub customer_email: ::std::string::String,
    pub customer_addr: ::std::string::String,
    pub customer_postcode: ::std::string::String,
    pub inserted: i32,
    pub updated: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetCardInfoData {
    fn default() -> &'a GetCardInfoData {
        <GetCardInfoData as ::protobuf::Message>::default_instance()
    }
}

impl GetCardInfoData {
    pub fn new() -> GetCardInfoData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_uid",
            |m: &GetCardInfoData| { &m.card_uid },
            |m: &mut GetCardInfoData| { &mut m.card_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_provider",
            |m: &GetCardInfoData| { &m.card_provider },
            |m: &mut GetCardInfoData| { &mut m.card_provider },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_code",
            |m: &GetCardInfoData| { &m.card_code },
            |m: &mut GetCardInfoData| { &mut m.card_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bin_number",
            |m: &GetCardInfoData| { &m.bin_number },
            |m: &mut GetCardInfoData| { &mut m.bin_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_type",
            |m: &GetCardInfoData| { &m.card_type },
            |m: &mut GetCardInfoData| { &mut m.card_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_name",
            |m: &GetCardInfoData| { &m.customer_name },
            |m: &mut GetCardInfoData| { &mut m.customer_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_tel",
            |m: &GetCardInfoData| { &m.customer_tel },
            |m: &mut GetCardInfoData| { &mut m.customer_tel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_email",
            |m: &GetCardInfoData| { &m.customer_email },
            |m: &mut GetCardInfoData| { &mut m.customer_email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_addr",
            |m: &GetCardInfoData| { &m.customer_addr },
            |m: &mut GetCardInfoData| { &mut m.customer_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_postcode",
            |m: &GetCardInfoData| { &m.customer_postcode },
            |m: &mut GetCardInfoData| { &mut m.customer_postcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "inserted",
            |m: &GetCardInfoData| { &m.inserted },
            |m: &mut GetCardInfoData| { &mut m.inserted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "updated",
            |m: &GetCardInfoData| { &m.updated },
            |m: &mut GetCardInfoData| { &mut m.updated },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetCardInfoData>(
            "GetCardInfoData",
            4,
            fields,
        )
    }
}

impl ::protobuf::Message for GetCardInfoData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_uid = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_provider = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_code = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.bin_number = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_type = is.read_string()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_name = is.read_string()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_tel = is.read_string()?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_email = is.read_string()?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_addr = is.read_string()?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_postcode = is.read_string()?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inserted = is.read_int32()?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.updated = is.read_int32()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_uid);
        }
        if !self.card_provider.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.card_provider);
        }
        if !self.card_code.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.card_code);
        }
        if !self.bin_number.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.bin_number);
        }
        if !self.card_type.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.card_type);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.customer_name);
        }
        if !self.customer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer_tel);
        }
        if !self.customer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.customer_email);
        }
        if !self.customer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.customer_addr);
        }
        if !self.customer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.customer_postcode);
        }
        if self.inserted != 0 {
            my_size += ::protobuf::rt::value_size(11, self.inserted, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.updated != 0 {
            my_size += ::protobuf::rt::value_size(12, self.updated, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_uid.is_empty() {
            os.write_string(1, &self.card_uid)?;
        }
        if !self.card_provider.is_empty() {
            os.write_string(2, &self.card_provider)?;
        }
        if !self.card_code.is_empty() {
            os.write_string(3, &self.card_code)?;
        }
        if !self.bin_number.is_empty() {
            os.write_string(4, &self.bin_number)?;
        }
        if !self.card_type.is_empty() {
            os.write_string(5, &self.card_type)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(6, &self.customer_name)?;
        }
        if !self.customer_tel.is_empty() {
            os.write_string(7, &self.customer_tel)?;
        }
        if !self.customer_email.is_empty() {
            os.write_string(8, &self.customer_email)?;
        }
        if !self.customer_addr.is_empty() {
            os.write_string(9, &self.customer_addr)?;
        }
        if !self.customer_postcode.is_empty() {
            os.write_string(10, &self.customer_postcode)?;
        }
        if self.inserted != 0 {
            os.write_int32(11, self.inserted)?;
        }
        if self.updated != 0 {
            os.write_int32(12, self.updated)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> GetCardInfoData {
        GetCardInfoData::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 4)
    }

    fn default_instance() -> &'static GetCardInfoData {
        static instance: GetCardInfoData = GetCardInfoData {
            card_uid: ::std::string::String::new(),
            card_provider: ::std::string::String::new(),
            card_code: ::std::string::String::new(),
            bin_number: ::std::string::String::new(),
            card_type: ::std::string::String::new(),
            customer_name: ::std::string::String::new(),
            customer_tel: ::std::string::String::new(),
            customer_email: ::std::string::String::new(),
            customer_addr: ::std::string::String::new(),
            customer_postcode: ::std::string::String::new(),
            inserted: 0,
            updated: 0,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for GetCardInfoData {
    fn clear(&mut self) {
        self.card_uid.clear();
        self.card_provider.clear();
        self.card_code.clear();
        self.bin_number.clear();
        self.card_type.clear();
        self.customer_name.clear();
        self.customer_tel.clear();
        self.customer_email.clear();
        self.customer_addr.clear();
        self.customer_postcode.clear();
        self.inserted = 0;
        self.updated = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetCardInfoData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCardInfoData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct GetCardInfoResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<GetCardInfoData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetCardInfoResponse {
    fn default() -> &'a GetCardInfoResponse {
        <GetCardInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetCardInfoResponse {
    pub fn new() -> GetCardInfoResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &GetCardInfoResponse| { &m.code },
            |m: &mut GetCardInfoResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &GetCardInfoResponse| { &m.message },
            |m: &mut GetCardInfoResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, GetCardInfoData>(
            "response",
            |m: &GetCardInfoResponse| { &m.response },
            |m: &mut GetCardInfoResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetCardInfoResponse>(
            "GetCardInfoResponse",
            5,
            fields,
        )
    }
}

impl ::protobuf::Message for GetCardInfoResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> GetCardInfoResponse {
        GetCardInfoResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 5)
    }

    fn default_instance() -> &'static GetCardInfoResponse {
        static instance: GetCardInfoResponse = GetCardInfoResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for GetCardInfoResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetCardInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCardInfoResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteCardInfoRequest {
    // message fields
    pub card_uid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteCardInfoRequest {
    fn default() -> &'a DeleteCardInfoRequest {
        <DeleteCardInfoRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteCardInfoRequest {
    pub fn new() -> DeleteCardInfoRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_uid",
            |m: &DeleteCardInfoRequest| { &m.card_uid },
            |m: &mut DeleteCardInfoRequest| { &mut m.card_uid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteCardInfoRequest>(
            "DeleteCardInfoRequest",
            6,
            fields,
        )
    }
}

impl ::protobuf::Message for DeleteCardInfoRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_uid = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_uid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_uid.is_empty() {
            os.write_string(1, &self.card_uid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> DeleteCardInfoRequest {
        DeleteCardInfoRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 6)
    }

    fn default_instance() -> &'static DeleteCardInfoRequest {
        static instance: DeleteCardInfoRequest = DeleteCardInfoRequest {
            card_uid: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for DeleteCardInfoRequest {
    fn clear(&mut self) {
        self.card_uid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteCardInfoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteCardInfoRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteCardInfoResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteCardInfoResponse {
    fn default() -> &'a DeleteCardInfoResponse {
        <DeleteCardInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteCardInfoResponse {
    pub fn new() -> DeleteCardInfoResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &DeleteCardInfoResponse| { &m.code },
            |m: &mut DeleteCardInfoResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &DeleteCardInfoResponse| { &m.message },
            |m: &mut DeleteCardInfoResponse| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteCardInfoResponse>(
            "DeleteCardInfoResponse",
            7,
            fields,
        )
    }
}

impl ::protobuf::Message for DeleteCardInfoResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> DeleteCardInfoResponse {
        DeleteCardInfoResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 7)
    }

    fn default_instance() -> &'static DeleteCardInfoResponse {
        static instance: DeleteCardInfoResponse = DeleteCardInfoResponse {
            code: 0,
            message: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for DeleteCardInfoResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteCardInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteCardInfoResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct PayByRegisteredCardRequest {
    // message fields
    pub card_uid: ::std::string::String,
    pub merchant_uid: ::std::string::String,
    pub amount: ::std::string::String,
    pub duty_free_amount: ::std::string::String,
    pub order_name: ::std::string::String,
    pub card_installment: i32,
    pub interest_free_by_merchant: bool,
    pub custom_data: ::std::string::String,
    pub callback_url: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a PayByRegisteredCardRequest {
    fn default() -> &'a PayByRegisteredCardRequest {
        <PayByRegisteredCardRequest as ::protobuf::Message>::default_instance()
    }
}

impl PayByRegisteredCardRequest {
    pub fn new() -> PayByRegisteredCardRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_uid",
            |m: &PayByRegisteredCardRequest| { &m.card_uid },
            |m: &mut PayByRegisteredCardRequest| { &mut m.card_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "merchant_uid",
            |m: &PayByRegisteredCardRequest| { &m.merchant_uid },
            |m: &mut PayByRegisteredCardRequest| { &mut m.merchant_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &PayByRegisteredCardRequest| { &m.amount },
            |m: &mut PayByRegisteredCardRequest| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "duty_free_amount",
            |m: &PayByRegisteredCardRequest| { &m.duty_free_amount },
            |m: &mut PayByRegisteredCardRequest| { &mut m.duty_free_amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "order_name",
            |m: &PayByRegisteredCardRequest| { &m.order_name },
            |m: &mut PayByRegisteredCardRequest| { &mut m.order_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_installment",
            |m: &PayByRegisteredCardRequest| { &m.card_installment },
            |m: &mut PayByRegisteredCardRequest| { &mut m.card_installment },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "interest_free_by_merchant",
            |m: &PayByRegisteredCardRequest| { &m.interest_free_by_merchant },
            |m: &mut PayByRegisteredCardRequest| { &mut m.interest_free_by_merchant },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "custom_data",
            |m: &PayByRegisteredCardRequest| { &m.custom_data },
            |m: &mut PayByRegisteredCardRequest| { &mut m.custom_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "callback_url",
            |m: &PayByRegisteredCardRequest| { &m.callback_url },
            |m: &mut PayByRegisteredCardRequest| { &mut m.callback_url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PayByRegisteredCardRequest>(
            "PayByRegisteredCardRequest",
            8,
            fields,
        )
    }
}

impl ::protobuf::Message for PayByRegisteredCardRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_uid = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.merchant_uid = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.amount = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.duty_free_amount = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.order_name = is.read_string()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_installment = is.read_int32()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.interest_free_by_merchant = is.read_bool()?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.custom_data = is.read_string()?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.callback_url = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_uid);
        }
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.merchant_uid);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.amount);
        }
        if !self.duty_free_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.duty_free_amount);
        }
        if !self.order_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.order_name);
        }
        if self.card_installment != 0 {
            my_size += ::protobuf::rt::value_size(6, self.card_installment, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.interest_free_by_merchant != false {
            my_size += 2;
        }
        if !self.custom_data.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.custom_data);
        }
        if !self.callback_url.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.callback_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_uid.is_empty() {
            os.write_string(1, &self.card_uid)?;
        }
        if !self.merchant_uid.is_empty() {
            os.write_string(2, &self.merchant_uid)?;
        }
        if !self.amount.is_empty() {
            os.write_string(3, &self.amount)?;
        }
        if !self.duty_free_amount.is_empty() {
            os.write_string(4, &self.duty_free_amount)?;
        }
        if !self.order_name.is_empty() {
            os.write_string(5, &self.order_name)?;
        }
        if self.card_installment != 0 {
            os.write_int32(6, self.card_installment)?;
        }
        if self.interest_free_by_merchant != false {
            os.write_bool(7, self.interest_free_by_merchant)?;
        }
        if !self.custom_data.is_empty() {
            os.write_string(8, &self.custom_data)?;
        }
        if !self.callback_url.is_empty() {
            os.write_string(9, &self.callback_url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> PayByRegisteredCardRequest {
        PayByRegisteredCardRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 8)
    }

    fn default_instance() -> &'static PayByRegisteredCardRequest {
        static instance: PayByRegisteredCardRequest = PayByRegisteredCardRequest {
            card_uid: ::std::string::String::new(),
            merchant_uid: ::std::string::String::new(),
            amount: ::std::string::String::new(),
            duty_free_amount: ::std::string::String::new(),
            order_name: ::std::string::String::new(),
            card_installment: 0,
            interest_free_by_merchant: false,
            custom_data: ::std::string::String::new(),
            callback_url: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for PayByRegisteredCardRequest {
    fn clear(&mut self) {
        self.card_uid.clear();
        self.merchant_uid.clear();
        self.amount.clear();
        self.duty_free_amount.clear();
        self.order_name.clear();
        self.card_installment = 0;
        self.interest_free_by_merchant = false;
        self.custom_data.clear();
        self.callback_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PayByRegisteredCardRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PayByRegisteredCardRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct PayByRegisteredCardData {
    // message fields
    pub amount: ::std::string::String,
    pub apply_num: ::std::string::String,
    pub buyer_addr: ::std::string::String,
    pub buyer_email: ::std::string::String,
    pub buyer_name: ::std::string::String,
    pub buyer_postcode: ::std::string::String,
    pub buyer_tel: ::std::string::String,
    pub cancel_amount: ::std::string::String,
    pub cancel_history: ::std::vec::Vec<CancelHistory>,
    pub cancel_reason: ::std::string::String,
    pub cancel_receipt_urls: ::std::vec::Vec<::std::string::String>,
    pub cancelled_at: i32,
    pub card_code: ::std::string::String,
    pub card_name: ::std::string::String,
    pub bin_number: ::std::string::String,
    pub card_installment: i32,
    pub card_type: i32,
    pub cash_receipt_issued: bool,
    pub channel: ::std::string::String,
    pub currency: ::std::string::String,
    pub custom_data: ::std::string::String,
    pub card_uid: ::std::string::String,
    pub customer_uid_usage: ::std::string::String,
    pub fail_reason: ::std::string::String,
    pub failed_at: i32,
    pub imp_uid: ::std::string::String,
    pub merchant_uid: ::std::string::String,
    pub order_name: ::std::string::String,
    pub paid_at: i32,
    pub pay_method: ::std::string::String,
    pub pg_id: ::std::string::String,
    pub pg_provider: ::std::string::String,
    pub pg_tid: ::std::string::String,
    pub receipt_url: ::std::string::String,
    pub started_at: i32,
    pub status: ::std::string::String,
    pub user_agent: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a PayByRegisteredCardData {
    fn default() -> &'a PayByRegisteredCardData {
        <PayByRegisteredCardData as ::protobuf::Message>::default_instance()
    }
}

impl PayByRegisteredCardData {
    pub fn new() -> PayByRegisteredCardData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &PayByRegisteredCardData| { &m.amount },
            |m: &mut PayByRegisteredCardData| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "apply_num",
            |m: &PayByRegisteredCardData| { &m.apply_num },
            |m: &mut PayByRegisteredCardData| { &mut m.apply_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_addr",
            |m: &PayByRegisteredCardData| { &m.buyer_addr },
            |m: &mut PayByRegisteredCardData| { &mut m.buyer_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_email",
            |m: &PayByRegisteredCardData| { &m.buyer_email },
            |m: &mut PayByRegisteredCardData| { &mut m.buyer_email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_name",
            |m: &PayByRegisteredCardData| { &m.buyer_name },
            |m: &mut PayByRegisteredCardData| { &mut m.buyer_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_postcode",
            |m: &PayByRegisteredCardData| { &m.buyer_postcode },
            |m: &mut PayByRegisteredCardData| { &mut m.buyer_postcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buyer_tel",
            |m: &PayByRegisteredCardData| { &m.buyer_tel },
            |m: &mut PayByRegisteredCardData| { &mut m.buyer_tel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cancel_amount",
            |m: &PayByRegisteredCardData| { &m.cancel_amount },
            |m: &mut PayByRegisteredCardData| { &mut m.cancel_amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "cancel_history",
            |m: &PayByRegisteredCardData| { &m.cancel_history },
            |m: &mut PayByRegisteredCardData| { &mut m.cancel_history },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cancel_reason",
            |m: &PayByRegisteredCardData| { &m.cancel_reason },
            |m: &mut PayByRegisteredCardData| { &mut m.cancel_reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "cancel_receipt_urls",
            |m: &PayByRegisteredCardData| { &m.cancel_receipt_urls },
            |m: &mut PayByRegisteredCardData| { &mut m.cancel_receipt_urls },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cancelled_at",
            |m: &PayByRegisteredCardData| { &m.cancelled_at },
            |m: &mut PayByRegisteredCardData| { &mut m.cancelled_at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_code",
            |m: &PayByRegisteredCardData| { &m.card_code },
            |m: &mut PayByRegisteredCardData| { &mut m.card_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_name",
            |m: &PayByRegisteredCardData| { &m.card_name },
            |m: &mut PayByRegisteredCardData| { &mut m.card_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bin_number",
            |m: &PayByRegisteredCardData| { &m.bin_number },
            |m: &mut PayByRegisteredCardData| { &mut m.bin_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_installment",
            |m: &PayByRegisteredCardData| { &m.card_installment },
            |m: &mut PayByRegisteredCardData| { &mut m.card_installment },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_type",
            |m: &PayByRegisteredCardData| { &m.card_type },
            |m: &mut PayByRegisteredCardData| { &mut m.card_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cash_receipt_issued",
            |m: &PayByRegisteredCardData| { &m.cash_receipt_issued },
            |m: &mut PayByRegisteredCardData| { &mut m.cash_receipt_issued },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel",
            |m: &PayByRegisteredCardData| { &m.channel },
            |m: &mut PayByRegisteredCardData| { &mut m.channel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "currency",
            |m: &PayByRegisteredCardData| { &m.currency },
            |m: &mut PayByRegisteredCardData| { &mut m.currency },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "custom_data",
            |m: &PayByRegisteredCardData| { &m.custom_data },
            |m: &mut PayByRegisteredCardData| { &mut m.custom_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_uid",
            |m: &PayByRegisteredCardData| { &m.card_uid },
            |m: &mut PayByRegisteredCardData| { &mut m.card_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_uid_usage",
            |m: &PayByRegisteredCardData| { &m.customer_uid_usage },
            |m: &mut PayByRegisteredCardData| { &mut m.customer_uid_usage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fail_reason",
            |m: &PayByRegisteredCardData| { &m.fail_reason },
            |m: &mut PayByRegisteredCardData| { &mut m.fail_reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "failed_at",
            |m: &PayByRegisteredCardData| { &m.failed_at },
            |m: &mut PayByRegisteredCardData| { &mut m.failed_at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "imp_uid",
            |m: &PayByRegisteredCardData| { &m.imp_uid },
            |m: &mut PayByRegisteredCardData| { &mut m.imp_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "merchant_uid",
            |m: &PayByRegisteredCardData| { &m.merchant_uid },
            |m: &mut PayByRegisteredCardData| { &mut m.merchant_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "order_name",
            |m: &PayByRegisteredCardData| { &m.order_name },
            |m: &mut PayByRegisteredCardData| { &mut m.order_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "paid_at",
            |m: &PayByRegisteredCardData| { &m.paid_at },
            |m: &mut PayByRegisteredCardData| { &mut m.paid_at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pay_method",
            |m: &PayByRegisteredCardData| { &m.pay_method },
            |m: &mut PayByRegisteredCardData| { &mut m.pay_method },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pg_id",
            |m: &PayByRegisteredCardData| { &m.pg_id },
            |m: &mut PayByRegisteredCardData| { &mut m.pg_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pg_provider",
            |m: &PayByRegisteredCardData| { &m.pg_provider },
            |m: &mut PayByRegisteredCardData| { &mut m.pg_provider },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pg_tid",
            |m: &PayByRegisteredCardData| { &m.pg_tid },
            |m: &mut PayByRegisteredCardData| { &mut m.pg_tid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "receipt_url",
            |m: &PayByRegisteredCardData| { &m.receipt_url },
            |m: &mut PayByRegisteredCardData| { &mut m.receipt_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "started_at",
            |m: &PayByRegisteredCardData| { &m.started_at },
            |m: &mut PayByRegisteredCardData| { &mut m.started_at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &PayByRegisteredCardData| { &m.status },
            |m: &mut PayByRegisteredCardData| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user_agent",
            |m: &PayByRegisteredCardData| { &m.user_agent },
            |m: &mut PayByRegisteredCardData| { &mut m.user_agent },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PayByRegisteredCardData>(
            "PayByRegisteredCardData",
            9,
            fields,
        )
    }
}

impl ::protobuf::Message for PayByRegisteredCardData {
    fn is_initialized(&self) -> bool {
        for v in &self.cancel_history {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.amount = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.apply_num = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_addr = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_email = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_name = is.read_string()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_postcode = is.read_string()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.buyer_tel = is.read_string()?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cancel_amount = is.read_string()?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.cancel_history)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cancel_reason = is.read_string()?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.cancel_receipt_urls)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cancelled_at = is.read_int32()?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_code = is.read_string()?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_name = is.read_string()?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.bin_number = is.read_string()?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_installment = is.read_int32()?;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_type = is.read_int32()?;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cash_receipt_issued = is.read_bool()?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.channel = is.read_string()?;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.currency = is.read_string()?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.custom_data = is.read_string()?;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.card_uid = is.read_string()?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.customer_uid_usage = is.read_string()?;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.fail_reason = is.read_string()?;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.failed_at = is.read_int32()?;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.imp_uid = is.read_string()?;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.merchant_uid = is.read_string()?;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.order_name = is.read_string()?;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.paid_at = is.read_int32()?;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pay_method = is.read_string()?;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pg_id = is.read_string()?;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pg_provider = is.read_string()?;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pg_tid = is.read_string()?;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.receipt_url = is.read_string()?;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.started_at = is.read_int32()?;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.status = is.read_string()?;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.user_agent = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.amount);
        }
        if !self.apply_num.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.apply_num);
        }
        if !self.buyer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.buyer_addr);
        }
        if !self.buyer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.buyer_email);
        }
        if !self.buyer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.buyer_name);
        }
        if !self.buyer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.buyer_postcode);
        }
        if !self.buyer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.buyer_tel);
        }
        if !self.cancel_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.cancel_amount);
        }
        for value in &self.cancel_history {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.cancel_reason.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.cancel_reason);
        }
        for value in &self.cancel_receipt_urls {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        if self.cancelled_at != 0 {
            my_size += ::protobuf::rt::value_size(12, self.cancelled_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.card_code.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.card_code);
        }
        if !self.card_name.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.card_name);
        }
        if !self.bin_number.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.bin_number);
        }
        if self.card_installment != 0 {
            my_size += ::protobuf::rt::value_size(16, self.card_installment, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.card_type != 0 {
            my_size += ::protobuf::rt::value_size(17, self.card_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cash_receipt_issued != false {
            my_size += 3;
        }
        if !self.channel.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.channel);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.currency);
        }
        if !self.custom_data.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.custom_data);
        }
        if !self.card_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.card_uid);
        }
        if !self.customer_uid_usage.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.customer_uid_usage);
        }
        if !self.fail_reason.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.fail_reason);
        }
        if self.failed_at != 0 {
            my_size += ::protobuf::rt::value_size(25, self.failed_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.imp_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.imp_uid);
        }
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.merchant_uid);
        }
        if !self.order_name.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.order_name);
        }
        if self.paid_at != 0 {
            my_size += ::protobuf::rt::value_size(29, self.paid_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.pay_method.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.pay_method);
        }
        if !self.pg_id.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.pg_id);
        }
        if !self.pg_provider.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.pg_provider);
        }
        if !self.pg_tid.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.pg_tid);
        }
        if !self.receipt_url.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.receipt_url);
        }
        if self.started_at != 0 {
            my_size += ::protobuf::rt::value_size(35, self.started_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.status);
        }
        if !self.user_agent.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.user_agent);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.amount.is_empty() {
            os.write_string(1, &self.amount)?;
        }
        if !self.apply_num.is_empty() {
            os.write_string(2, &self.apply_num)?;
        }
        if !self.buyer_addr.is_empty() {
            os.write_string(3, &self.buyer_addr)?;
        }
        if !self.buyer_email.is_empty() {
            os.write_string(4, &self.buyer_email)?;
        }
        if !self.buyer_name.is_empty() {
            os.write_string(5, &self.buyer_name)?;
        }
        if !self.buyer_postcode.is_empty() {
            os.write_string(6, &self.buyer_postcode)?;
        }
        if !self.buyer_tel.is_empty() {
            os.write_string(7, &self.buyer_tel)?;
        }
        if !self.cancel_amount.is_empty() {
            os.write_string(8, &self.cancel_amount)?;
        }
        for v in &self.cancel_history {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        if !self.cancel_reason.is_empty() {
            os.write_string(10, &self.cancel_reason)?;
        }
        for v in &self.cancel_receipt_urls {
            os.write_string(11, &v)?;
        };
        if self.cancelled_at != 0 {
            os.write_int32(12, self.cancelled_at)?;
        }
        if !self.card_code.is_empty() {
            os.write_string(13, &self.card_code)?;
        }
        if !self.card_name.is_empty() {
            os.write_string(14, &self.card_name)?;
        }
        if !self.bin_number.is_empty() {
            os.write_string(15, &self.bin_number)?;
        }
        if self.card_installment != 0 {
            os.write_int32(16, self.card_installment)?;
        }
        if self.card_type != 0 {
            os.write_int32(17, self.card_type)?;
        }
        if self.cash_receipt_issued != false {
            os.write_bool(18, self.cash_receipt_issued)?;
        }
        if !self.channel.is_empty() {
            os.write_string(19, &self.channel)?;
        }
        if !self.currency.is_empty() {
            os.write_string(20, &self.currency)?;
        }
        if !self.custom_data.is_empty() {
            os.write_string(21, &self.custom_data)?;
        }
        if !self.card_uid.is_empty() {
            os.write_string(22, &self.card_uid)?;
        }
        if !self.customer_uid_usage.is_empty() {
            os.write_string(23, &self.customer_uid_usage)?;
        }
        if !self.fail_reason.is_empty() {
            os.write_string(24, &self.fail_reason)?;
        }
        if self.failed_at != 0 {
            os.write_int32(25, self.failed_at)?;
        }
        if !self.imp_uid.is_empty() {
            os.write_string(26, &self.imp_uid)?;
        }
        if !self.merchant_uid.is_empty() {
            os.write_string(27, &self.merchant_uid)?;
        }
        if !self.order_name.is_empty() {
            os.write_string(28, &self.order_name)?;
        }
        if self.paid_at != 0 {
            os.write_int32(29, self.paid_at)?;
        }
        if !self.pay_method.is_empty() {
            os.write_string(30, &self.pay_method)?;
        }
        if !self.pg_id.is_empty() {
            os.write_string(31, &self.pg_id)?;
        }
        if !self.pg_provider.is_empty() {
            os.write_string(32, &self.pg_provider)?;
        }
        if !self.pg_tid.is_empty() {
            os.write_string(33, &self.pg_tid)?;
        }
        if !self.receipt_url.is_empty() {
            os.write_string(34, &self.receipt_url)?;
        }
        if self.started_at != 0 {
            os.write_int32(35, self.started_at)?;
        }
        if !self.status.is_empty() {
            os.write_string(36, &self.status)?;
        }
        if !self.user_agent.is_empty() {
            os.write_string(37, &self.user_agent)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> PayByRegisteredCardData {
        PayByRegisteredCardData::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 9)
    }

    fn default_instance() -> &'static PayByRegisteredCardData {
        static instance: PayByRegisteredCardData = PayByRegisteredCardData {
            amount: ::std::string::String::new(),
            apply_num: ::std::string::String::new(),
            buyer_addr: ::std::string::String::new(),
            buyer_email: ::std::string::String::new(),
            buyer_name: ::std::string::String::new(),
            buyer_postcode: ::std::string::String::new(),
            buyer_tel: ::std::string::String::new(),
            cancel_amount: ::std::string::String::new(),
            cancel_history: ::std::vec::Vec::new(),
            cancel_reason: ::std::string::String::new(),
            cancel_receipt_urls: ::std::vec::Vec::new(),
            cancelled_at: 0,
            card_code: ::std::string::String::new(),
            card_name: ::std::string::String::new(),
            bin_number: ::std::string::String::new(),
            card_installment: 0,
            card_type: 0,
            cash_receipt_issued: false,
            channel: ::std::string::String::new(),
            currency: ::std::string::String::new(),
            custom_data: ::std::string::String::new(),
            card_uid: ::std::string::String::new(),
            customer_uid_usage: ::std::string::String::new(),
            fail_reason: ::std::string::String::new(),
            failed_at: 0,
            imp_uid: ::std::string::String::new(),
            merchant_uid: ::std::string::String::new(),
            order_name: ::std::string::String::new(),
            paid_at: 0,
            pay_method: ::std::string::String::new(),
            pg_id: ::std::string::String::new(),
            pg_provider: ::std::string::String::new(),
            pg_tid: ::std::string::String::new(),
            receipt_url: ::std::string::String::new(),
            started_at: 0,
            status: ::std::string::String::new(),
            user_agent: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for PayByRegisteredCardData {
    fn clear(&mut self) {
        self.amount.clear();
        self.apply_num.clear();
        self.buyer_addr.clear();
        self.buyer_email.clear();
        self.buyer_name.clear();
        self.buyer_postcode.clear();
        self.buyer_tel.clear();
        self.cancel_amount.clear();
        self.cancel_history.clear();
        self.cancel_reason.clear();
        self.cancel_receipt_urls.clear();
        self.cancelled_at = 0;
        self.card_code.clear();
        self.card_name.clear();
        self.bin_number.clear();
        self.card_installment = 0;
        self.card_type = 0;
        self.cash_receipt_issued = false;
        self.channel.clear();
        self.currency.clear();
        self.custom_data.clear();
        self.card_uid.clear();
        self.customer_uid_usage.clear();
        self.fail_reason.clear();
        self.failed_at = 0;
        self.imp_uid.clear();
        self.merchant_uid.clear();
        self.order_name.clear();
        self.paid_at = 0;
        self.pay_method.clear();
        self.pg_id.clear();
        self.pg_provider.clear();
        self.pg_tid.clear();
        self.receipt_url.clear();
        self.started_at = 0;
        self.status.clear();
        self.user_agent.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PayByRegisteredCardData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PayByRegisteredCardData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct PayByRegisteredCardResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<PayByRegisteredCardData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a PayByRegisteredCardResponse {
    fn default() -> &'a PayByRegisteredCardResponse {
        <PayByRegisteredCardResponse as ::protobuf::Message>::default_instance()
    }
}

impl PayByRegisteredCardResponse {
    pub fn new() -> PayByRegisteredCardResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &PayByRegisteredCardResponse| { &m.code },
            |m: &mut PayByRegisteredCardResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &PayByRegisteredCardResponse| { &m.message },
            |m: &mut PayByRegisteredCardResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PayByRegisteredCardData>(
            "response",
            |m: &PayByRegisteredCardResponse| { &m.response },
            |m: &mut PayByRegisteredCardResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PayByRegisteredCardResponse>(
            "PayByRegisteredCardResponse",
            10,
            fields,
        )
    }
}

impl ::protobuf::Message for PayByRegisteredCardResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> PayByRegisteredCardResponse {
        PayByRegisteredCardResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 10)
    }

    fn default_instance() -> &'static PayByRegisteredCardResponse {
        static instance: PayByRegisteredCardResponse = PayByRegisteredCardResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for PayByRegisteredCardResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PayByRegisteredCardResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PayByRegisteredCardResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelHistory {
    // message fields
    pub pg_tid: ::std::string::String,
    pub amount: ::std::string::String,
    pub cancelled_at: i32,
    pub reason: ::std::string::String,
    pub receipt_url: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelHistory {
    fn default() -> &'a CancelHistory {
        <CancelHistory as ::protobuf::Message>::default_instance()
    }
}

impl CancelHistory {
    pub fn new() -> CancelHistory {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pg_tid",
            |m: &CancelHistory| { &m.pg_tid },
            |m: &mut CancelHistory| { &mut m.pg_tid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &CancelHistory| { &m.amount },
            |m: &mut CancelHistory| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cancelled_at",
            |m: &CancelHistory| { &m.cancelled_at },
            |m: &mut CancelHistory| { &mut m.cancelled_at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reason",
            |m: &CancelHistory| { &m.reason },
            |m: &mut CancelHistory| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "receipt_url",
            |m: &CancelHistory| { &m.receipt_url },
            |m: &mut CancelHistory| { &mut m.receipt_url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CancelHistory>(
            "CancelHistory",
            11,
            fields,
        )
    }
}

impl ::protobuf::Message for CancelHistory {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pg_tid = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.amount = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cancelled_at = is.read_int32()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.reason = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.receipt_url = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pg_tid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pg_tid);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.amount);
        }
        if self.cancelled_at != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cancelled_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.reason.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.reason);
        }
        if !self.receipt_url.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.receipt_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pg_tid.is_empty() {
            os.write_string(1, &self.pg_tid)?;
        }
        if !self.amount.is_empty() {
            os.write_string(2, &self.amount)?;
        }
        if self.cancelled_at != 0 {
            os.write_int32(3, self.cancelled_at)?;
        }
        if !self.reason.is_empty() {
            os.write_string(4, &self.reason)?;
        }
        if !self.receipt_url.is_empty() {
            os.write_string(5, &self.receipt_url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> CancelHistory {
        CancelHistory::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 11)
    }

    fn default_instance() -> &'static CancelHistory {
        static instance: CancelHistory = CancelHistory {
            pg_tid: ::std::string::String::new(),
            amount: ::std::string::String::new(),
            cancelled_at: 0,
            reason: ::std::string::String::new(),
            receipt_url: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for CancelHistory {
    fn clear(&mut self) {
        self.pg_tid.clear();
        self.amount.clear();
        self.cancelled_at = 0;
        self.reason.clear();
        self.receipt_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelHistory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelHistory {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelCardPaymentRequest {
    // message fields
    pub imp_uid: ::std::string::String,
    pub amount: ::std::string::String,
    pub merchant_uid: ::std::string::String,
    pub duty_free_amount: ::std::string::String,
    pub reason: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelCardPaymentRequest {
    fn default() -> &'a CancelCardPaymentRequest {
        <CancelCardPaymentRequest as ::protobuf::Message>::default_instance()
    }
}

impl CancelCardPaymentRequest {
    pub fn new() -> CancelCardPaymentRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "imp_uid",
            |m: &CancelCardPaymentRequest| { &m.imp_uid },
            |m: &mut CancelCardPaymentRequest| { &mut m.imp_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &CancelCardPaymentRequest| { &m.amount },
            |m: &mut CancelCardPaymentRequest| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "merchant_uid",
            |m: &CancelCardPaymentRequest| { &m.merchant_uid },
            |m: &mut CancelCardPaymentRequest| { &mut m.merchant_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "duty_free_amount",
            |m: &CancelCardPaymentRequest| { &m.duty_free_amount },
            |m: &mut CancelCardPaymentRequest| { &mut m.duty_free_amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reason",
            |m: &CancelCardPaymentRequest| { &m.reason },
            |m: &mut CancelCardPaymentRequest| { &mut m.reason },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CancelCardPaymentRequest>(
            "CancelCardPaymentRequest",
            12,
            fields,
        )
    }
}

impl ::protobuf::Message for CancelCardPaymentRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.imp_uid = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.amount = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.merchant_uid = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.duty_free_amount = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.reason = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.imp_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.imp_uid);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.amount);
        }
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.merchant_uid);
        }
        if !self.duty_free_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.duty_free_amount);
        }
        if !self.reason.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.reason);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.imp_uid.is_empty() {
            os.write_string(1, &self.imp_uid)?;
        }
        if !self.amount.is_empty() {
            os.write_string(2, &self.amount)?;
        }
        if !self.merchant_uid.is_empty() {
            os.write_string(3, &self.merchant_uid)?;
        }
        if !self.duty_free_amount.is_empty() {
            os.write_string(4, &self.duty_free_amount)?;
        }
        if !self.reason.is_empty() {
            os.write_string(5, &self.reason)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> CancelCardPaymentRequest {
        CancelCardPaymentRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 12)
    }

    fn default_instance() -> &'static CancelCardPaymentRequest {
        static instance: CancelCardPaymentRequest = CancelCardPaymentRequest {
            imp_uid: ::std::string::String::new(),
            amount: ::std::string::String::new(),
            merchant_uid: ::std::string::String::new(),
            duty_free_amount: ::std::string::String::new(),
            reason: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for CancelCardPaymentRequest {
    fn clear(&mut self) {
        self.imp_uid.clear();
        self.amount.clear();
        self.merchant_uid.clear();
        self.duty_free_amount.clear();
        self.reason.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelCardPaymentRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelCardPaymentRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelCardPaymenttResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<PayByRegisteredCardData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelCardPaymenttResponse {
    fn default() -> &'a CancelCardPaymenttResponse {
        <CancelCardPaymenttResponse as ::protobuf::Message>::default_instance()
    }
}

impl CancelCardPaymenttResponse {
    pub fn new() -> CancelCardPaymenttResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &CancelCardPaymenttResponse| { &m.code },
            |m: &mut CancelCardPaymenttResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &CancelCardPaymenttResponse| { &m.message },
            |m: &mut CancelCardPaymenttResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PayByRegisteredCardData>(
            "response",
            |m: &CancelCardPaymenttResponse| { &m.response },
            |m: &mut CancelCardPaymenttResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CancelCardPaymenttResponse>(
            "CancelCardPaymenttResponse",
            13,
            fields,
        )
    }
}

impl ::protobuf::Message for CancelCardPaymenttResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> CancelCardPaymenttResponse {
        CancelCardPaymenttResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 13)
    }

    fn default_instance() -> &'static CancelCardPaymenttResponse {
        static instance: CancelCardPaymenttResponse = CancelCardPaymenttResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for CancelCardPaymenttResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelCardPaymenttResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelCardPaymenttResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bv2/payments/card/card.proto\x12\x07card_v2\x1a\x1cgoogle/api/annot\
    ations.proto\"\xdf\x02\n\x13CardRegisterRequest\x12\x19\n\x08card_uid\
    \x18\x01\x20\x01(\tR\x07cardUid\x12\x1f\n\x0bcard_number\x18\x02\x20\x01\
    (\tR\ncardNumber\x12\x16\n\x06expiry\x18\x03\x20\x01(\tR\x06expiry\x12\
    \x14\n\x05bitrh\x18\x04\x20\x01(\tR\x05bitrh\x12\x1d\n\npwd_2digit\x18\
    \x05\x20\x01(\tR\tpwd2digit\x12#\n\rcustomer_name\x18\x06\x20\x01(\tR\
    \x0ccustomerName\x12!\n\x0ccustomer_tel\x18\x07\x20\x01(\tR\x0bcustomerT\
    el\x12%\n\x0ecustomer_email\x18\x08\x20\x01(\tR\rcustomerEmail\x12#\n\rc\
    ustomer_addr\x18\t\x20\x01(\tR\x0ccustomerAddr\x12+\n\x11customer_postco\
    de\x18\n\x20\x01(\tR\x10customerPostcode\"\xc5\x03\n\x16CardRegisterResu\
    ltData\x12\x19\n\x08card_uid\x18\x01\x20\x01(\tR\x07cardUid\x12\x1b\n\tc\
    ard_name\x18\x02\x20\x01(\tR\x08cardName\x12\x1b\n\tcard_code\x18\x03\
    \x20\x01(\tR\x08cardCode\x12\x1f\n\x0bbin_numbrer\x18\x04\x20\x01(\tR\nb\
    inNumbrer\x12!\n\x0cbirth_number\x18\x05\x20\x01(\tR\x0bbirthNumber\x12\
    \x1b\n\tcard_type\x18\x06\x20\x01(\tR\x08cardType\x12#\n\rcustomer_name\
    \x18\x07\x20\x01(\tR\x0ccustomerName\x12!\n\x0ccustomer_tel\x18\x08\x20\
    \x01(\tR\x0bcustomerTel\x12%\n\x0ecustomer_email\x18\t\x20\x01(\tR\rcust\
    omerEmail\x12#\n\rcustomer_addr\x18\n\x20\x01(\tR\x0ccustomerAddr\x12+\n\
    \x11customer_postcode\x18\x0b\x20\x01(\tR\x10customerPostcode\x12\x1a\n\
    \x08inserted\x18\x0c\x20\x01(\x05R\x08inserted\x12\x18\n\x07updated\x18\
    \r\x20\x01(\x05R\x07updated\"\x81\x01\n\x14CardRegisterResponse\x12\x12\
    \n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\
    \x20\x01(\tR\x07message\x12;\n\x08response\x18\x03\x20\x01(\x0b2\x1f.car\
    d_v2.CardRegisterResultDataR\x08response\"/\n\x12GetCardInfoRequest\x12\
    \x19\n\x08card_uid\x18\x01\x20\x01(\tR\x07cardUid\"\xa1\x03\n\x0fGetCard\
    InfoData\x12\x19\n\x08card_uid\x18\x01\x20\x01(\tR\x07cardUid\x12#\n\rca\
    rd_provider\x18\x02\x20\x01(\tR\x0ccardProvider\x12\x1b\n\tcard_code\x18\
    \x03\x20\x01(\tR\x08cardCode\x12\x1d\n\nbin_number\x18\x04\x20\x01(\tR\t\
    binNumber\x12\x1b\n\tcard_type\x18\x05\x20\x01(\tR\x08cardType\x12#\n\rc\
    ustomer_name\x18\x06\x20\x01(\tR\x0ccustomerName\x12!\n\x0ccustomer_tel\
    \x18\x07\x20\x01(\tR\x0bcustomerTel\x12%\n\x0ecustomer_email\x18\x08\x20\
    \x01(\tR\rcustomerEmail\x12#\n\rcustomer_addr\x18\t\x20\x01(\tR\x0ccusto\
    merAddr\x12+\n\x11customer_postcode\x18\n\x20\x01(\tR\x10customerPostcod\
    e\x12\x1a\n\x08inserted\x18\x0b\x20\x01(\x05R\x08inserted\x12\x18\n\x07u\
    pdated\x18\x0c\x20\x01(\x05R\x07updated\"y\n\x13GetCardInfoResponse\x12\
    \x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\
    \x02\x20\x01(\tR\x07message\x124\n\x08response\x18\x03\x20\x01(\x0b2\x18\
    .card_v2.GetCardInfoDataR\x08response\"2\n\x15DeleteCardInfoRequest\x12\
    \x19\n\x08card_uid\x18\x01\x20\x01(\tR\x07cardUid\"F\n\x16DeleteCardInfo\
    Response\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07me\
    ssage\x18\x02\x20\x01(\tR\x07message\"\xe5\x02\n\x1aPayByRegisteredCardR\
    equest\x12\x19\n\x08card_uid\x18\x01\x20\x01(\tR\x07cardUid\x12!\n\x0cme\
    rchant_uid\x18\x02\x20\x01(\tR\x0bmerchantUid\x12\x16\n\x06amount\x18\
    \x03\x20\x01(\tR\x06amount\x12(\n\x10duty_free_amount\x18\x04\x20\x01(\t\
    R\x0edutyFreeAmount\x12\x1d\n\norder_name\x18\x05\x20\x01(\tR\torderName\
    \x12)\n\x10card_installment\x18\x06\x20\x01(\x05R\x0fcardInstallment\x12\
    9\n\x19interest_free_by_merchant\x18\x07\x20\x01(\x08R\x16interestFreeBy\
    Merchant\x12\x1f\n\x0bcustom_data\x18\x08\x20\x01(\tR\ncustomData\x12!\n\
    \x0ccallback_url\x18\t\x20\x01(\tR\x0bcallbackUrl\"\xd3\t\n\x17PayByRegi\
    steredCardData\x12\x16\n\x06amount\x18\x01\x20\x01(\tR\x06amount\x12\x1b\
    \n\tapply_num\x18\x02\x20\x01(\tR\x08applyNum\x12\x1d\n\nbuyer_addr\x18\
    \x03\x20\x01(\tR\tbuyerAddr\x12\x1f\n\x0bbuyer_email\x18\x04\x20\x01(\tR\
    \nbuyerEmail\x12\x1d\n\nbuyer_name\x18\x05\x20\x01(\tR\tbuyerName\x12%\n\
    \x0ebuyer_postcode\x18\x06\x20\x01(\tR\rbuyerPostcode\x12\x1b\n\tbuyer_t\
    el\x18\x07\x20\x01(\tR\x08buyerTel\x12#\n\rcancel_amount\x18\x08\x20\x01\
    (\tR\x0ccancelAmount\x12=\n\x0ecancel_history\x18\t\x20\x03(\x0b2\x16.ca\
    rd_v2.CancelHistoryR\rcancelHistory\x12#\n\rcancel_reason\x18\n\x20\x01(\
    \tR\x0ccancelReason\x12.\n\x13cancel_receipt_urls\x18\x0b\x20\x03(\tR\
    \x11cancelReceiptUrls\x12!\n\x0ccancelled_at\x18\x0c\x20\x01(\x05R\x0bca\
    ncelledAt\x12\x1b\n\tcard_code\x18\r\x20\x01(\tR\x08cardCode\x12\x1b\n\t\
    card_name\x18\x0e\x20\x01(\tR\x08cardName\x12\x1d\n\nbin_number\x18\x0f\
    \x20\x01(\tR\tbinNumber\x12)\n\x10card_installment\x18\x10\x20\x01(\x05R\
    \x0fcardInstallment\x12\x1b\n\tcard_type\x18\x11\x20\x01(\x05R\x08cardTy\
    pe\x12.\n\x13cash_receipt_issued\x18\x12\x20\x01(\x08R\x11cashReceiptIss\
    ued\x12\x18\n\x07channel\x18\x13\x20\x01(\tR\x07channel\x12\x1a\n\x08cur\
    rency\x18\x14\x20\x01(\tR\x08currency\x12\x1f\n\x0bcustom_data\x18\x15\
    \x20\x01(\tR\ncustomData\x12\x19\n\x08card_uid\x18\x16\x20\x01(\tR\x07ca\
    rdUid\x12,\n\x12customer_uid_usage\x18\x17\x20\x01(\tR\x10customerUidUsa\
    ge\x12\x1f\n\x0bfail_reason\x18\x18\x20\x01(\tR\nfailReason\x12\x1b\n\tf\
    ailed_at\x18\x19\x20\x01(\x05R\x08failedAt\x12\x17\n\x07imp_uid\x18\x1a\
    \x20\x01(\tR\x06impUid\x12!\n\x0cmerchant_uid\x18\x1b\x20\x01(\tR\x0bmer\
    chantUid\x12\x1d\n\norder_name\x18\x1c\x20\x01(\tR\torderName\x12\x17\n\
    \x07paid_at\x18\x1d\x20\x01(\x05R\x06paidAt\x12\x1d\n\npay_method\x18\
    \x1e\x20\x01(\tR\tpayMethod\x12\x13\n\x05pg_id\x18\x1f\x20\x01(\tR\x04pg\
    Id\x12\x1f\n\x0bpg_provider\x18\x20\x20\x01(\tR\npgProvider\x12\x15\n\
    \x06pg_tid\x18!\x20\x01(\tR\x05pgTid\x12\x1f\n\x0breceipt_url\x18\"\x20\
    \x01(\tR\nreceiptUrl\x12\x1d\n\nstarted_at\x18#\x20\x01(\x05R\tstartedAt\
    \x12\x16\n\x06status\x18$\x20\x01(\tR\x06status\x12\x1d\n\nuser_agent\
    \x18%\x20\x01(\tR\tuserAgent\"\x89\x01\n\x1bPayByRegisteredCardResponse\
    \x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\
    \x18\x02\x20\x01(\tR\x07message\x12<\n\x08response\x18\x03\x20\x01(\x0b2\
    \x20.card_v2.PayByRegisteredCardDataR\x08response\"\x9a\x01\n\rCancelHis\
    tory\x12\x15\n\x06pg_tid\x18\x01\x20\x01(\tR\x05pgTid\x12\x16\n\x06amoun\
    t\x18\x02\x20\x01(\tR\x06amount\x12!\n\x0ccancelled_at\x18\x03\x20\x01(\
    \x05R\x0bcancelledAt\x12\x16\n\x06reason\x18\x04\x20\x01(\tR\x06reason\
    \x12\x1f\n\x0breceipt_url\x18\x05\x20\x01(\tR\nreceiptUrl\"\xb0\x01\n\
    \x18CancelCardPaymentRequest\x12\x17\n\x07imp_uid\x18\x01\x20\x01(\tR\
    \x06impUid\x12\x16\n\x06amount\x18\x02\x20\x01(\tR\x06amount\x12!\n\x0cm\
    erchant_uid\x18\x03\x20\x01(\tR\x0bmerchantUid\x12(\n\x10duty_free_amoun\
    t\x18\x04\x20\x01(\tR\x0edutyFreeAmount\x12\x16\n\x06reason\x18\x05\x20\
    \x01(\tR\x06reason\"\x88\x01\n\x1aCancelCardPaymenttResponse\x12\x12\n\
    \x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\
    \x01(\tR\x07message\x12<\n\x08response\x18\x03\x20\x01(\x0b2\x20.card_v2\
    .PayByRegisteredCardDataR\x08response2\xc2\x05\n\x12PaymentCardService\
    \x12u\n\x0fCardRegisterRPC\x12\x1c.card_v2.CardRegisterRequest\x1a\x1d.c\
    ard_v2.CardRegisterResponse\"%\x82\xd3\xe4\x93\x02\x1f\"\x1a/api/v2/paym\
    ents/card/info:\x01*\x12z\n\x0eGetCardInfoRPC\x12\x1b.card_v2.GetCardInf\
    oRequest\x1a\x1c.card_v2.GetCardInfoResponse\"-\x82\xd3\xe4\x93\x02'\x12\
    %/api/v2/payments/card/info/{card_uid}\x12\x83\x01\n\x11DeleteCardInfoRP\
    C\x12\x1e.card_v2.DeleteCardInfoRequest\x1a\x1f.card_v2.DeleteCardInfoRe\
    sponse\"-\x82\xd3\xe4\x93\x02'*%/api/v2/payments/card/info/{card_uid}\
    \x12\x92\x01\n\x17PayByRegiseteredCardRPC\x12#.card_v2.PayByRegisteredCa\
    rdRequest\x1a$.card_v2.PayByRegisteredCardResponse\",\x82\xd3\xe4\x93\
    \x02&\"$/api/v2/payments/card/pay/registered\x12\x9d\x01\n\x18CancelRegi\
    seteredCardRPC\x12!.card_v2.CancelCardPaymentRequest\x1a#.card_v2.Cancel\
    CardPaymenttResponse\"9\x82\xd3\xe4\x93\x023\"1/api/v2/payments/card/can\
    cel/registered/{imp_uid}B:Z8github.com/iamport/interface/gen_src/go/v2/p\
    ayments/cardJ\xde7\n\x07\x12\x05\0\0\xbb\x01\x01\n\x08\n\x01\x0c\x12\x03\
    \0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x10\n\t\n\x02\x03\0\x12\x03\x03\0\
    &\n\x08\n\x01\x08\x12\x03\x05\0O\n\t\n\x02\x08\x0b\x12\x03\x05\0O\n\n\n\
    \x02\x06\0\x12\x04\x07\0&\x01\n\n\n\x03\x06\0\x01\x12\x03\x07\x08\x1a\n\
    \x0c\n\x04\x06\0\x02\0\x12\x04\x08\x04\r\x05\n\x0c\n\x05\x06\0\x02\0\x01\
    \x12\x03\x08\x08\x17\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x08\x18+\n\x0c\
    \n\x05\x06\0\x02\0\x03\x12\x03\x086J\n\r\n\x05\x06\0\x02\0\x04\x12\x04\t\
    \x08\x0c\n\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04\t\x08\x0c\n\n\
    \x0c\n\x04\x06\0\x02\x01\x12\x04\x0f\x04\x13\x05\n\x0c\n\x05\x06\0\x02\
    \x01\x01\x12\x03\x0f\x08\x16\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x0f\
    \x17)\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x0f4G\n\r\n\x05\x06\0\x02\
    \x01\x04\x12\x04\x10\x08\x12\n\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\
    \x12\x04\x10\x08\x12\n\n\x0c\n\x04\x06\0\x02\x02\x12\x04\x15\x04\x19\x05\
    \n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x15\x08\x19\n\x0c\n\x05\x06\0\x02\
    \x02\x02\x12\x03\x15\x1a/\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x15:P\n\
    \r\n\x05\x06\0\x02\x02\x04\x12\x04\x16\x08\x18\n\n\x11\n\t\x06\0\x02\x02\
    \x04\xb0\xca\xbc\"\x12\x04\x16\x08\x18\n\n\x0c\n\x04\x06\0\x02\x03\x12\
    \x04\x1b\x04\x1f\x05\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x1b\x08\x1f\n\
    \x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x1b\x20:\n\x0c\n\x05\x06\0\x02\x03\
    \x03\x12\x03\x1bE`\n\r\n\x05\x06\0\x02\x03\x04\x12\x04\x1c\x08\x1e\n\n\
    \x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04\x1c\x08\x1e\n\n\x0c\n\
    \x04\x06\0\x02\x04\x12\x04!\x04%\x05\n\x0c\n\x05\x06\0\x02\x04\x01\x12\
    \x03!\x08\x20\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03!!9\n\x0c\n\x05\x06\0\
    \x02\x04\x03\x12\x03!D^\n\r\n\x05\x06\0\x02\x04\x04\x12\x04\"\x08$\n\n\
    \x11\n\t\x06\0\x02\x04\x04\xb0\xca\xbc\"\x12\x04\"\x08$\n\n\n\n\x02\x04\
    \0\x12\x04(\03\x01\n\n\n\x03\x04\0\x01\x12\x03(\x08\x1b\n#\n\x04\x04\0\
    \x02\0\x12\x03)\x04\x18\"\x16\x20a.k.a.)\x20customer_uid\n\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03)\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03)\x0b\
    \x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03)\x16\x17\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03*\x04\x1b\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03*\x04\n\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03*\x0b\x16\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03*\x19\x1a\n\x0b\n\x04\x04\0\x02\x02\x12\x03+\x04\x16\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x03+\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03+\
    \x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03+\x14\x15\n\x0b\n\x04\x04\
    \0\x02\x03\x12\x03,\x04\x15\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03,\x04\n\
    \n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03,\x0b\x10\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03,\x13\x14\n\x0b\n\x04\x04\0\x02\x04\x12\x03-\x04\x1a\n\
    \x0c\n\x05\x04\0\x02\x04\x05\x12\x03-\x04\n\n\x0c\n\x05\x04\0\x02\x04\
    \x01\x12\x03-\x0b\x15\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03-\x18\x19\n\
    \x0b\n\x04\x04\0\x02\x05\x12\x03.\x04\x1d\n\x0c\n\x05\x04\0\x02\x05\x05\
    \x12\x03.\x04\n\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03.\x0b\x18\n\x0c\n\
    \x05\x04\0\x02\x05\x03\x12\x03.\x1b\x1c\n\x0b\n\x04\x04\0\x02\x06\x12\
    \x03/\x04\x1c\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03/\x04\n\n\x0c\n\x05\
    \x04\0\x02\x06\x01\x12\x03/\x0b\x17\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03/\x1a\x1b\n\x0b\n\x04\x04\0\x02\x07\x12\x030\x04\x1e\n\x0c\n\x05\x04\
    \0\x02\x07\x05\x12\x030\x04\n\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x030\x0b\
    \x19\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x030\x1c\x1d\n\x0b\n\x04\x04\0\
    \x02\x08\x12\x031\x04\x1d\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x031\x04\n\n\
    \x0c\n\x05\x04\0\x02\x08\x01\x12\x031\x0b\x18\n\x0c\n\x05\x04\0\x02\x08\
    \x03\x12\x031\x1b\x1c\n\x0b\n\x04\x04\0\x02\t\x12\x032\x04\"\n\x0c\n\x05\
    \x04\0\x02\t\x05\x12\x032\x04\n\n\x0c\n\x05\x04\0\x02\t\x01\x12\x032\x0b\
    \x1c\n\x0c\n\x05\x04\0\x02\t\x03\x12\x032\x1f!\n\n\n\x02\x04\x01\x12\x04\
    5\0C\x01\n\n\n\x03\x04\x01\x01\x12\x035\x08\x1e\n\x0b\n\x04\x04\x01\x02\
    \0\x12\x036\x04\x18\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x036\x04\n\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x036\x0b\x13\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x036\x16\x17\n%\n\x04\x04\x01\x02\x01\x12\x037\x04\x19\"\x18\x20car\
    d\x20alias\x20of\x20the\x20user\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\
    \x037\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x037\x0b\x14\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x037\x17\x18\n\x0b\n\x04\x04\x01\x02\x02\x12\
    \x038\x04\x19\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x038\x04\n\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x038\x0b\x14\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x038\x17\x18\n.\n\x04\x04\x01\x02\x03\x12\x039\x04\x1b\"!\x20Only\
    \x20masked\x20company\x20can\x20provide\n\n\x0c\n\x05\x04\x01\x02\x03\
    \x05\x12\x039\x04\n\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x039\x0b\x16\n\
    \x0c\n\x05\x04\x01\x02\x03\x03\x12\x039\x19\x1a\n\x0b\n\x04\x04\x01\x02\
    \x04\x12\x03:\x04\x1c\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03:\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x04\x01\x12\x03:\x0b\x17\n\x0c\n\x05\x04\x01\x02\
    \x04\x03\x12\x03:\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x05\x12\x03;\x04\x19\n\
    \x0c\n\x05\x04\x01\x02\x05\x05\x12\x03;\x04\n\n\x0c\n\x05\x04\x01\x02\
    \x05\x01\x12\x03;\x0b\x14\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03;\x17\
    \x18\n\x0b\n\x04\x04\x01\x02\x06\x12\x03<\x04\x1d\n\x0c\n\x05\x04\x01\
    \x02\x06\x05\x12\x03<\x04\n\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03<\x0b\
    \x18\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03<\x1b\x1c\n\x0b\n\x04\x04\
    \x01\x02\x07\x12\x03=\x04\x1c\n\x0c\n\x05\x04\x01\x02\x07\x05\x12\x03=\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\x03=\x0b\x17\n\x0c\n\x05\x04\
    \x01\x02\x07\x03\x12\x03=\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x08\x12\x03>\
    \x04\x1e\n\x0c\n\x05\x04\x01\x02\x08\x05\x12\x03>\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x08\x01\x12\x03>\x0b\x19\n\x0c\n\x05\x04\x01\x02\x08\x03\x12\
    \x03>\x1c\x1d\n\x0b\n\x04\x04\x01\x02\t\x12\x03?\x04\x1e\n\x0c\n\x05\x04\
    \x01\x02\t\x05\x12\x03?\x04\n\n\x0c\n\x05\x04\x01\x02\t\x01\x12\x03?\x0b\
    \x18\n\x0c\n\x05\x04\x01\x02\t\x03\x12\x03?\x1b\x1d\n\x0b\n\x04\x04\x01\
    \x02\n\x12\x03@\x04\"\n\x0c\n\x05\x04\x01\x02\n\x05\x12\x03@\x04\n\n\x0c\
    \n\x05\x04\x01\x02\n\x01\x12\x03@\x0b\x1c\n\x0c\n\x05\x04\x01\x02\n\x03\
    \x12\x03@\x1f!\n\x0b\n\x04\x04\x01\x02\x0b\x12\x03A\x04\x18\n\x0c\n\x05\
    \x04\x01\x02\x0b\x05\x12\x03A\x04\t\n\x0c\n\x05\x04\x01\x02\x0b\x01\x12\
    \x03A\n\x12\n\x0c\n\x05\x04\x01\x02\x0b\x03\x12\x03A\x15\x17\n\x0b\n\x04\
    \x04\x01\x02\x0c\x12\x03B\x04\x17\n\x0c\n\x05\x04\x01\x02\x0c\x05\x12\
    \x03B\x04\t\n\x0c\n\x05\x04\x01\x02\x0c\x01\x12\x03B\n\x11\n\x0c\n\x05\
    \x04\x01\x02\x0c\x03\x12\x03B\x14\x16\n\n\n\x02\x04\x02\x12\x04E\0I\x01\
    \n\n\n\x03\x04\x02\x01\x12\x03E\x08\x1c\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03F\x04\x13\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03F\x04\t\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03F\n\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03F\
    \x11\x12\n\x0b\n\x04\x04\x02\x02\x01\x12\x03G\x04\x17\n\x0c\n\x05\x04\
    \x02\x02\x01\x05\x12\x03G\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03G\
    \x0b\x12\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03G\x15\x16\n\x0b\n\x04\
    \x04\x02\x02\x02\x12\x03H\x04(\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03H\
    \x04\x1a\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03H\x1b#\n\x0c\n\x05\x04\
    \x02\x02\x02\x03\x12\x03H&'\n\n\n\x02\x04\x03\x12\x04K\0M\x01\n\n\n\x03\
    \x04\x03\x01\x12\x03K\x08\x1a\n\x0b\n\x04\x04\x03\x02\0\x12\x03L\x04\x18\
    \n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03L\x04\n\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03L\x0b\x13\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03L\x16\x17\n\n\
    \n\x02\x04\x04\x12\x04O\0\\\x01\n\n\n\x03\x04\x04\x01\x12\x03O\x08\x17\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x03P\x04\x18\n\x0c\n\x05\x04\x04\x02\0\x05\
    \x12\x03P\x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03P\x0b\x13\n\x0c\n\
    \x05\x04\x04\x02\0\x03\x12\x03P\x16\x17\n\x0b\n\x04\x04\x04\x02\x01\x12\
    \x03Q\x04\x1d\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03Q\x04\n\n\x0c\n\x05\
    \x04\x04\x02\x01\x01\x12\x03Q\x0b\x18\n\x0c\n\x05\x04\x04\x02\x01\x03\
    \x12\x03Q\x1b\x1c\n\x0b\n\x04\x04\x04\x02\x02\x12\x03R\x04\x19\n\x0c\n\
    \x05\x04\x04\x02\x02\x05\x12\x03R\x04\n\n\x0c\n\x05\x04\x04\x02\x02\x01\
    \x12\x03R\x0b\x14\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03R\x17\x18\n\x0b\
    \n\x04\x04\x04\x02\x03\x12\x03S\x04\x1a\n\x0c\n\x05\x04\x04\x02\x03\x05\
    \x12\x03S\x04\n\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03S\x0b\x15\n\x0c\n\
    \x05\x04\x04\x02\x03\x03\x12\x03S\x18\x19\n\x0b\n\x04\x04\x04\x02\x04\
    \x12\x03T\x04\x19\n\x0c\n\x05\x04\x04\x02\x04\x05\x12\x03T\x04\n\n\x0c\n\
    \x05\x04\x04\x02\x04\x01\x12\x03T\x0b\x14\n\x0c\n\x05\x04\x04\x02\x04\
    \x03\x12\x03T\x17\x18\n\x0b\n\x04\x04\x04\x02\x05\x12\x03U\x04\x1d\n\x0c\
    \n\x05\x04\x04\x02\x05\x05\x12\x03U\x04\n\n\x0c\n\x05\x04\x04\x02\x05\
    \x01\x12\x03U\x0b\x18\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03U\x1b\x1c\n\
    \x0b\n\x04\x04\x04\x02\x06\x12\x03V\x04\x1c\n\x0c\n\x05\x04\x04\x02\x06\
    \x05\x12\x03V\x04\n\n\x0c\n\x05\x04\x04\x02\x06\x01\x12\x03V\x0b\x17\n\
    \x0c\n\x05\x04\x04\x02\x06\x03\x12\x03V\x1a\x1b\n\x0b\n\x04\x04\x04\x02\
    \x07\x12\x03W\x04\x1e\n\x0c\n\x05\x04\x04\x02\x07\x05\x12\x03W\x04\n\n\
    \x0c\n\x05\x04\x04\x02\x07\x01\x12\x03W\x0b\x19\n\x0c\n\x05\x04\x04\x02\
    \x07\x03\x12\x03W\x1c\x1d\n\x0b\n\x04\x04\x04\x02\x08\x12\x03X\x04\x1d\n\
    \x0c\n\x05\x04\x04\x02\x08\x05\x12\x03X\x04\n\n\x0c\n\x05\x04\x04\x02\
    \x08\x01\x12\x03X\x0b\x18\n\x0c\n\x05\x04\x04\x02\x08\x03\x12\x03X\x1b\
    \x1c\n\x0b\n\x04\x04\x04\x02\t\x12\x03Y\x04\"\n\x0c\n\x05\x04\x04\x02\t\
    \x05\x12\x03Y\x04\n\n\x0c\n\x05\x04\x04\x02\t\x01\x12\x03Y\x0b\x1c\n\x0c\
    \n\x05\x04\x04\x02\t\x03\x12\x03Y\x1f!\n\x0b\n\x04\x04\x04\x02\n\x12\x03\
    Z\x04\x18\n\x0c\n\x05\x04\x04\x02\n\x05\x12\x03Z\x04\t\n\x0c\n\x05\x04\
    \x04\x02\n\x01\x12\x03Z\n\x12\n\x0c\n\x05\x04\x04\x02\n\x03\x12\x03Z\x15\
    \x17\n\x0b\n\x04\x04\x04\x02\x0b\x12\x03[\x04\x17\n\x0c\n\x05\x04\x04\
    \x02\x0b\x05\x12\x03[\x04\t\n\x0c\n\x05\x04\x04\x02\x0b\x01\x12\x03[\n\
    \x11\n\x0c\n\x05\x04\x04\x02\x0b\x03\x12\x03[\x14\x16\n\n\n\x02\x04\x05\
    \x12\x04^\0b\x01\n\n\n\x03\x04\x05\x01\x12\x03^\x08\x1b\n\x0b\n\x04\x04\
    \x05\x02\0\x12\x03_\x04\x13\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03_\x04\t\
    \n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03_\n\x0e\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x03_\x11\x12\n\x0b\n\x04\x04\x05\x02\x01\x12\x03`\x04\x17\n\x0c\
    \n\x05\x04\x05\x02\x01\x05\x12\x03`\x04\n\n\x0c\n\x05\x04\x05\x02\x01\
    \x01\x12\x03`\x0b\x12\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03`\x15\x16\n\
    \x0b\n\x04\x04\x05\x02\x02\x12\x03a\x04!\n\x0c\n\x05\x04\x05\x02\x02\x06\
    \x12\x03a\x04\x13\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03a\x14\x1c\n\x0c\
    \n\x05\x04\x05\x02\x02\x03\x12\x03a\x1f\x20\n\n\n\x02\x04\x06\x12\x04d\0\
    f\x01\n\n\n\x03\x04\x06\x01\x12\x03d\x08\x1d\n\x0b\n\x04\x04\x06\x02\0\
    \x12\x03e\x04\x18\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03e\x04\n\n\x0c\n\
    \x05\x04\x06\x02\0\x01\x12\x03e\x0b\x13\n\x0c\n\x05\x04\x06\x02\0\x03\
    \x12\x03e\x16\x17\n\n\n\x02\x04\x07\x12\x04h\0k\x01\n\n\n\x03\x04\x07\
    \x01\x12\x03h\x08\x1e\n\x0b\n\x04\x04\x07\x02\0\x12\x03i\x04\x13\n\x0c\n\
    \x05\x04\x07\x02\0\x05\x12\x03i\x04\t\n\x0c\n\x05\x04\x07\x02\0\x01\x12\
    \x03i\n\x0e\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03i\x11\x12\n\x0b\n\x04\
    \x04\x07\x02\x01\x12\x03j\x04\x17\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\
    \x03j\x04\n\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03j\x0b\x12\n\x0c\n\x05\
    \x04\x07\x02\x01\x03\x12\x03j\x15\x16\n\n\n\x02\x04\x08\x12\x04m\0w\x01\
    \n\n\n\x03\x04\x08\x01\x12\x03m\x08\"\n\x0b\n\x04\x04\x08\x02\0\x12\x03n\
    \x04\x18\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03n\x04\n\n\x0c\n\x05\x04\
    \x08\x02\0\x01\x12\x03n\x0b\x13\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03n\
    \x16\x17\n\x0b\n\x04\x04\x08\x02\x01\x12\x03o\x04\x1c\n\x0c\n\x05\x04\
    \x08\x02\x01\x05\x12\x03o\x04\n\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03o\
    \x0b\x17\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03o\x1a\x1b\n\x0b\n\x04\
    \x04\x08\x02\x02\x12\x03p\x04\x16\n\x0c\n\x05\x04\x08\x02\x02\x05\x12\
    \x03p\x04\n\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03p\x0b\x11\n\x0c\n\x05\
    \x04\x08\x02\x02\x03\x12\x03p\x14\x15\n\x0b\n\x04\x04\x08\x02\x03\x12\
    \x03q\x04\x20\n\x0c\n\x05\x04\x08\x02\x03\x05\x12\x03q\x04\n\n\x0c\n\x05\
    \x04\x08\x02\x03\x01\x12\x03q\x0b\x1b\n\x0c\n\x05\x04\x08\x02\x03\x03\
    \x12\x03q\x1e\x1f\n\x1b\n\x04\x04\x08\x02\x04\x12\x03r\x04\x1a\"\x0e\x20\
    a.k.a.)\x20name\n\n\x0c\n\x05\x04\x08\x02\x04\x05\x12\x03r\x04\n\n\x0c\n\
    \x05\x04\x08\x02\x04\x01\x12\x03r\x0b\x15\n\x0c\n\x05\x04\x08\x02\x04\
    \x03\x12\x03r\x18\x19\n!\n\x04\x04\x08\x02\x05\x12\x03s\x04\x1f\"\x14\
    \x20a.k.a.)\x20card_quota\n\n\x0c\n\x05\x04\x08\x02\x05\x05\x12\x03s\x04\
    \t\n\x0c\n\x05\x04\x08\x02\x05\x01\x12\x03s\n\x1a\n\x0c\n\x05\x04\x08\
    \x02\x05\x03\x12\x03s\x1d\x1e\n\x0b\n\x04\x04\x08\x02\x06\x12\x03t\x04'\
    \n\x0c\n\x05\x04\x08\x02\x06\x05\x12\x03t\x04\x08\n\x0c\n\x05\x04\x08\
    \x02\x06\x01\x12\x03t\t\"\n\x0c\n\x05\x04\x08\x02\x06\x03\x12\x03t%&\n\
    \x0b\n\x04\x04\x08\x02\x07\x12\x03u\x04\x1b\n\x0c\n\x05\x04\x08\x02\x07\
    \x05\x12\x03u\x04\n\n\x0c\n\x05\x04\x08\x02\x07\x01\x12\x03u\x0b\x16\n\
    \x0c\n\x05\x04\x08\x02\x07\x03\x12\x03u\x19\x1a\n\x0b\n\x04\x04\x08\x02\
    \x08\x12\x03v\x04\x1c\n\x0c\n\x05\x04\x08\x02\x08\x05\x12\x03v\x04\n\n\
    \x0c\n\x05\x04\x08\x02\x08\x01\x12\x03v\x0b\x17\n\x0c\n\x05\x04\x08\x02\
    \x08\x03\x12\x03v\x1a\x1b\n\x0b\n\x02\x04\t\x12\x05y\0\x9f\x01\x01\n\n\n\
    \x03\x04\t\x01\x12\x03y\x08\x1f\n\x0b\n\x04\x04\t\x02\0\x12\x03z\x04\x16\
    \n\x0c\n\x05\x04\t\x02\0\x05\x12\x03z\x04\n\n\x0c\n\x05\x04\t\x02\0\x01\
    \x12\x03z\x0b\x11\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03z\x14\x15\n\x0b\n\
    \x04\x04\t\x02\x01\x12\x03{\x04\x19\n\x0c\n\x05\x04\t\x02\x01\x05\x12\
    \x03{\x04\n\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03{\x0b\x14\n\x0c\n\x05\
    \x04\t\x02\x01\x03\x12\x03{\x17\x18\n\x0b\n\x04\x04\t\x02\x02\x12\x03|\
    \x04\x1a\n\x0c\n\x05\x04\t\x02\x02\x05\x12\x03|\x04\n\n\x0c\n\x05\x04\t\
    \x02\x02\x01\x12\x03|\x0b\x15\n\x0c\n\x05\x04\t\x02\x02\x03\x12\x03|\x18\
    \x19\n\x0b\n\x04\x04\t\x02\x03\x12\x03}\x04\x1b\n\x0c\n\x05\x04\t\x02\
    \x03\x05\x12\x03}\x04\n\n\x0c\n\x05\x04\t\x02\x03\x01\x12\x03}\x0b\x16\n\
    \x0c\n\x05\x04\t\x02\x03\x03\x12\x03}\x19\x1a\n\x0b\n\x04\x04\t\x02\x04\
    \x12\x03~\x04\x1a\n\x0c\n\x05\x04\t\x02\x04\x05\x12\x03~\x04\n\n\x0c\n\
    \x05\x04\t\x02\x04\x01\x12\x03~\x0b\x15\n\x0c\n\x05\x04\t\x02\x04\x03\
    \x12\x03~\x18\x19\n\x0b\n\x04\x04\t\x02\x05\x12\x03\x7f\x04\x1e\n\x0c\n\
    \x05\x04\t\x02\x05\x05\x12\x03\x7f\x04\n\n\x0c\n\x05\x04\t\x02\x05\x01\
    \x12\x03\x7f\x0b\x19\n\x0c\n\x05\x04\t\x02\x05\x03\x12\x03\x7f\x1c\x1d\n\
    \x0c\n\x04\x04\t\x02\x06\x12\x04\x80\x01\x04\x19\n\r\n\x05\x04\t\x02\x06\
    \x05\x12\x04\x80\x01\x04\n\n\r\n\x05\x04\t\x02\x06\x01\x12\x04\x80\x01\
    \x0b\x14\n\r\n\x05\x04\t\x02\x06\x03\x12\x04\x80\x01\x17\x18\n\x0c\n\x04\
    \x04\t\x02\x07\x12\x04\x81\x01\x04\x1d\n\r\n\x05\x04\t\x02\x07\x05\x12\
    \x04\x81\x01\x04\n\n\r\n\x05\x04\t\x02\x07\x01\x12\x04\x81\x01\x0b\x18\n\
    \r\n\x05\x04\t\x02\x07\x03\x12\x04\x81\x01\x1b\x1c\n\x0c\n\x04\x04\t\x02\
    \x08\x12\x04\x82\x01\x04.\n\r\n\x05\x04\t\x02\x08\x04\x12\x04\x82\x01\
    \x04\x0c\n\r\n\x05\x04\t\x02\x08\x06\x12\x04\x82\x01\r\x1a\n\r\n\x05\x04\
    \t\x02\x08\x01\x12\x04\x82\x01\x1b)\n\r\n\x05\x04\t\x02\x08\x03\x12\x04\
    \x82\x01,-\n\x0c\n\x04\x04\t\x02\t\x12\x04\x83\x01\x04\x1e\n\r\n\x05\x04\
    \t\x02\t\x05\x12\x04\x83\x01\x04\n\n\r\n\x05\x04\t\x02\t\x01\x12\x04\x83\
    \x01\x0b\x18\n\r\n\x05\x04\t\x02\t\x03\x12\x04\x83\x01\x1b\x1d\n\x0c\n\
    \x04\x04\t\x02\n\x12\x04\x84\x01\x04-\n\r\n\x05\x04\t\x02\n\x04\x12\x04\
    \x84\x01\x04\x0c\n\r\n\x05\x04\t\x02\n\x05\x12\x04\x84\x01\r\x13\n\r\n\
    \x05\x04\t\x02\n\x01\x12\x04\x84\x01\x14'\n\r\n\x05\x04\t\x02\n\x03\x12\
    \x04\x84\x01*,\n\x0c\n\x04\x04\t\x02\x0b\x12\x04\x85\x01\x04\x1c\n\r\n\
    \x05\x04\t\x02\x0b\x05\x12\x04\x85\x01\x04\t\n\r\n\x05\x04\t\x02\x0b\x01\
    \x12\x04\x85\x01\n\x16\n\r\n\x05\x04\t\x02\x0b\x03\x12\x04\x85\x01\x19\
    \x1b\n\x0c\n\x04\x04\t\x02\x0c\x12\x04\x86\x01\x04\x1a\n\r\n\x05\x04\t\
    \x02\x0c\x05\x12\x04\x86\x01\x04\n\n\r\n\x05\x04\t\x02\x0c\x01\x12\x04\
    \x86\x01\x0b\x14\n\r\n\x05\x04\t\x02\x0c\x03\x12\x04\x86\x01\x17\x19\n\
    \x0c\n\x04\x04\t\x02\r\x12\x04\x87\x01\x04\x1a\n\r\n\x05\x04\t\x02\r\x05\
    \x12\x04\x87\x01\x04\n\n\r\n\x05\x04\t\x02\r\x01\x12\x04\x87\x01\x0b\x14\
    \n\r\n\x05\x04\t\x02\r\x03\x12\x04\x87\x01\x17\x19\n\x0c\n\x04\x04\t\x02\
    \x0e\x12\x04\x88\x01\x04\x1b\n\r\n\x05\x04\t\x02\x0e\x05\x12\x04\x88\x01\
    \x04\n\n\r\n\x05\x04\t\x02\x0e\x01\x12\x04\x88\x01\x0b\x15\n\r\n\x05\x04\
    \t\x02\x0e\x03\x12\x04\x88\x01\x18\x1a\n\x0c\n\x04\x04\t\x02\x0f\x12\x04\
    \x89\x01\x04\x20\n\r\n\x05\x04\t\x02\x0f\x05\x12\x04\x89\x01\x04\t\n\r\n\
    \x05\x04\t\x02\x0f\x01\x12\x04\x89\x01\n\x1a\n\r\n\x05\x04\t\x02\x0f\x03\
    \x12\x04\x89\x01\x1d\x1f\n\x0c\n\x04\x04\t\x02\x10\x12\x04\x8a\x01\x04\
    \x19\n\r\n\x05\x04\t\x02\x10\x05\x12\x04\x8a\x01\x04\t\n\r\n\x05\x04\t\
    \x02\x10\x01\x12\x04\x8a\x01\n\x13\n\r\n\x05\x04\t\x02\x10\x03\x12\x04\
    \x8a\x01\x16\x18\n\x0c\n\x04\x04\t\x02\x11\x12\x04\x8b\x01\x04\"\n\r\n\
    \x05\x04\t\x02\x11\x05\x12\x04\x8b\x01\x04\x08\n\r\n\x05\x04\t\x02\x11\
    \x01\x12\x04\x8b\x01\t\x1c\n\r\n\x05\x04\t\x02\x11\x03\x12\x04\x8b\x01\
    \x1f!\n\x0c\n\x04\x04\t\x02\x12\x12\x04\x8c\x01\x04\x18\n\r\n\x05\x04\t\
    \x02\x12\x05\x12\x04\x8c\x01\x04\n\n\r\n\x05\x04\t\x02\x12\x01\x12\x04\
    \x8c\x01\x0b\x12\n\r\n\x05\x04\t\x02\x12\x03\x12\x04\x8c\x01\x15\x17\n\
    \x0c\n\x04\x04\t\x02\x13\x12\x04\x8d\x01\x04\x19\n\r\n\x05\x04\t\x02\x13\
    \x05\x12\x04\x8d\x01\x04\n\n\r\n\x05\x04\t\x02\x13\x01\x12\x04\x8d\x01\
    \x0b\x13\n\r\n\x05\x04\t\x02\x13\x03\x12\x04\x8d\x01\x16\x18\n\x0c\n\x04\
    \x04\t\x02\x14\x12\x04\x8e\x01\x04\x1c\n\r\n\x05\x04\t\x02\x14\x05\x12\
    \x04\x8e\x01\x04\n\n\r\n\x05\x04\t\x02\x14\x01\x12\x04\x8e\x01\x0b\x16\n\
    \r\n\x05\x04\t\x02\x14\x03\x12\x04\x8e\x01\x19\x1b\n$\n\x04\x04\t\x02\
    \x15\x12\x04\x8f\x01\x04\x19\"\x16\x20a.k.a.)\x20customer_uid\n\n\r\n\
    \x05\x04\t\x02\x15\x05\x12\x04\x8f\x01\x04\n\n\r\n\x05\x04\t\x02\x15\x01\
    \x12\x04\x8f\x01\x0b\x13\n\r\n\x05\x04\t\x02\x15\x03\x12\x04\x8f\x01\x16\
    \x18\n\x0c\n\x04\x04\t\x02\x16\x12\x04\x90\x01\x04#\n\r\n\x05\x04\t\x02\
    \x16\x05\x12\x04\x90\x01\x04\n\n\r\n\x05\x04\t\x02\x16\x01\x12\x04\x90\
    \x01\x0b\x1d\n\r\n\x05\x04\t\x02\x16\x03\x12\x04\x90\x01\x20\"\n\x0c\n\
    \x04\x04\t\x02\x17\x12\x04\x91\x01\x04\x1c\n\r\n\x05\x04\t\x02\x17\x05\
    \x12\x04\x91\x01\x04\n\n\r\n\x05\x04\t\x02\x17\x01\x12\x04\x91\x01\x0b\
    \x16\n\r\n\x05\x04\t\x02\x17\x03\x12\x04\x91\x01\x19\x1b\n\x0c\n\x04\x04\
    \t\x02\x18\x12\x04\x92\x01\x04\x19\n\r\n\x05\x04\t\x02\x18\x05\x12\x04\
    \x92\x01\x04\t\n\r\n\x05\x04\t\x02\x18\x01\x12\x04\x92\x01\n\x13\n\r\n\
    \x05\x04\t\x02\x18\x03\x12\x04\x92\x01\x16\x18\n\x0c\n\x04\x04\t\x02\x19\
    \x12\x04\x93\x01\x04\x18\n\r\n\x05\x04\t\x02\x19\x05\x12\x04\x93\x01\x04\
    \n\n\r\n\x05\x04\t\x02\x19\x01\x12\x04\x93\x01\x0b\x12\n\r\n\x05\x04\t\
    \x02\x19\x03\x12\x04\x93\x01\x15\x17\n\x0c\n\x04\x04\t\x02\x1a\x12\x04\
    \x94\x01\x04\x1d\n\r\n\x05\x04\t\x02\x1a\x05\x12\x04\x94\x01\x04\n\n\r\n\
    \x05\x04\t\x02\x1a\x01\x12\x04\x94\x01\x0b\x17\n\r\n\x05\x04\t\x02\x1a\
    \x03\x12\x04\x94\x01\x1a\x1c\n\x0c\n\x04\x04\t\x02\x1b\x12\x04\x95\x01\
    \x04\x1b\n\r\n\x05\x04\t\x02\x1b\x05\x12\x04\x95\x01\x04\n\n\r\n\x05\x04\
    \t\x02\x1b\x01\x12\x04\x95\x01\x0b\x15\n\r\n\x05\x04\t\x02\x1b\x03\x12\
    \x04\x95\x01\x18\x1a\n\x0c\n\x04\x04\t\x02\x1c\x12\x04\x96\x01\x04\x17\n\
    \r\n\x05\x04\t\x02\x1c\x05\x12\x04\x96\x01\x04\t\n\r\n\x05\x04\t\x02\x1c\
    \x01\x12\x04\x96\x01\n\x11\n\r\n\x05\x04\t\x02\x1c\x03\x12\x04\x96\x01\
    \x14\x16\n\x0c\n\x04\x04\t\x02\x1d\x12\x04\x97\x01\x04\x1b\n\r\n\x05\x04\
    \t\x02\x1d\x05\x12\x04\x97\x01\x04\n\n\r\n\x05\x04\t\x02\x1d\x01\x12\x04\
    \x97\x01\x0b\x15\n\r\n\x05\x04\t\x02\x1d\x03\x12\x04\x97\x01\x18\x1a\n\
    \x0c\n\x04\x04\t\x02\x1e\x12\x04\x98\x01\x04\x16\n\r\n\x05\x04\t\x02\x1e\
    \x05\x12\x04\x98\x01\x04\n\n\r\n\x05\x04\t\x02\x1e\x01\x12\x04\x98\x01\
    \x0b\x10\n\r\n\x05\x04\t\x02\x1e\x03\x12\x04\x98\x01\x13\x15\n\x0c\n\x04\
    \x04\t\x02\x1f\x12\x04\x99\x01\x04\x1c\n\r\n\x05\x04\t\x02\x1f\x05\x12\
    \x04\x99\x01\x04\n\n\r\n\x05\x04\t\x02\x1f\x01\x12\x04\x99\x01\x0b\x16\n\
    \r\n\x05\x04\t\x02\x1f\x03\x12\x04\x99\x01\x19\x1b\n\x0c\n\x04\x04\t\x02\
    \x20\x12\x04\x9a\x01\x04\x17\n\r\n\x05\x04\t\x02\x20\x05\x12\x04\x9a\x01\
    \x04\n\n\r\n\x05\x04\t\x02\x20\x01\x12\x04\x9a\x01\x0b\x11\n\r\n\x05\x04\
    \t\x02\x20\x03\x12\x04\x9a\x01\x14\x16\n\x0c\n\x04\x04\t\x02!\x12\x04\
    \x9b\x01\x04\x1c\n\r\n\x05\x04\t\x02!\x05\x12\x04\x9b\x01\x04\n\n\r\n\
    \x05\x04\t\x02!\x01\x12\x04\x9b\x01\x0b\x16\n\r\n\x05\x04\t\x02!\x03\x12\
    \x04\x9b\x01\x19\x1b\n\x0c\n\x04\x04\t\x02\"\x12\x04\x9c\x01\x04\x1a\n\r\
    \n\x05\x04\t\x02\"\x05\x12\x04\x9c\x01\x04\t\n\r\n\x05\x04\t\x02\"\x01\
    \x12\x04\x9c\x01\n\x14\n\r\n\x05\x04\t\x02\"\x03\x12\x04\x9c\x01\x17\x19\
    \n\x0c\n\x04\x04\t\x02#\x12\x04\x9d\x01\x04\x17\n\r\n\x05\x04\t\x02#\x05\
    \x12\x04\x9d\x01\x04\n\n\r\n\x05\x04\t\x02#\x01\x12\x04\x9d\x01\x0b\x11\
    \n\r\n\x05\x04\t\x02#\x03\x12\x04\x9d\x01\x14\x16\n\x0c\n\x04\x04\t\x02$\
    \x12\x04\x9e\x01\x04\x1b\n\r\n\x05\x04\t\x02$\x05\x12\x04\x9e\x01\x04\n\
    \n\r\n\x05\x04\t\x02$\x01\x12\x04\x9e\x01\x0b\x15\n\r\n\x05\x04\t\x02$\
    \x03\x12\x04\x9e\x01\x18\x1a\n\x0c\n\x02\x04\n\x12\x06\xa1\x01\0\xa5\x01\
    \x01\n\x0b\n\x03\x04\n\x01\x12\x04\xa1\x01\x08#\n\x0c\n\x04\x04\n\x02\0\
    \x12\x04\xa2\x01\x04\x13\n\r\n\x05\x04\n\x02\0\x05\x12\x04\xa2\x01\x04\t\
    \n\r\n\x05\x04\n\x02\0\x01\x12\x04\xa2\x01\n\x0e\n\r\n\x05\x04\n\x02\0\
    \x03\x12\x04\xa2\x01\x11\x12\n\x0c\n\x04\x04\n\x02\x01\x12\x04\xa3\x01\
    \x04\x17\n\r\n\x05\x04\n\x02\x01\x05\x12\x04\xa3\x01\x04\n\n\r\n\x05\x04\
    \n\x02\x01\x01\x12\x04\xa3\x01\x0b\x12\n\r\n\x05\x04\n\x02\x01\x03\x12\
    \x04\xa3\x01\x15\x16\n\x0c\n\x04\x04\n\x02\x02\x12\x04\xa4\x01\x04)\n\r\
    \n\x05\x04\n\x02\x02\x06\x12\x04\xa4\x01\x04\x1b\n\r\n\x05\x04\n\x02\x02\
    \x01\x12\x04\xa4\x01\x1c$\n\r\n\x05\x04\n\x02\x02\x03\x12\x04\xa4\x01'(\
    \n\x0c\n\x02\x04\x0b\x12\x06\xa7\x01\0\xad\x01\x01\n\x0b\n\x03\x04\x0b\
    \x01\x12\x04\xa7\x01\x08\x15\n\x0c\n\x04\x04\x0b\x02\0\x12\x04\xa8\x01\
    \x04\x16\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\xa8\x01\x04\n\n\r\n\x05\x04\
    \x0b\x02\0\x01\x12\x04\xa8\x01\x0b\x11\n\r\n\x05\x04\x0b\x02\0\x03\x12\
    \x04\xa8\x01\x14\x15\n\x0c\n\x04\x04\x0b\x02\x01\x12\x04\xa9\x01\x04\x16\
    \n\r\n\x05\x04\x0b\x02\x01\x05\x12\x04\xa9\x01\x04\n\n\r\n\x05\x04\x0b\
    \x02\x01\x01\x12\x04\xa9\x01\x0b\x11\n\r\n\x05\x04\x0b\x02\x01\x03\x12\
    \x04\xa9\x01\x14\x15\n\x0c\n\x04\x04\x0b\x02\x02\x12\x04\xaa\x01\x04\x1b\
    \n\r\n\x05\x04\x0b\x02\x02\x05\x12\x04\xaa\x01\x04\t\n\r\n\x05\x04\x0b\
    \x02\x02\x01\x12\x04\xaa\x01\n\x16\n\r\n\x05\x04\x0b\x02\x02\x03\x12\x04\
    \xaa\x01\x19\x1a\n\x0c\n\x04\x04\x0b\x02\x03\x12\x04\xab\x01\x04\x16\n\r\
    \n\x05\x04\x0b\x02\x03\x05\x12\x04\xab\x01\x04\n\n\r\n\x05\x04\x0b\x02\
    \x03\x01\x12\x04\xab\x01\x0b\x11\n\r\n\x05\x04\x0b\x02\x03\x03\x12\x04\
    \xab\x01\x14\x15\n\x0c\n\x04\x04\x0b\x02\x04\x12\x04\xac\x01\x04\x1b\n\r\
    \n\x05\x04\x0b\x02\x04\x05\x12\x04\xac\x01\x04\n\n\r\n\x05\x04\x0b\x02\
    \x04\x01\x12\x04\xac\x01\x0b\x16\n\r\n\x05\x04\x0b\x02\x04\x03\x12\x04\
    \xac\x01\x19\x1a\n\x0c\n\x02\x04\x0c\x12\x06\xaf\x01\0\xb5\x01\x01\n\x0b\
    \n\x03\x04\x0c\x01\x12\x04\xaf\x01\x08\x20\n\x0c\n\x04\x04\x0c\x02\0\x12\
    \x04\xb0\x01\x04\x17\n\r\n\x05\x04\x0c\x02\0\x05\x12\x04\xb0\x01\x04\n\n\
    \r\n\x05\x04\x0c\x02\0\x01\x12\x04\xb0\x01\x0b\x12\n\r\n\x05\x04\x0c\x02\
    \0\x03\x12\x04\xb0\x01\x15\x16\n\x0c\n\x04\x04\x0c\x02\x01\x12\x04\xb1\
    \x01\x04\x16\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\xb1\x01\x04\n\n\r\n\
    \x05\x04\x0c\x02\x01\x01\x12\x04\xb1\x01\x0b\x11\n\r\n\x05\x04\x0c\x02\
    \x01\x03\x12\x04\xb1\x01\x14\x15\n\x0c\n\x04\x04\x0c\x02\x02\x12\x04\xb2\
    \x01\x04\x1c\n\r\n\x05\x04\x0c\x02\x02\x05\x12\x04\xb2\x01\x04\n\n\r\n\
    \x05\x04\x0c\x02\x02\x01\x12\x04\xb2\x01\x0b\x17\n\r\n\x05\x04\x0c\x02\
    \x02\x03\x12\x04\xb2\x01\x1a\x1b\n\x0c\n\x04\x04\x0c\x02\x03\x12\x04\xb3\
    \x01\x04\x20\n\r\n\x05\x04\x0c\x02\x03\x05\x12\x04\xb3\x01\x04\n\n\r\n\
    \x05\x04\x0c\x02\x03\x01\x12\x04\xb3\x01\x0b\x1b\n\r\n\x05\x04\x0c\x02\
    \x03\x03\x12\x04\xb3\x01\x1e\x1f\n\x0c\n\x04\x04\x0c\x02\x04\x12\x04\xb4\
    \x01\x04\x16\n\r\n\x05\x04\x0c\x02\x04\x05\x12\x04\xb4\x01\x04\n\n\r\n\
    \x05\x04\x0c\x02\x04\x01\x12\x04\xb4\x01\x0b\x11\n\r\n\x05\x04\x0c\x02\
    \x04\x03\x12\x04\xb4\x01\x14\x15\n\x0c\n\x02\x04\r\x12\x06\xb7\x01\0\xbb\
    \x01\x01\n\x0b\n\x03\x04\r\x01\x12\x04\xb7\x01\x08\"\n\x0c\n\x04\x04\r\
    \x02\0\x12\x04\xb8\x01\x04\x13\n\r\n\x05\x04\r\x02\0\x05\x12\x04\xb8\x01\
    \x04\t\n\r\n\x05\x04\r\x02\0\x01\x12\x04\xb8\x01\n\x0e\n\r\n\x05\x04\r\
    \x02\0\x03\x12\x04\xb8\x01\x11\x12\n\x0c\n\x04\x04\r\x02\x01\x12\x04\xb9\
    \x01\x04\x17\n\r\n\x05\x04\r\x02\x01\x05\x12\x04\xb9\x01\x04\n\n\r\n\x05\
    \x04\r\x02\x01\x01\x12\x04\xb9\x01\x0b\x12\n\r\n\x05\x04\r\x02\x01\x03\
    \x12\x04\xb9\x01\x15\x16\n\x0c\n\x04\x04\r\x02\x02\x12\x04\xba\x01\x04)\
    \n\r\n\x05\x04\r\x02\x02\x06\x12\x04\xba\x01\x04\x1b\n\r\n\x05\x04\r\x02\
    \x02\x01\x12\x04\xba\x01\x1c$\n\r\n\x05\x04\r\x02\x02\x03\x12\x04\xba\
    \x01'(b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(super::annotations::file_descriptor());
        let mut messages = ::std::vec::Vec::new();
        messages.push(CardRegisterRequest::generated_message_descriptor_data());
        messages.push(CardRegisterResultData::generated_message_descriptor_data());
        messages.push(CardRegisterResponse::generated_message_descriptor_data());
        messages.push(GetCardInfoRequest::generated_message_descriptor_data());
        messages.push(GetCardInfoData::generated_message_descriptor_data());
        messages.push(GetCardInfoResponse::generated_message_descriptor_data());
        messages.push(DeleteCardInfoRequest::generated_message_descriptor_data());
        messages.push(DeleteCardInfoResponse::generated_message_descriptor_data());
        messages.push(PayByRegisteredCardRequest::generated_message_descriptor_data());
        messages.push(PayByRegisteredCardData::generated_message_descriptor_data());
        messages.push(PayByRegisteredCardResponse::generated_message_descriptor_data());
        messages.push(CancelHistory::generated_message_descriptor_data());
        messages.push(CancelCardPaymentRequest::generated_message_descriptor_data());
        messages.push(CancelCardPaymenttResponse::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
