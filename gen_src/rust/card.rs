// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `v2/payments/card/card.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct CardRegisterRequest {
    // message fields
    pub card_uid: ::std::string::String,
    pub card_number: ::std::string::String,
    pub expiry: ::std::string::String,
    pub bitrh: ::std::string::String,
    pub pwd_2digit: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub customer_tel: ::std::string::String,
    pub customer_email: ::std::string::String,
    pub customer_addr: ::std::string::String,
    pub customer_postcode: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardRegisterRequest {
    fn default() -> &'a CardRegisterRequest {
        <CardRegisterRequest as ::protobuf::Message>::default_instance()
    }
}

impl CardRegisterRequest {
    pub fn new() -> CardRegisterRequest {
        ::std::default::Default::default()
    }

    // string card_uid = 1;


    pub fn get_card_uid(&self) -> &str {
        &self.card_uid
    }
    pub fn clear_card_uid(&mut self) {
        self.card_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_uid(&mut self, v: ::std::string::String) {
        self.card_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_uid(&mut self) -> &mut ::std::string::String {
        &mut self.card_uid
    }

    // Take field
    pub fn take_card_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_uid, ::std::string::String::new())
    }

    // string card_number = 2;


    pub fn get_card_number(&self) -> &str {
        &self.card_number
    }
    pub fn clear_card_number(&mut self) {
        self.card_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_number(&mut self, v: ::std::string::String) {
        self.card_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_number(&mut self) -> &mut ::std::string::String {
        &mut self.card_number
    }

    // Take field
    pub fn take_card_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_number, ::std::string::String::new())
    }

    // string expiry = 3;


    pub fn get_expiry(&self) -> &str {
        &self.expiry
    }
    pub fn clear_expiry(&mut self) {
        self.expiry.clear();
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: ::std::string::String) {
        self.expiry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expiry(&mut self) -> &mut ::std::string::String {
        &mut self.expiry
    }

    // Take field
    pub fn take_expiry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.expiry, ::std::string::String::new())
    }

    // string bitrh = 4;


    pub fn get_bitrh(&self) -> &str {
        &self.bitrh
    }
    pub fn clear_bitrh(&mut self) {
        self.bitrh.clear();
    }

    // Param is passed by value, moved
    pub fn set_bitrh(&mut self, v: ::std::string::String) {
        self.bitrh = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bitrh(&mut self) -> &mut ::std::string::String {
        &mut self.bitrh
    }

    // Take field
    pub fn take_bitrh(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bitrh, ::std::string::String::new())
    }

    // string pwd_2digit = 5;


    pub fn get_pwd_2digit(&self) -> &str {
        &self.pwd_2digit
    }
    pub fn clear_pwd_2digit(&mut self) {
        self.pwd_2digit.clear();
    }

    // Param is passed by value, moved
    pub fn set_pwd_2digit(&mut self, v: ::std::string::String) {
        self.pwd_2digit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pwd_2digit(&mut self) -> &mut ::std::string::String {
        &mut self.pwd_2digit
    }

    // Take field
    pub fn take_pwd_2digit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pwd_2digit, ::std::string::String::new())
    }

    // string customer_name = 6;


    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }
    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    // string customer_tel = 7;


    pub fn get_customer_tel(&self) -> &str {
        &self.customer_tel
    }
    pub fn clear_customer_tel(&mut self) {
        self.customer_tel.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_tel(&mut self, v: ::std::string::String) {
        self.customer_tel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_tel(&mut self) -> &mut ::std::string::String {
        &mut self.customer_tel
    }

    // Take field
    pub fn take_customer_tel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_tel, ::std::string::String::new())
    }

    // string customer_email = 8;


    pub fn get_customer_email(&self) -> &str {
        &self.customer_email
    }
    pub fn clear_customer_email(&mut self) {
        self.customer_email.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_email(&mut self, v: ::std::string::String) {
        self.customer_email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_email(&mut self) -> &mut ::std::string::String {
        &mut self.customer_email
    }

    // Take field
    pub fn take_customer_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_email, ::std::string::String::new())
    }

    // string customer_addr = 9;


    pub fn get_customer_addr(&self) -> &str {
        &self.customer_addr
    }
    pub fn clear_customer_addr(&mut self) {
        self.customer_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_addr(&mut self, v: ::std::string::String) {
        self.customer_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_addr(&mut self) -> &mut ::std::string::String {
        &mut self.customer_addr
    }

    // Take field
    pub fn take_customer_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_addr, ::std::string::String::new())
    }

    // string customer_postcode = 10;


    pub fn get_customer_postcode(&self) -> &str {
        &self.customer_postcode
    }
    pub fn clear_customer_postcode(&mut self) {
        self.customer_postcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_postcode(&mut self, v: ::std::string::String) {
        self.customer_postcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_postcode(&mut self) -> &mut ::std::string::String {
        &mut self.customer_postcode
    }

    // Take field
    pub fn take_customer_postcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_postcode, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CardRegisterRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_uid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_number)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.expiry)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bitrh)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pwd_2digit)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_name)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_tel)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_email)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_addr)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_postcode)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_uid);
        }
        if !self.card_number.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.card_number);
        }
        if !self.expiry.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.expiry);
        }
        if !self.bitrh.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.bitrh);
        }
        if !self.pwd_2digit.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.pwd_2digit);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.customer_name);
        }
        if !self.customer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer_tel);
        }
        if !self.customer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.customer_email);
        }
        if !self.customer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.customer_addr);
        }
        if !self.customer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.customer_postcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_uid.is_empty() {
            os.write_string(1, &self.card_uid)?;
        }
        if !self.card_number.is_empty() {
            os.write_string(2, &self.card_number)?;
        }
        if !self.expiry.is_empty() {
            os.write_string(3, &self.expiry)?;
        }
        if !self.bitrh.is_empty() {
            os.write_string(4, &self.bitrh)?;
        }
        if !self.pwd_2digit.is_empty() {
            os.write_string(5, &self.pwd_2digit)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(6, &self.customer_name)?;
        }
        if !self.customer_tel.is_empty() {
            os.write_string(7, &self.customer_tel)?;
        }
        if !self.customer_email.is_empty() {
            os.write_string(8, &self.customer_email)?;
        }
        if !self.customer_addr.is_empty() {
            os.write_string(9, &self.customer_addr)?;
        }
        if !self.customer_postcode.is_empty() {
            os.write_string(10, &self.customer_postcode)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardRegisterRequest {
        CardRegisterRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_uid",
                |m: &CardRegisterRequest| { &m.card_uid },
                |m: &mut CardRegisterRequest| { &mut m.card_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_number",
                |m: &CardRegisterRequest| { &m.card_number },
                |m: &mut CardRegisterRequest| { &mut m.card_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "expiry",
                |m: &CardRegisterRequest| { &m.expiry },
                |m: &mut CardRegisterRequest| { &mut m.expiry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bitrh",
                |m: &CardRegisterRequest| { &m.bitrh },
                |m: &mut CardRegisterRequest| { &mut m.bitrh },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pwd_2digit",
                |m: &CardRegisterRequest| { &m.pwd_2digit },
                |m: &mut CardRegisterRequest| { &mut m.pwd_2digit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_name",
                |m: &CardRegisterRequest| { &m.customer_name },
                |m: &mut CardRegisterRequest| { &mut m.customer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_tel",
                |m: &CardRegisterRequest| { &m.customer_tel },
                |m: &mut CardRegisterRequest| { &mut m.customer_tel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_email",
                |m: &CardRegisterRequest| { &m.customer_email },
                |m: &mut CardRegisterRequest| { &mut m.customer_email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_addr",
                |m: &CardRegisterRequest| { &m.customer_addr },
                |m: &mut CardRegisterRequest| { &mut m.customer_addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_postcode",
                |m: &CardRegisterRequest| { &m.customer_postcode },
                |m: &mut CardRegisterRequest| { &mut m.customer_postcode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardRegisterRequest>(
                "CardRegisterRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardRegisterRequest {
        static instance: ::protobuf::rt::LazyV2<CardRegisterRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardRegisterRequest::new)
    }
}

impl ::protobuf::Clear for CardRegisterRequest {
    fn clear(&mut self) {
        self.card_uid.clear();
        self.card_number.clear();
        self.expiry.clear();
        self.bitrh.clear();
        self.pwd_2digit.clear();
        self.customer_name.clear();
        self.customer_tel.clear();
        self.customer_email.clear();
        self.customer_addr.clear();
        self.customer_postcode.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardRegisterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardRegisterRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardRegisterResultData {
    // message fields
    pub card_uid: ::std::string::String,
    pub card_name: ::std::string::String,
    pub card_code: ::std::string::String,
    pub bin_numbrer: ::std::string::String,
    pub birth_number: ::std::string::String,
    pub card_type: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub customer_tel: ::std::string::String,
    pub customer_email: ::std::string::String,
    pub customer_addr: ::std::string::String,
    pub customer_postcode: ::std::string::String,
    pub inserted: i32,
    pub updated: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardRegisterResultData {
    fn default() -> &'a CardRegisterResultData {
        <CardRegisterResultData as ::protobuf::Message>::default_instance()
    }
}

impl CardRegisterResultData {
    pub fn new() -> CardRegisterResultData {
        ::std::default::Default::default()
    }

    // string card_uid = 1;


    pub fn get_card_uid(&self) -> &str {
        &self.card_uid
    }
    pub fn clear_card_uid(&mut self) {
        self.card_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_uid(&mut self, v: ::std::string::String) {
        self.card_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_uid(&mut self) -> &mut ::std::string::String {
        &mut self.card_uid
    }

    // Take field
    pub fn take_card_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_uid, ::std::string::String::new())
    }

    // string card_name = 2;


    pub fn get_card_name(&self) -> &str {
        &self.card_name
    }
    pub fn clear_card_name(&mut self) {
        self.card_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_name(&mut self, v: ::std::string::String) {
        self.card_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_name(&mut self) -> &mut ::std::string::String {
        &mut self.card_name
    }

    // Take field
    pub fn take_card_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_name, ::std::string::String::new())
    }

    // string card_code = 3;


    pub fn get_card_code(&self) -> &str {
        &self.card_code
    }
    pub fn clear_card_code(&mut self) {
        self.card_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_code(&mut self, v: ::std::string::String) {
        self.card_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_code(&mut self) -> &mut ::std::string::String {
        &mut self.card_code
    }

    // Take field
    pub fn take_card_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_code, ::std::string::String::new())
    }

    // string bin_numbrer = 4;


    pub fn get_bin_numbrer(&self) -> &str {
        &self.bin_numbrer
    }
    pub fn clear_bin_numbrer(&mut self) {
        self.bin_numbrer.clear();
    }

    // Param is passed by value, moved
    pub fn set_bin_numbrer(&mut self, v: ::std::string::String) {
        self.bin_numbrer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bin_numbrer(&mut self) -> &mut ::std::string::String {
        &mut self.bin_numbrer
    }

    // Take field
    pub fn take_bin_numbrer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bin_numbrer, ::std::string::String::new())
    }

    // string birth_number = 5;


    pub fn get_birth_number(&self) -> &str {
        &self.birth_number
    }
    pub fn clear_birth_number(&mut self) {
        self.birth_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_birth_number(&mut self, v: ::std::string::String) {
        self.birth_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_birth_number(&mut self) -> &mut ::std::string::String {
        &mut self.birth_number
    }

    // Take field
    pub fn take_birth_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.birth_number, ::std::string::String::new())
    }

    // string card_type = 6;


    pub fn get_card_type(&self) -> &str {
        &self.card_type
    }
    pub fn clear_card_type(&mut self) {
        self.card_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_type(&mut self, v: ::std::string::String) {
        self.card_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_type(&mut self) -> &mut ::std::string::String {
        &mut self.card_type
    }

    // Take field
    pub fn take_card_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_type, ::std::string::String::new())
    }

    // string customer_name = 7;


    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }
    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    // string customer_tel = 8;


    pub fn get_customer_tel(&self) -> &str {
        &self.customer_tel
    }
    pub fn clear_customer_tel(&mut self) {
        self.customer_tel.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_tel(&mut self, v: ::std::string::String) {
        self.customer_tel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_tel(&mut self) -> &mut ::std::string::String {
        &mut self.customer_tel
    }

    // Take field
    pub fn take_customer_tel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_tel, ::std::string::String::new())
    }

    // string customer_email = 9;


    pub fn get_customer_email(&self) -> &str {
        &self.customer_email
    }
    pub fn clear_customer_email(&mut self) {
        self.customer_email.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_email(&mut self, v: ::std::string::String) {
        self.customer_email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_email(&mut self) -> &mut ::std::string::String {
        &mut self.customer_email
    }

    // Take field
    pub fn take_customer_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_email, ::std::string::String::new())
    }

    // string customer_addr = 10;


    pub fn get_customer_addr(&self) -> &str {
        &self.customer_addr
    }
    pub fn clear_customer_addr(&mut self) {
        self.customer_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_addr(&mut self, v: ::std::string::String) {
        self.customer_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_addr(&mut self) -> &mut ::std::string::String {
        &mut self.customer_addr
    }

    // Take field
    pub fn take_customer_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_addr, ::std::string::String::new())
    }

    // string customer_postcode = 11;


    pub fn get_customer_postcode(&self) -> &str {
        &self.customer_postcode
    }
    pub fn clear_customer_postcode(&mut self) {
        self.customer_postcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_postcode(&mut self, v: ::std::string::String) {
        self.customer_postcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_postcode(&mut self) -> &mut ::std::string::String {
        &mut self.customer_postcode
    }

    // Take field
    pub fn take_customer_postcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_postcode, ::std::string::String::new())
    }

    // int32 inserted = 12;


    pub fn get_inserted(&self) -> i32 {
        self.inserted
    }
    pub fn clear_inserted(&mut self) {
        self.inserted = 0;
    }

    // Param is passed by value, moved
    pub fn set_inserted(&mut self, v: i32) {
        self.inserted = v;
    }

    // int32 updated = 13;


    pub fn get_updated(&self) -> i32 {
        self.updated
    }
    pub fn clear_updated(&mut self) {
        self.updated = 0;
    }

    // Param is passed by value, moved
    pub fn set_updated(&mut self, v: i32) {
        self.updated = v;
    }
}

impl ::protobuf::Message for CardRegisterResultData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_uid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_code)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bin_numbrer)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.birth_number)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_type)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_name)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_tel)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_email)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_addr)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_postcode)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.inserted = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.updated = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_uid);
        }
        if !self.card_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.card_name);
        }
        if !self.card_code.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.card_code);
        }
        if !self.bin_numbrer.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.bin_numbrer);
        }
        if !self.birth_number.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.birth_number);
        }
        if !self.card_type.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.card_type);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer_name);
        }
        if !self.customer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.customer_tel);
        }
        if !self.customer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.customer_email);
        }
        if !self.customer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.customer_addr);
        }
        if !self.customer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.customer_postcode);
        }
        if self.inserted != 0 {
            my_size += ::protobuf::rt::value_size(12, self.inserted, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.updated != 0 {
            my_size += ::protobuf::rt::value_size(13, self.updated, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_uid.is_empty() {
            os.write_string(1, &self.card_uid)?;
        }
        if !self.card_name.is_empty() {
            os.write_string(2, &self.card_name)?;
        }
        if !self.card_code.is_empty() {
            os.write_string(3, &self.card_code)?;
        }
        if !self.bin_numbrer.is_empty() {
            os.write_string(4, &self.bin_numbrer)?;
        }
        if !self.birth_number.is_empty() {
            os.write_string(5, &self.birth_number)?;
        }
        if !self.card_type.is_empty() {
            os.write_string(6, &self.card_type)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(7, &self.customer_name)?;
        }
        if !self.customer_tel.is_empty() {
            os.write_string(8, &self.customer_tel)?;
        }
        if !self.customer_email.is_empty() {
            os.write_string(9, &self.customer_email)?;
        }
        if !self.customer_addr.is_empty() {
            os.write_string(10, &self.customer_addr)?;
        }
        if !self.customer_postcode.is_empty() {
            os.write_string(11, &self.customer_postcode)?;
        }
        if self.inserted != 0 {
            os.write_int32(12, self.inserted)?;
        }
        if self.updated != 0 {
            os.write_int32(13, self.updated)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardRegisterResultData {
        CardRegisterResultData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_uid",
                |m: &CardRegisterResultData| { &m.card_uid },
                |m: &mut CardRegisterResultData| { &mut m.card_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_name",
                |m: &CardRegisterResultData| { &m.card_name },
                |m: &mut CardRegisterResultData| { &mut m.card_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_code",
                |m: &CardRegisterResultData| { &m.card_code },
                |m: &mut CardRegisterResultData| { &mut m.card_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bin_numbrer",
                |m: &CardRegisterResultData| { &m.bin_numbrer },
                |m: &mut CardRegisterResultData| { &mut m.bin_numbrer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "birth_number",
                |m: &CardRegisterResultData| { &m.birth_number },
                |m: &mut CardRegisterResultData| { &mut m.birth_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_type",
                |m: &CardRegisterResultData| { &m.card_type },
                |m: &mut CardRegisterResultData| { &mut m.card_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_name",
                |m: &CardRegisterResultData| { &m.customer_name },
                |m: &mut CardRegisterResultData| { &mut m.customer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_tel",
                |m: &CardRegisterResultData| { &m.customer_tel },
                |m: &mut CardRegisterResultData| { &mut m.customer_tel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_email",
                |m: &CardRegisterResultData| { &m.customer_email },
                |m: &mut CardRegisterResultData| { &mut m.customer_email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_addr",
                |m: &CardRegisterResultData| { &m.customer_addr },
                |m: &mut CardRegisterResultData| { &mut m.customer_addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_postcode",
                |m: &CardRegisterResultData| { &m.customer_postcode },
                |m: &mut CardRegisterResultData| { &mut m.customer_postcode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "inserted",
                |m: &CardRegisterResultData| { &m.inserted },
                |m: &mut CardRegisterResultData| { &mut m.inserted },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "updated",
                |m: &CardRegisterResultData| { &m.updated },
                |m: &mut CardRegisterResultData| { &mut m.updated },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardRegisterResultData>(
                "CardRegisterResultData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardRegisterResultData {
        static instance: ::protobuf::rt::LazyV2<CardRegisterResultData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardRegisterResultData::new)
    }
}

impl ::protobuf::Clear for CardRegisterResultData {
    fn clear(&mut self) {
        self.card_uid.clear();
        self.card_name.clear();
        self.card_code.clear();
        self.bin_numbrer.clear();
        self.birth_number.clear();
        self.card_type.clear();
        self.customer_name.clear();
        self.customer_tel.clear();
        self.customer_email.clear();
        self.customer_addr.clear();
        self.customer_postcode.clear();
        self.inserted = 0;
        self.updated = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardRegisterResultData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardRegisterResultData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardRegisterResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<CardRegisterResultData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardRegisterResponse {
    fn default() -> &'a CardRegisterResponse {
        <CardRegisterResponse as ::protobuf::Message>::default_instance()
    }
}

impl CardRegisterResponse {
    pub fn new() -> CardRegisterResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .card_v2.CardRegisterResultData response = 3;


    pub fn get_response(&self) -> &CardRegisterResultData {
        self.response.as_ref().unwrap_or_else(|| <CardRegisterResultData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: CardRegisterResultData) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut CardRegisterResultData {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> CardRegisterResultData {
        self.response.take().unwrap_or_else(|| CardRegisterResultData::new())
    }
}

impl ::protobuf::Message for CardRegisterResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardRegisterResponse {
        CardRegisterResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &CardRegisterResponse| { &m.code },
                |m: &mut CardRegisterResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &CardRegisterResponse| { &m.message },
                |m: &mut CardRegisterResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardRegisterResultData>>(
                "response",
                |m: &CardRegisterResponse| { &m.response },
                |m: &mut CardRegisterResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardRegisterResponse>(
                "CardRegisterResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardRegisterResponse {
        static instance: ::protobuf::rt::LazyV2<CardRegisterResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardRegisterResponse::new)
    }
}

impl ::protobuf::Clear for CardRegisterResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardRegisterResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardRegisterResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetCardInfoRequest {
    // message fields
    pub card_uid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetCardInfoRequest {
    fn default() -> &'a GetCardInfoRequest {
        <GetCardInfoRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetCardInfoRequest {
    pub fn new() -> GetCardInfoRequest {
        ::std::default::Default::default()
    }

    // string card_uid = 1;


    pub fn get_card_uid(&self) -> &str {
        &self.card_uid
    }
    pub fn clear_card_uid(&mut self) {
        self.card_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_uid(&mut self, v: ::std::string::String) {
        self.card_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_uid(&mut self) -> &mut ::std::string::String {
        &mut self.card_uid
    }

    // Take field
    pub fn take_card_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_uid, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetCardInfoRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_uid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_uid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_uid.is_empty() {
            os.write_string(1, &self.card_uid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetCardInfoRequest {
        GetCardInfoRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_uid",
                |m: &GetCardInfoRequest| { &m.card_uid },
                |m: &mut GetCardInfoRequest| { &mut m.card_uid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetCardInfoRequest>(
                "GetCardInfoRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetCardInfoRequest {
        static instance: ::protobuf::rt::LazyV2<GetCardInfoRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetCardInfoRequest::new)
    }
}

impl ::protobuf::Clear for GetCardInfoRequest {
    fn clear(&mut self) {
        self.card_uid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetCardInfoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCardInfoRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetCardInfoData {
    // message fields
    pub card_uid: ::std::string::String,
    pub card_provider: ::std::string::String,
    pub card_code: ::std::string::String,
    pub bin_number: ::std::string::String,
    pub card_type: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub customer_tel: ::std::string::String,
    pub customer_email: ::std::string::String,
    pub customer_addr: ::std::string::String,
    pub customer_postcode: ::std::string::String,
    pub inserted: i32,
    pub updated: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetCardInfoData {
    fn default() -> &'a GetCardInfoData {
        <GetCardInfoData as ::protobuf::Message>::default_instance()
    }
}

impl GetCardInfoData {
    pub fn new() -> GetCardInfoData {
        ::std::default::Default::default()
    }

    // string card_uid = 1;


    pub fn get_card_uid(&self) -> &str {
        &self.card_uid
    }
    pub fn clear_card_uid(&mut self) {
        self.card_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_uid(&mut self, v: ::std::string::String) {
        self.card_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_uid(&mut self) -> &mut ::std::string::String {
        &mut self.card_uid
    }

    // Take field
    pub fn take_card_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_uid, ::std::string::String::new())
    }

    // string card_provider = 2;


    pub fn get_card_provider(&self) -> &str {
        &self.card_provider
    }
    pub fn clear_card_provider(&mut self) {
        self.card_provider.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_provider(&mut self, v: ::std::string::String) {
        self.card_provider = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_provider(&mut self) -> &mut ::std::string::String {
        &mut self.card_provider
    }

    // Take field
    pub fn take_card_provider(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_provider, ::std::string::String::new())
    }

    // string card_code = 3;


    pub fn get_card_code(&self) -> &str {
        &self.card_code
    }
    pub fn clear_card_code(&mut self) {
        self.card_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_code(&mut self, v: ::std::string::String) {
        self.card_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_code(&mut self) -> &mut ::std::string::String {
        &mut self.card_code
    }

    // Take field
    pub fn take_card_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_code, ::std::string::String::new())
    }

    // string bin_number = 4;


    pub fn get_bin_number(&self) -> &str {
        &self.bin_number
    }
    pub fn clear_bin_number(&mut self) {
        self.bin_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_bin_number(&mut self, v: ::std::string::String) {
        self.bin_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bin_number(&mut self) -> &mut ::std::string::String {
        &mut self.bin_number
    }

    // Take field
    pub fn take_bin_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bin_number, ::std::string::String::new())
    }

    // string card_type = 5;


    pub fn get_card_type(&self) -> &str {
        &self.card_type
    }
    pub fn clear_card_type(&mut self) {
        self.card_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_type(&mut self, v: ::std::string::String) {
        self.card_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_type(&mut self) -> &mut ::std::string::String {
        &mut self.card_type
    }

    // Take field
    pub fn take_card_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_type, ::std::string::String::new())
    }

    // string customer_name = 6;


    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }
    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    // string customer_tel = 7;


    pub fn get_customer_tel(&self) -> &str {
        &self.customer_tel
    }
    pub fn clear_customer_tel(&mut self) {
        self.customer_tel.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_tel(&mut self, v: ::std::string::String) {
        self.customer_tel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_tel(&mut self) -> &mut ::std::string::String {
        &mut self.customer_tel
    }

    // Take field
    pub fn take_customer_tel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_tel, ::std::string::String::new())
    }

    // string customer_email = 8;


    pub fn get_customer_email(&self) -> &str {
        &self.customer_email
    }
    pub fn clear_customer_email(&mut self) {
        self.customer_email.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_email(&mut self, v: ::std::string::String) {
        self.customer_email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_email(&mut self) -> &mut ::std::string::String {
        &mut self.customer_email
    }

    // Take field
    pub fn take_customer_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_email, ::std::string::String::new())
    }

    // string customer_addr = 9;


    pub fn get_customer_addr(&self) -> &str {
        &self.customer_addr
    }
    pub fn clear_customer_addr(&mut self) {
        self.customer_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_addr(&mut self, v: ::std::string::String) {
        self.customer_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_addr(&mut self) -> &mut ::std::string::String {
        &mut self.customer_addr
    }

    // Take field
    pub fn take_customer_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_addr, ::std::string::String::new())
    }

    // string customer_postcode = 10;


    pub fn get_customer_postcode(&self) -> &str {
        &self.customer_postcode
    }
    pub fn clear_customer_postcode(&mut self) {
        self.customer_postcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_postcode(&mut self, v: ::std::string::String) {
        self.customer_postcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_postcode(&mut self) -> &mut ::std::string::String {
        &mut self.customer_postcode
    }

    // Take field
    pub fn take_customer_postcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_postcode, ::std::string::String::new())
    }

    // int32 inserted = 11;


    pub fn get_inserted(&self) -> i32 {
        self.inserted
    }
    pub fn clear_inserted(&mut self) {
        self.inserted = 0;
    }

    // Param is passed by value, moved
    pub fn set_inserted(&mut self, v: i32) {
        self.inserted = v;
    }

    // int32 updated = 12;


    pub fn get_updated(&self) -> i32 {
        self.updated
    }
    pub fn clear_updated(&mut self) {
        self.updated = 0;
    }

    // Param is passed by value, moved
    pub fn set_updated(&mut self, v: i32) {
        self.updated = v;
    }
}

impl ::protobuf::Message for GetCardInfoData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_uid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_provider)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_code)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bin_number)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_type)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_name)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_tel)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_email)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_addr)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_postcode)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.inserted = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.updated = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_uid);
        }
        if !self.card_provider.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.card_provider);
        }
        if !self.card_code.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.card_code);
        }
        if !self.bin_number.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.bin_number);
        }
        if !self.card_type.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.card_type);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.customer_name);
        }
        if !self.customer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer_tel);
        }
        if !self.customer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.customer_email);
        }
        if !self.customer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.customer_addr);
        }
        if !self.customer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.customer_postcode);
        }
        if self.inserted != 0 {
            my_size += ::protobuf::rt::value_size(11, self.inserted, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.updated != 0 {
            my_size += ::protobuf::rt::value_size(12, self.updated, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_uid.is_empty() {
            os.write_string(1, &self.card_uid)?;
        }
        if !self.card_provider.is_empty() {
            os.write_string(2, &self.card_provider)?;
        }
        if !self.card_code.is_empty() {
            os.write_string(3, &self.card_code)?;
        }
        if !self.bin_number.is_empty() {
            os.write_string(4, &self.bin_number)?;
        }
        if !self.card_type.is_empty() {
            os.write_string(5, &self.card_type)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(6, &self.customer_name)?;
        }
        if !self.customer_tel.is_empty() {
            os.write_string(7, &self.customer_tel)?;
        }
        if !self.customer_email.is_empty() {
            os.write_string(8, &self.customer_email)?;
        }
        if !self.customer_addr.is_empty() {
            os.write_string(9, &self.customer_addr)?;
        }
        if !self.customer_postcode.is_empty() {
            os.write_string(10, &self.customer_postcode)?;
        }
        if self.inserted != 0 {
            os.write_int32(11, self.inserted)?;
        }
        if self.updated != 0 {
            os.write_int32(12, self.updated)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetCardInfoData {
        GetCardInfoData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_uid",
                |m: &GetCardInfoData| { &m.card_uid },
                |m: &mut GetCardInfoData| { &mut m.card_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_provider",
                |m: &GetCardInfoData| { &m.card_provider },
                |m: &mut GetCardInfoData| { &mut m.card_provider },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_code",
                |m: &GetCardInfoData| { &m.card_code },
                |m: &mut GetCardInfoData| { &mut m.card_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bin_number",
                |m: &GetCardInfoData| { &m.bin_number },
                |m: &mut GetCardInfoData| { &mut m.bin_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_type",
                |m: &GetCardInfoData| { &m.card_type },
                |m: &mut GetCardInfoData| { &mut m.card_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_name",
                |m: &GetCardInfoData| { &m.customer_name },
                |m: &mut GetCardInfoData| { &mut m.customer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_tel",
                |m: &GetCardInfoData| { &m.customer_tel },
                |m: &mut GetCardInfoData| { &mut m.customer_tel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_email",
                |m: &GetCardInfoData| { &m.customer_email },
                |m: &mut GetCardInfoData| { &mut m.customer_email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_addr",
                |m: &GetCardInfoData| { &m.customer_addr },
                |m: &mut GetCardInfoData| { &mut m.customer_addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_postcode",
                |m: &GetCardInfoData| { &m.customer_postcode },
                |m: &mut GetCardInfoData| { &mut m.customer_postcode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "inserted",
                |m: &GetCardInfoData| { &m.inserted },
                |m: &mut GetCardInfoData| { &mut m.inserted },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "updated",
                |m: &GetCardInfoData| { &m.updated },
                |m: &mut GetCardInfoData| { &mut m.updated },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetCardInfoData>(
                "GetCardInfoData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetCardInfoData {
        static instance: ::protobuf::rt::LazyV2<GetCardInfoData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetCardInfoData::new)
    }
}

impl ::protobuf::Clear for GetCardInfoData {
    fn clear(&mut self) {
        self.card_uid.clear();
        self.card_provider.clear();
        self.card_code.clear();
        self.bin_number.clear();
        self.card_type.clear();
        self.customer_name.clear();
        self.customer_tel.clear();
        self.customer_email.clear();
        self.customer_addr.clear();
        self.customer_postcode.clear();
        self.inserted = 0;
        self.updated = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetCardInfoData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCardInfoData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetCardInfoResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<GetCardInfoData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetCardInfoResponse {
    fn default() -> &'a GetCardInfoResponse {
        <GetCardInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetCardInfoResponse {
    pub fn new() -> GetCardInfoResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .card_v2.GetCardInfoData response = 3;


    pub fn get_response(&self) -> &GetCardInfoData {
        self.response.as_ref().unwrap_or_else(|| <GetCardInfoData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: GetCardInfoData) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut GetCardInfoData {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> GetCardInfoData {
        self.response.take().unwrap_or_else(|| GetCardInfoData::new())
    }
}

impl ::protobuf::Message for GetCardInfoResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetCardInfoResponse {
        GetCardInfoResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &GetCardInfoResponse| { &m.code },
                |m: &mut GetCardInfoResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &GetCardInfoResponse| { &m.message },
                |m: &mut GetCardInfoResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GetCardInfoData>>(
                "response",
                |m: &GetCardInfoResponse| { &m.response },
                |m: &mut GetCardInfoResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetCardInfoResponse>(
                "GetCardInfoResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetCardInfoResponse {
        static instance: ::protobuf::rt::LazyV2<GetCardInfoResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetCardInfoResponse::new)
    }
}

impl ::protobuf::Clear for GetCardInfoResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetCardInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCardInfoResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteCardInfoRequest {
    // message fields
    pub card_uid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteCardInfoRequest {
    fn default() -> &'a DeleteCardInfoRequest {
        <DeleteCardInfoRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteCardInfoRequest {
    pub fn new() -> DeleteCardInfoRequest {
        ::std::default::Default::default()
    }

    // string card_uid = 1;


    pub fn get_card_uid(&self) -> &str {
        &self.card_uid
    }
    pub fn clear_card_uid(&mut self) {
        self.card_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_uid(&mut self, v: ::std::string::String) {
        self.card_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_uid(&mut self) -> &mut ::std::string::String {
        &mut self.card_uid
    }

    // Take field
    pub fn take_card_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_uid, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteCardInfoRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_uid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_uid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_uid.is_empty() {
            os.write_string(1, &self.card_uid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteCardInfoRequest {
        DeleteCardInfoRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_uid",
                |m: &DeleteCardInfoRequest| { &m.card_uid },
                |m: &mut DeleteCardInfoRequest| { &mut m.card_uid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteCardInfoRequest>(
                "DeleteCardInfoRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteCardInfoRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteCardInfoRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteCardInfoRequest::new)
    }
}

impl ::protobuf::Clear for DeleteCardInfoRequest {
    fn clear(&mut self) {
        self.card_uid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteCardInfoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteCardInfoRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteCardInfoResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteCardInfoResponse {
    fn default() -> &'a DeleteCardInfoResponse {
        <DeleteCardInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteCardInfoResponse {
    pub fn new() -> DeleteCardInfoResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteCardInfoResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteCardInfoResponse {
        DeleteCardInfoResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &DeleteCardInfoResponse| { &m.code },
                |m: &mut DeleteCardInfoResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &DeleteCardInfoResponse| { &m.message },
                |m: &mut DeleteCardInfoResponse| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteCardInfoResponse>(
                "DeleteCardInfoResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteCardInfoResponse {
        static instance: ::protobuf::rt::LazyV2<DeleteCardInfoResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteCardInfoResponse::new)
    }
}

impl ::protobuf::Clear for DeleteCardInfoResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteCardInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteCardInfoResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PayByRegisteredCardRequest {
    // message fields
    pub card_uid: ::std::string::String,
    pub merchant_uid: ::std::string::String,
    pub amount: ::std::string::String,
    pub duty_free_amount: ::std::string::String,
    pub order_name: ::std::string::String,
    pub card_installment: i32,
    pub interest_free_by_merchant: bool,
    pub custom_data: ::std::string::String,
    pub callback_url: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PayByRegisteredCardRequest {
    fn default() -> &'a PayByRegisteredCardRequest {
        <PayByRegisteredCardRequest as ::protobuf::Message>::default_instance()
    }
}

impl PayByRegisteredCardRequest {
    pub fn new() -> PayByRegisteredCardRequest {
        ::std::default::Default::default()
    }

    // string card_uid = 1;


    pub fn get_card_uid(&self) -> &str {
        &self.card_uid
    }
    pub fn clear_card_uid(&mut self) {
        self.card_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_uid(&mut self, v: ::std::string::String) {
        self.card_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_uid(&mut self) -> &mut ::std::string::String {
        &mut self.card_uid
    }

    // Take field
    pub fn take_card_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_uid, ::std::string::String::new())
    }

    // string merchant_uid = 2;


    pub fn get_merchant_uid(&self) -> &str {
        &self.merchant_uid
    }
    pub fn clear_merchant_uid(&mut self) {
        self.merchant_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_merchant_uid(&mut self, v: ::std::string::String) {
        self.merchant_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_merchant_uid(&mut self) -> &mut ::std::string::String {
        &mut self.merchant_uid
    }

    // Take field
    pub fn take_merchant_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.merchant_uid, ::std::string::String::new())
    }

    // string amount = 3;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }

    // string duty_free_amount = 4;


    pub fn get_duty_free_amount(&self) -> &str {
        &self.duty_free_amount
    }
    pub fn clear_duty_free_amount(&mut self) {
        self.duty_free_amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_duty_free_amount(&mut self, v: ::std::string::String) {
        self.duty_free_amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_duty_free_amount(&mut self) -> &mut ::std::string::String {
        &mut self.duty_free_amount
    }

    // Take field
    pub fn take_duty_free_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.duty_free_amount, ::std::string::String::new())
    }

    // string order_name = 5;


    pub fn get_order_name(&self) -> &str {
        &self.order_name
    }
    pub fn clear_order_name(&mut self) {
        self.order_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_order_name(&mut self, v: ::std::string::String) {
        self.order_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_order_name(&mut self) -> &mut ::std::string::String {
        &mut self.order_name
    }

    // Take field
    pub fn take_order_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.order_name, ::std::string::String::new())
    }

    // int32 card_installment = 6;


    pub fn get_card_installment(&self) -> i32 {
        self.card_installment
    }
    pub fn clear_card_installment(&mut self) {
        self.card_installment = 0;
    }

    // Param is passed by value, moved
    pub fn set_card_installment(&mut self, v: i32) {
        self.card_installment = v;
    }

    // bool interest_free_by_merchant = 7;


    pub fn get_interest_free_by_merchant(&self) -> bool {
        self.interest_free_by_merchant
    }
    pub fn clear_interest_free_by_merchant(&mut self) {
        self.interest_free_by_merchant = false;
    }

    // Param is passed by value, moved
    pub fn set_interest_free_by_merchant(&mut self, v: bool) {
        self.interest_free_by_merchant = v;
    }

    // string custom_data = 8;


    pub fn get_custom_data(&self) -> &str {
        &self.custom_data
    }
    pub fn clear_custom_data(&mut self) {
        self.custom_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom_data(&mut self, v: ::std::string::String) {
        self.custom_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom_data(&mut self) -> &mut ::std::string::String {
        &mut self.custom_data
    }

    // Take field
    pub fn take_custom_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom_data, ::std::string::String::new())
    }

    // string callback_url = 9;


    pub fn get_callback_url(&self) -> &str {
        &self.callback_url
    }
    pub fn clear_callback_url(&mut self) {
        self.callback_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_callback_url(&mut self, v: ::std::string::String) {
        self.callback_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_callback_url(&mut self) -> &mut ::std::string::String {
        &mut self.callback_url
    }

    // Take field
    pub fn take_callback_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.callback_url, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PayByRegisteredCardRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_uid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.merchant_uid)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.duty_free_amount)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.order_name)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.card_installment = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.interest_free_by_merchant = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom_data)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.callback_url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_uid);
        }
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.merchant_uid);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.amount);
        }
        if !self.duty_free_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.duty_free_amount);
        }
        if !self.order_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.order_name);
        }
        if self.card_installment != 0 {
            my_size += ::protobuf::rt::value_size(6, self.card_installment, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.interest_free_by_merchant != false {
            my_size += 2;
        }
        if !self.custom_data.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.custom_data);
        }
        if !self.callback_url.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.callback_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_uid.is_empty() {
            os.write_string(1, &self.card_uid)?;
        }
        if !self.merchant_uid.is_empty() {
            os.write_string(2, &self.merchant_uid)?;
        }
        if !self.amount.is_empty() {
            os.write_string(3, &self.amount)?;
        }
        if !self.duty_free_amount.is_empty() {
            os.write_string(4, &self.duty_free_amount)?;
        }
        if !self.order_name.is_empty() {
            os.write_string(5, &self.order_name)?;
        }
        if self.card_installment != 0 {
            os.write_int32(6, self.card_installment)?;
        }
        if self.interest_free_by_merchant != false {
            os.write_bool(7, self.interest_free_by_merchant)?;
        }
        if !self.custom_data.is_empty() {
            os.write_string(8, &self.custom_data)?;
        }
        if !self.callback_url.is_empty() {
            os.write_string(9, &self.callback_url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PayByRegisteredCardRequest {
        PayByRegisteredCardRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_uid",
                |m: &PayByRegisteredCardRequest| { &m.card_uid },
                |m: &mut PayByRegisteredCardRequest| { &mut m.card_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "merchant_uid",
                |m: &PayByRegisteredCardRequest| { &m.merchant_uid },
                |m: &mut PayByRegisteredCardRequest| { &mut m.merchant_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "amount",
                |m: &PayByRegisteredCardRequest| { &m.amount },
                |m: &mut PayByRegisteredCardRequest| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "duty_free_amount",
                |m: &PayByRegisteredCardRequest| { &m.duty_free_amount },
                |m: &mut PayByRegisteredCardRequest| { &mut m.duty_free_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "order_name",
                |m: &PayByRegisteredCardRequest| { &m.order_name },
                |m: &mut PayByRegisteredCardRequest| { &mut m.order_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "card_installment",
                |m: &PayByRegisteredCardRequest| { &m.card_installment },
                |m: &mut PayByRegisteredCardRequest| { &mut m.card_installment },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "interest_free_by_merchant",
                |m: &PayByRegisteredCardRequest| { &m.interest_free_by_merchant },
                |m: &mut PayByRegisteredCardRequest| { &mut m.interest_free_by_merchant },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "custom_data",
                |m: &PayByRegisteredCardRequest| { &m.custom_data },
                |m: &mut PayByRegisteredCardRequest| { &mut m.custom_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "callback_url",
                |m: &PayByRegisteredCardRequest| { &m.callback_url },
                |m: &mut PayByRegisteredCardRequest| { &mut m.callback_url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PayByRegisteredCardRequest>(
                "PayByRegisteredCardRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PayByRegisteredCardRequest {
        static instance: ::protobuf::rt::LazyV2<PayByRegisteredCardRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PayByRegisteredCardRequest::new)
    }
}

impl ::protobuf::Clear for PayByRegisteredCardRequest {
    fn clear(&mut self) {
        self.card_uid.clear();
        self.merchant_uid.clear();
        self.amount.clear();
        self.duty_free_amount.clear();
        self.order_name.clear();
        self.card_installment = 0;
        self.interest_free_by_merchant = false;
        self.custom_data.clear();
        self.callback_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PayByRegisteredCardRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PayByRegisteredCardRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PayByRegisteredCardData {
    // message fields
    pub amount: ::std::string::String,
    pub apply_num: ::std::string::String,
    pub buyer_addr: ::std::string::String,
    pub buyer_email: ::std::string::String,
    pub buyer_name: ::std::string::String,
    pub buyer_postcode: ::std::string::String,
    pub buyer_tel: ::std::string::String,
    pub cancel_amount: ::std::string::String,
    pub cancel_history: ::protobuf::RepeatedField<CancelHistory>,
    pub cancel_reason: ::std::string::String,
    pub cancel_receipt_urls: ::protobuf::RepeatedField<::std::string::String>,
    pub cancelled_at: i32,
    pub card_code: ::std::string::String,
    pub card_name: ::std::string::String,
    pub bin_number: ::std::string::String,
    pub card_installment: i32,
    pub card_type: i32,
    pub cash_receipt_issued: bool,
    pub channel: ::std::string::String,
    pub currency: ::std::string::String,
    pub custom_data: ::std::string::String,
    pub card_uid: ::std::string::String,
    pub customer_uid_usage: ::std::string::String,
    pub fail_reason: ::std::string::String,
    pub failed_at: i32,
    pub imp_uid: ::std::string::String,
    pub merchant_uid: ::std::string::String,
    pub order_name: ::std::string::String,
    pub paid_at: i32,
    pub pay_method: ::std::string::String,
    pub pg_id: ::std::string::String,
    pub pg_provider: ::std::string::String,
    pub pg_tid: ::std::string::String,
    pub receipt_url: ::std::string::String,
    pub started_at: i32,
    pub status: ::std::string::String,
    pub user_agent: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PayByRegisteredCardData {
    fn default() -> &'a PayByRegisteredCardData {
        <PayByRegisteredCardData as ::protobuf::Message>::default_instance()
    }
}

impl PayByRegisteredCardData {
    pub fn new() -> PayByRegisteredCardData {
        ::std::default::Default::default()
    }

    // string amount = 1;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }

    // string apply_num = 2;


    pub fn get_apply_num(&self) -> &str {
        &self.apply_num
    }
    pub fn clear_apply_num(&mut self) {
        self.apply_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_apply_num(&mut self, v: ::std::string::String) {
        self.apply_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_apply_num(&mut self) -> &mut ::std::string::String {
        &mut self.apply_num
    }

    // Take field
    pub fn take_apply_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.apply_num, ::std::string::String::new())
    }

    // string buyer_addr = 3;


    pub fn get_buyer_addr(&self) -> &str {
        &self.buyer_addr
    }
    pub fn clear_buyer_addr(&mut self) {
        self.buyer_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer_addr(&mut self, v: ::std::string::String) {
        self.buyer_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer_addr(&mut self) -> &mut ::std::string::String {
        &mut self.buyer_addr
    }

    // Take field
    pub fn take_buyer_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer_addr, ::std::string::String::new())
    }

    // string buyer_email = 4;


    pub fn get_buyer_email(&self) -> &str {
        &self.buyer_email
    }
    pub fn clear_buyer_email(&mut self) {
        self.buyer_email.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer_email(&mut self, v: ::std::string::String) {
        self.buyer_email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer_email(&mut self) -> &mut ::std::string::String {
        &mut self.buyer_email
    }

    // Take field
    pub fn take_buyer_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer_email, ::std::string::String::new())
    }

    // string buyer_name = 5;


    pub fn get_buyer_name(&self) -> &str {
        &self.buyer_name
    }
    pub fn clear_buyer_name(&mut self) {
        self.buyer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer_name(&mut self, v: ::std::string::String) {
        self.buyer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer_name(&mut self) -> &mut ::std::string::String {
        &mut self.buyer_name
    }

    // Take field
    pub fn take_buyer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer_name, ::std::string::String::new())
    }

    // string buyer_postcode = 6;


    pub fn get_buyer_postcode(&self) -> &str {
        &self.buyer_postcode
    }
    pub fn clear_buyer_postcode(&mut self) {
        self.buyer_postcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer_postcode(&mut self, v: ::std::string::String) {
        self.buyer_postcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer_postcode(&mut self) -> &mut ::std::string::String {
        &mut self.buyer_postcode
    }

    // Take field
    pub fn take_buyer_postcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer_postcode, ::std::string::String::new())
    }

    // string buyer_tel = 7;


    pub fn get_buyer_tel(&self) -> &str {
        &self.buyer_tel
    }
    pub fn clear_buyer_tel(&mut self) {
        self.buyer_tel.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer_tel(&mut self, v: ::std::string::String) {
        self.buyer_tel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer_tel(&mut self) -> &mut ::std::string::String {
        &mut self.buyer_tel
    }

    // Take field
    pub fn take_buyer_tel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer_tel, ::std::string::String::new())
    }

    // string cancel_amount = 8;


    pub fn get_cancel_amount(&self) -> &str {
        &self.cancel_amount
    }
    pub fn clear_cancel_amount(&mut self) {
        self.cancel_amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_cancel_amount(&mut self, v: ::std::string::String) {
        self.cancel_amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cancel_amount(&mut self) -> &mut ::std::string::String {
        &mut self.cancel_amount
    }

    // Take field
    pub fn take_cancel_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cancel_amount, ::std::string::String::new())
    }

    // repeated .card_v2.CancelHistory cancel_history = 9;


    pub fn get_cancel_history(&self) -> &[CancelHistory] {
        &self.cancel_history
    }
    pub fn clear_cancel_history(&mut self) {
        self.cancel_history.clear();
    }

    // Param is passed by value, moved
    pub fn set_cancel_history(&mut self, v: ::protobuf::RepeatedField<CancelHistory>) {
        self.cancel_history = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cancel_history(&mut self) -> &mut ::protobuf::RepeatedField<CancelHistory> {
        &mut self.cancel_history
    }

    // Take field
    pub fn take_cancel_history(&mut self) -> ::protobuf::RepeatedField<CancelHistory> {
        ::std::mem::replace(&mut self.cancel_history, ::protobuf::RepeatedField::new())
    }

    // string cancel_reason = 10;


    pub fn get_cancel_reason(&self) -> &str {
        &self.cancel_reason
    }
    pub fn clear_cancel_reason(&mut self) {
        self.cancel_reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_cancel_reason(&mut self, v: ::std::string::String) {
        self.cancel_reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cancel_reason(&mut self) -> &mut ::std::string::String {
        &mut self.cancel_reason
    }

    // Take field
    pub fn take_cancel_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cancel_reason, ::std::string::String::new())
    }

    // repeated string cancel_receipt_urls = 11;


    pub fn get_cancel_receipt_urls(&self) -> &[::std::string::String] {
        &self.cancel_receipt_urls
    }
    pub fn clear_cancel_receipt_urls(&mut self) {
        self.cancel_receipt_urls.clear();
    }

    // Param is passed by value, moved
    pub fn set_cancel_receipt_urls(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.cancel_receipt_urls = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cancel_receipt_urls(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.cancel_receipt_urls
    }

    // Take field
    pub fn take_cancel_receipt_urls(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.cancel_receipt_urls, ::protobuf::RepeatedField::new())
    }

    // int32 cancelled_at = 12;


    pub fn get_cancelled_at(&self) -> i32 {
        self.cancelled_at
    }
    pub fn clear_cancelled_at(&mut self) {
        self.cancelled_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_cancelled_at(&mut self, v: i32) {
        self.cancelled_at = v;
    }

    // string card_code = 13;


    pub fn get_card_code(&self) -> &str {
        &self.card_code
    }
    pub fn clear_card_code(&mut self) {
        self.card_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_code(&mut self, v: ::std::string::String) {
        self.card_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_code(&mut self) -> &mut ::std::string::String {
        &mut self.card_code
    }

    // Take field
    pub fn take_card_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_code, ::std::string::String::new())
    }

    // string card_name = 14;


    pub fn get_card_name(&self) -> &str {
        &self.card_name
    }
    pub fn clear_card_name(&mut self) {
        self.card_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_name(&mut self, v: ::std::string::String) {
        self.card_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_name(&mut self) -> &mut ::std::string::String {
        &mut self.card_name
    }

    // Take field
    pub fn take_card_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_name, ::std::string::String::new())
    }

    // string bin_number = 15;


    pub fn get_bin_number(&self) -> &str {
        &self.bin_number
    }
    pub fn clear_bin_number(&mut self) {
        self.bin_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_bin_number(&mut self, v: ::std::string::String) {
        self.bin_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bin_number(&mut self) -> &mut ::std::string::String {
        &mut self.bin_number
    }

    // Take field
    pub fn take_bin_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bin_number, ::std::string::String::new())
    }

    // int32 card_installment = 16;


    pub fn get_card_installment(&self) -> i32 {
        self.card_installment
    }
    pub fn clear_card_installment(&mut self) {
        self.card_installment = 0;
    }

    // Param is passed by value, moved
    pub fn set_card_installment(&mut self, v: i32) {
        self.card_installment = v;
    }

    // int32 card_type = 17;


    pub fn get_card_type(&self) -> i32 {
        self.card_type
    }
    pub fn clear_card_type(&mut self) {
        self.card_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_card_type(&mut self, v: i32) {
        self.card_type = v;
    }

    // bool cash_receipt_issued = 18;


    pub fn get_cash_receipt_issued(&self) -> bool {
        self.cash_receipt_issued
    }
    pub fn clear_cash_receipt_issued(&mut self) {
        self.cash_receipt_issued = false;
    }

    // Param is passed by value, moved
    pub fn set_cash_receipt_issued(&mut self, v: bool) {
        self.cash_receipt_issued = v;
    }

    // string channel = 19;


    pub fn get_channel(&self) -> &str {
        &self.channel
    }
    pub fn clear_channel(&mut self) {
        self.channel.clear();
    }

    // Param is passed by value, moved
    pub fn set_channel(&mut self, v: ::std::string::String) {
        self.channel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel(&mut self) -> &mut ::std::string::String {
        &mut self.channel
    }

    // Take field
    pub fn take_channel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.channel, ::std::string::String::new())
    }

    // string currency = 20;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // string custom_data = 21;


    pub fn get_custom_data(&self) -> &str {
        &self.custom_data
    }
    pub fn clear_custom_data(&mut self) {
        self.custom_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom_data(&mut self, v: ::std::string::String) {
        self.custom_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom_data(&mut self) -> &mut ::std::string::String {
        &mut self.custom_data
    }

    // Take field
    pub fn take_custom_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom_data, ::std::string::String::new())
    }

    // string card_uid = 22;


    pub fn get_card_uid(&self) -> &str {
        &self.card_uid
    }
    pub fn clear_card_uid(&mut self) {
        self.card_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_uid(&mut self, v: ::std::string::String) {
        self.card_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_uid(&mut self) -> &mut ::std::string::String {
        &mut self.card_uid
    }

    // Take field
    pub fn take_card_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_uid, ::std::string::String::new())
    }

    // string customer_uid_usage = 23;


    pub fn get_customer_uid_usage(&self) -> &str {
        &self.customer_uid_usage
    }
    pub fn clear_customer_uid_usage(&mut self) {
        self.customer_uid_usage.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_uid_usage(&mut self, v: ::std::string::String) {
        self.customer_uid_usage = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_uid_usage(&mut self) -> &mut ::std::string::String {
        &mut self.customer_uid_usage
    }

    // Take field
    pub fn take_customer_uid_usage(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_uid_usage, ::std::string::String::new())
    }

    // string fail_reason = 24;


    pub fn get_fail_reason(&self) -> &str {
        &self.fail_reason
    }
    pub fn clear_fail_reason(&mut self) {
        self.fail_reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_fail_reason(&mut self, v: ::std::string::String) {
        self.fail_reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fail_reason(&mut self) -> &mut ::std::string::String {
        &mut self.fail_reason
    }

    // Take field
    pub fn take_fail_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fail_reason, ::std::string::String::new())
    }

    // int32 failed_at = 25;


    pub fn get_failed_at(&self) -> i32 {
        self.failed_at
    }
    pub fn clear_failed_at(&mut self) {
        self.failed_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_failed_at(&mut self, v: i32) {
        self.failed_at = v;
    }

    // string imp_uid = 26;


    pub fn get_imp_uid(&self) -> &str {
        &self.imp_uid
    }
    pub fn clear_imp_uid(&mut self) {
        self.imp_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_imp_uid(&mut self, v: ::std::string::String) {
        self.imp_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_imp_uid(&mut self) -> &mut ::std::string::String {
        &mut self.imp_uid
    }

    // Take field
    pub fn take_imp_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.imp_uid, ::std::string::String::new())
    }

    // string merchant_uid = 27;


    pub fn get_merchant_uid(&self) -> &str {
        &self.merchant_uid
    }
    pub fn clear_merchant_uid(&mut self) {
        self.merchant_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_merchant_uid(&mut self, v: ::std::string::String) {
        self.merchant_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_merchant_uid(&mut self) -> &mut ::std::string::String {
        &mut self.merchant_uid
    }

    // Take field
    pub fn take_merchant_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.merchant_uid, ::std::string::String::new())
    }

    // string order_name = 28;


    pub fn get_order_name(&self) -> &str {
        &self.order_name
    }
    pub fn clear_order_name(&mut self) {
        self.order_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_order_name(&mut self, v: ::std::string::String) {
        self.order_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_order_name(&mut self) -> &mut ::std::string::String {
        &mut self.order_name
    }

    // Take field
    pub fn take_order_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.order_name, ::std::string::String::new())
    }

    // int32 paid_at = 29;


    pub fn get_paid_at(&self) -> i32 {
        self.paid_at
    }
    pub fn clear_paid_at(&mut self) {
        self.paid_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_paid_at(&mut self, v: i32) {
        self.paid_at = v;
    }

    // string pay_method = 30;


    pub fn get_pay_method(&self) -> &str {
        &self.pay_method
    }
    pub fn clear_pay_method(&mut self) {
        self.pay_method.clear();
    }

    // Param is passed by value, moved
    pub fn set_pay_method(&mut self, v: ::std::string::String) {
        self.pay_method = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pay_method(&mut self) -> &mut ::std::string::String {
        &mut self.pay_method
    }

    // Take field
    pub fn take_pay_method(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pay_method, ::std::string::String::new())
    }

    // string pg_id = 31;


    pub fn get_pg_id(&self) -> &str {
        &self.pg_id
    }
    pub fn clear_pg_id(&mut self) {
        self.pg_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_id(&mut self, v: ::std::string::String) {
        self.pg_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_id(&mut self) -> &mut ::std::string::String {
        &mut self.pg_id
    }

    // Take field
    pub fn take_pg_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_id, ::std::string::String::new())
    }

    // string pg_provider = 32;


    pub fn get_pg_provider(&self) -> &str {
        &self.pg_provider
    }
    pub fn clear_pg_provider(&mut self) {
        self.pg_provider.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_provider(&mut self, v: ::std::string::String) {
        self.pg_provider = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_provider(&mut self) -> &mut ::std::string::String {
        &mut self.pg_provider
    }

    // Take field
    pub fn take_pg_provider(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_provider, ::std::string::String::new())
    }

    // string pg_tid = 33;


    pub fn get_pg_tid(&self) -> &str {
        &self.pg_tid
    }
    pub fn clear_pg_tid(&mut self) {
        self.pg_tid.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_tid(&mut self, v: ::std::string::String) {
        self.pg_tid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_tid(&mut self) -> &mut ::std::string::String {
        &mut self.pg_tid
    }

    // Take field
    pub fn take_pg_tid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_tid, ::std::string::String::new())
    }

    // string receipt_url = 34;


    pub fn get_receipt_url(&self) -> &str {
        &self.receipt_url
    }
    pub fn clear_receipt_url(&mut self) {
        self.receipt_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_receipt_url(&mut self, v: ::std::string::String) {
        self.receipt_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receipt_url(&mut self) -> &mut ::std::string::String {
        &mut self.receipt_url
    }

    // Take field
    pub fn take_receipt_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receipt_url, ::std::string::String::new())
    }

    // int32 started_at = 35;


    pub fn get_started_at(&self) -> i32 {
        self.started_at
    }
    pub fn clear_started_at(&mut self) {
        self.started_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_started_at(&mut self, v: i32) {
        self.started_at = v;
    }

    // string status = 36;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    // string user_agent = 37;


    pub fn get_user_agent(&self) -> &str {
        &self.user_agent
    }
    pub fn clear_user_agent(&mut self) {
        self.user_agent.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_agent(&mut self, v: ::std::string::String) {
        self.user_agent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_agent(&mut self) -> &mut ::std::string::String {
        &mut self.user_agent
    }

    // Take field
    pub fn take_user_agent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.user_agent, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PayByRegisteredCardData {
    fn is_initialized(&self) -> bool {
        for v in &self.cancel_history {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.apply_num)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer_addr)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer_email)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer_name)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer_postcode)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer_tel)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cancel_amount)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cancel_history)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cancel_reason)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.cancel_receipt_urls)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.cancelled_at = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_code)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_name)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bin_number)?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.card_installment = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.card_type = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.cash_receipt_issued = tmp;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.channel)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom_data)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_uid)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_uid_usage)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fail_reason)?;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.failed_at = tmp;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.imp_uid)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.merchant_uid)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.order_name)?;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.paid_at = tmp;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pay_method)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_id)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_provider)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_tid)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receipt_url)?;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.started_at = tmp;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user_agent)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.amount);
        }
        if !self.apply_num.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.apply_num);
        }
        if !self.buyer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.buyer_addr);
        }
        if !self.buyer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.buyer_email);
        }
        if !self.buyer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.buyer_name);
        }
        if !self.buyer_postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.buyer_postcode);
        }
        if !self.buyer_tel.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.buyer_tel);
        }
        if !self.cancel_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.cancel_amount);
        }
        for value in &self.cancel_history {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.cancel_reason.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.cancel_reason);
        }
        for value in &self.cancel_receipt_urls {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        if self.cancelled_at != 0 {
            my_size += ::protobuf::rt::value_size(12, self.cancelled_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.card_code.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.card_code);
        }
        if !self.card_name.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.card_name);
        }
        if !self.bin_number.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.bin_number);
        }
        if self.card_installment != 0 {
            my_size += ::protobuf::rt::value_size(16, self.card_installment, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.card_type != 0 {
            my_size += ::protobuf::rt::value_size(17, self.card_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cash_receipt_issued != false {
            my_size += 3;
        }
        if !self.channel.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.channel);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.currency);
        }
        if !self.custom_data.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.custom_data);
        }
        if !self.card_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.card_uid);
        }
        if !self.customer_uid_usage.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.customer_uid_usage);
        }
        if !self.fail_reason.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.fail_reason);
        }
        if self.failed_at != 0 {
            my_size += ::protobuf::rt::value_size(25, self.failed_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.imp_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.imp_uid);
        }
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.merchant_uid);
        }
        if !self.order_name.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.order_name);
        }
        if self.paid_at != 0 {
            my_size += ::protobuf::rt::value_size(29, self.paid_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.pay_method.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.pay_method);
        }
        if !self.pg_id.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.pg_id);
        }
        if !self.pg_provider.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.pg_provider);
        }
        if !self.pg_tid.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.pg_tid);
        }
        if !self.receipt_url.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.receipt_url);
        }
        if self.started_at != 0 {
            my_size += ::protobuf::rt::value_size(35, self.started_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.status);
        }
        if !self.user_agent.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.user_agent);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.amount.is_empty() {
            os.write_string(1, &self.amount)?;
        }
        if !self.apply_num.is_empty() {
            os.write_string(2, &self.apply_num)?;
        }
        if !self.buyer_addr.is_empty() {
            os.write_string(3, &self.buyer_addr)?;
        }
        if !self.buyer_email.is_empty() {
            os.write_string(4, &self.buyer_email)?;
        }
        if !self.buyer_name.is_empty() {
            os.write_string(5, &self.buyer_name)?;
        }
        if !self.buyer_postcode.is_empty() {
            os.write_string(6, &self.buyer_postcode)?;
        }
        if !self.buyer_tel.is_empty() {
            os.write_string(7, &self.buyer_tel)?;
        }
        if !self.cancel_amount.is_empty() {
            os.write_string(8, &self.cancel_amount)?;
        }
        for v in &self.cancel_history {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.cancel_reason.is_empty() {
            os.write_string(10, &self.cancel_reason)?;
        }
        for v in &self.cancel_receipt_urls {
            os.write_string(11, &v)?;
        };
        if self.cancelled_at != 0 {
            os.write_int32(12, self.cancelled_at)?;
        }
        if !self.card_code.is_empty() {
            os.write_string(13, &self.card_code)?;
        }
        if !self.card_name.is_empty() {
            os.write_string(14, &self.card_name)?;
        }
        if !self.bin_number.is_empty() {
            os.write_string(15, &self.bin_number)?;
        }
        if self.card_installment != 0 {
            os.write_int32(16, self.card_installment)?;
        }
        if self.card_type != 0 {
            os.write_int32(17, self.card_type)?;
        }
        if self.cash_receipt_issued != false {
            os.write_bool(18, self.cash_receipt_issued)?;
        }
        if !self.channel.is_empty() {
            os.write_string(19, &self.channel)?;
        }
        if !self.currency.is_empty() {
            os.write_string(20, &self.currency)?;
        }
        if !self.custom_data.is_empty() {
            os.write_string(21, &self.custom_data)?;
        }
        if !self.card_uid.is_empty() {
            os.write_string(22, &self.card_uid)?;
        }
        if !self.customer_uid_usage.is_empty() {
            os.write_string(23, &self.customer_uid_usage)?;
        }
        if !self.fail_reason.is_empty() {
            os.write_string(24, &self.fail_reason)?;
        }
        if self.failed_at != 0 {
            os.write_int32(25, self.failed_at)?;
        }
        if !self.imp_uid.is_empty() {
            os.write_string(26, &self.imp_uid)?;
        }
        if !self.merchant_uid.is_empty() {
            os.write_string(27, &self.merchant_uid)?;
        }
        if !self.order_name.is_empty() {
            os.write_string(28, &self.order_name)?;
        }
        if self.paid_at != 0 {
            os.write_int32(29, self.paid_at)?;
        }
        if !self.pay_method.is_empty() {
            os.write_string(30, &self.pay_method)?;
        }
        if !self.pg_id.is_empty() {
            os.write_string(31, &self.pg_id)?;
        }
        if !self.pg_provider.is_empty() {
            os.write_string(32, &self.pg_provider)?;
        }
        if !self.pg_tid.is_empty() {
            os.write_string(33, &self.pg_tid)?;
        }
        if !self.receipt_url.is_empty() {
            os.write_string(34, &self.receipt_url)?;
        }
        if self.started_at != 0 {
            os.write_int32(35, self.started_at)?;
        }
        if !self.status.is_empty() {
            os.write_string(36, &self.status)?;
        }
        if !self.user_agent.is_empty() {
            os.write_string(37, &self.user_agent)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PayByRegisteredCardData {
        PayByRegisteredCardData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "amount",
                |m: &PayByRegisteredCardData| { &m.amount },
                |m: &mut PayByRegisteredCardData| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "apply_num",
                |m: &PayByRegisteredCardData| { &m.apply_num },
                |m: &mut PayByRegisteredCardData| { &mut m.apply_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer_addr",
                |m: &PayByRegisteredCardData| { &m.buyer_addr },
                |m: &mut PayByRegisteredCardData| { &mut m.buyer_addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer_email",
                |m: &PayByRegisteredCardData| { &m.buyer_email },
                |m: &mut PayByRegisteredCardData| { &mut m.buyer_email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer_name",
                |m: &PayByRegisteredCardData| { &m.buyer_name },
                |m: &mut PayByRegisteredCardData| { &mut m.buyer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer_postcode",
                |m: &PayByRegisteredCardData| { &m.buyer_postcode },
                |m: &mut PayByRegisteredCardData| { &mut m.buyer_postcode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer_tel",
                |m: &PayByRegisteredCardData| { &m.buyer_tel },
                |m: &mut PayByRegisteredCardData| { &mut m.buyer_tel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cancel_amount",
                |m: &PayByRegisteredCardData| { &m.cancel_amount },
                |m: &mut PayByRegisteredCardData| { &mut m.cancel_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CancelHistory>>(
                "cancel_history",
                |m: &PayByRegisteredCardData| { &m.cancel_history },
                |m: &mut PayByRegisteredCardData| { &mut m.cancel_history },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cancel_reason",
                |m: &PayByRegisteredCardData| { &m.cancel_reason },
                |m: &mut PayByRegisteredCardData| { &mut m.cancel_reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cancel_receipt_urls",
                |m: &PayByRegisteredCardData| { &m.cancel_receipt_urls },
                |m: &mut PayByRegisteredCardData| { &mut m.cancel_receipt_urls },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "cancelled_at",
                |m: &PayByRegisteredCardData| { &m.cancelled_at },
                |m: &mut PayByRegisteredCardData| { &mut m.cancelled_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_code",
                |m: &PayByRegisteredCardData| { &m.card_code },
                |m: &mut PayByRegisteredCardData| { &mut m.card_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_name",
                |m: &PayByRegisteredCardData| { &m.card_name },
                |m: &mut PayByRegisteredCardData| { &mut m.card_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bin_number",
                |m: &PayByRegisteredCardData| { &m.bin_number },
                |m: &mut PayByRegisteredCardData| { &mut m.bin_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "card_installment",
                |m: &PayByRegisteredCardData| { &m.card_installment },
                |m: &mut PayByRegisteredCardData| { &mut m.card_installment },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "card_type",
                |m: &PayByRegisteredCardData| { &m.card_type },
                |m: &mut PayByRegisteredCardData| { &mut m.card_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "cash_receipt_issued",
                |m: &PayByRegisteredCardData| { &m.cash_receipt_issued },
                |m: &mut PayByRegisteredCardData| { &mut m.cash_receipt_issued },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "channel",
                |m: &PayByRegisteredCardData| { &m.channel },
                |m: &mut PayByRegisteredCardData| { &mut m.channel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &PayByRegisteredCardData| { &m.currency },
                |m: &mut PayByRegisteredCardData| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "custom_data",
                |m: &PayByRegisteredCardData| { &m.custom_data },
                |m: &mut PayByRegisteredCardData| { &mut m.custom_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_uid",
                |m: &PayByRegisteredCardData| { &m.card_uid },
                |m: &mut PayByRegisteredCardData| { &mut m.card_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_uid_usage",
                |m: &PayByRegisteredCardData| { &m.customer_uid_usage },
                |m: &mut PayByRegisteredCardData| { &mut m.customer_uid_usage },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fail_reason",
                |m: &PayByRegisteredCardData| { &m.fail_reason },
                |m: &mut PayByRegisteredCardData| { &mut m.fail_reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "failed_at",
                |m: &PayByRegisteredCardData| { &m.failed_at },
                |m: &mut PayByRegisteredCardData| { &mut m.failed_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "imp_uid",
                |m: &PayByRegisteredCardData| { &m.imp_uid },
                |m: &mut PayByRegisteredCardData| { &mut m.imp_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "merchant_uid",
                |m: &PayByRegisteredCardData| { &m.merchant_uid },
                |m: &mut PayByRegisteredCardData| { &mut m.merchant_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "order_name",
                |m: &PayByRegisteredCardData| { &m.order_name },
                |m: &mut PayByRegisteredCardData| { &mut m.order_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "paid_at",
                |m: &PayByRegisteredCardData| { &m.paid_at },
                |m: &mut PayByRegisteredCardData| { &mut m.paid_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pay_method",
                |m: &PayByRegisteredCardData| { &m.pay_method },
                |m: &mut PayByRegisteredCardData| { &mut m.pay_method },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_id",
                |m: &PayByRegisteredCardData| { &m.pg_id },
                |m: &mut PayByRegisteredCardData| { &mut m.pg_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_provider",
                |m: &PayByRegisteredCardData| { &m.pg_provider },
                |m: &mut PayByRegisteredCardData| { &mut m.pg_provider },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_tid",
                |m: &PayByRegisteredCardData| { &m.pg_tid },
                |m: &mut PayByRegisteredCardData| { &mut m.pg_tid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "receipt_url",
                |m: &PayByRegisteredCardData| { &m.receipt_url },
                |m: &mut PayByRegisteredCardData| { &mut m.receipt_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "started_at",
                |m: &PayByRegisteredCardData| { &m.started_at },
                |m: &mut PayByRegisteredCardData| { &mut m.started_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status",
                |m: &PayByRegisteredCardData| { &m.status },
                |m: &mut PayByRegisteredCardData| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "user_agent",
                |m: &PayByRegisteredCardData| { &m.user_agent },
                |m: &mut PayByRegisteredCardData| { &mut m.user_agent },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PayByRegisteredCardData>(
                "PayByRegisteredCardData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PayByRegisteredCardData {
        static instance: ::protobuf::rt::LazyV2<PayByRegisteredCardData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PayByRegisteredCardData::new)
    }
}

impl ::protobuf::Clear for PayByRegisteredCardData {
    fn clear(&mut self) {
        self.amount.clear();
        self.apply_num.clear();
        self.buyer_addr.clear();
        self.buyer_email.clear();
        self.buyer_name.clear();
        self.buyer_postcode.clear();
        self.buyer_tel.clear();
        self.cancel_amount.clear();
        self.cancel_history.clear();
        self.cancel_reason.clear();
        self.cancel_receipt_urls.clear();
        self.cancelled_at = 0;
        self.card_code.clear();
        self.card_name.clear();
        self.bin_number.clear();
        self.card_installment = 0;
        self.card_type = 0;
        self.cash_receipt_issued = false;
        self.channel.clear();
        self.currency.clear();
        self.custom_data.clear();
        self.card_uid.clear();
        self.customer_uid_usage.clear();
        self.fail_reason.clear();
        self.failed_at = 0;
        self.imp_uid.clear();
        self.merchant_uid.clear();
        self.order_name.clear();
        self.paid_at = 0;
        self.pay_method.clear();
        self.pg_id.clear();
        self.pg_provider.clear();
        self.pg_tid.clear();
        self.receipt_url.clear();
        self.started_at = 0;
        self.status.clear();
        self.user_agent.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PayByRegisteredCardData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PayByRegisteredCardData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PayByRegisteredCardResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<PayByRegisteredCardData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PayByRegisteredCardResponse {
    fn default() -> &'a PayByRegisteredCardResponse {
        <PayByRegisteredCardResponse as ::protobuf::Message>::default_instance()
    }
}

impl PayByRegisteredCardResponse {
    pub fn new() -> PayByRegisteredCardResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .card_v2.PayByRegisteredCardData response = 3;


    pub fn get_response(&self) -> &PayByRegisteredCardData {
        self.response.as_ref().unwrap_or_else(|| <PayByRegisteredCardData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: PayByRegisteredCardData) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut PayByRegisteredCardData {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> PayByRegisteredCardData {
        self.response.take().unwrap_or_else(|| PayByRegisteredCardData::new())
    }
}

impl ::protobuf::Message for PayByRegisteredCardResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PayByRegisteredCardResponse {
        PayByRegisteredCardResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &PayByRegisteredCardResponse| { &m.code },
                |m: &mut PayByRegisteredCardResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &PayByRegisteredCardResponse| { &m.message },
                |m: &mut PayByRegisteredCardResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PayByRegisteredCardData>>(
                "response",
                |m: &PayByRegisteredCardResponse| { &m.response },
                |m: &mut PayByRegisteredCardResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PayByRegisteredCardResponse>(
                "PayByRegisteredCardResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PayByRegisteredCardResponse {
        static instance: ::protobuf::rt::LazyV2<PayByRegisteredCardResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PayByRegisteredCardResponse::new)
    }
}

impl ::protobuf::Clear for PayByRegisteredCardResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PayByRegisteredCardResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PayByRegisteredCardResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelHistory {
    // message fields
    pub pg_tid: ::std::string::String,
    pub amount: ::std::string::String,
    pub cancelled_at: i32,
    pub reason: ::std::string::String,
    pub receipt_url: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelHistory {
    fn default() -> &'a CancelHistory {
        <CancelHistory as ::protobuf::Message>::default_instance()
    }
}

impl CancelHistory {
    pub fn new() -> CancelHistory {
        ::std::default::Default::default()
    }

    // string pg_tid = 1;


    pub fn get_pg_tid(&self) -> &str {
        &self.pg_tid
    }
    pub fn clear_pg_tid(&mut self) {
        self.pg_tid.clear();
    }

    // Param is passed by value, moved
    pub fn set_pg_tid(&mut self, v: ::std::string::String) {
        self.pg_tid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pg_tid(&mut self) -> &mut ::std::string::String {
        &mut self.pg_tid
    }

    // Take field
    pub fn take_pg_tid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pg_tid, ::std::string::String::new())
    }

    // string amount = 2;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }

    // int32 cancelled_at = 3;


    pub fn get_cancelled_at(&self) -> i32 {
        self.cancelled_at
    }
    pub fn clear_cancelled_at(&mut self) {
        self.cancelled_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_cancelled_at(&mut self, v: i32) {
        self.cancelled_at = v;
    }

    // string reason = 4;


    pub fn get_reason(&self) -> &str {
        &self.reason
    }
    pub fn clear_reason(&mut self) {
        self.reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        &mut self.reason
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reason, ::std::string::String::new())
    }

    // string receipt_url = 5;


    pub fn get_receipt_url(&self) -> &str {
        &self.receipt_url
    }
    pub fn clear_receipt_url(&mut self) {
        self.receipt_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_receipt_url(&mut self, v: ::std::string::String) {
        self.receipt_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receipt_url(&mut self) -> &mut ::std::string::String {
        &mut self.receipt_url
    }

    // Take field
    pub fn take_receipt_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receipt_url, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CancelHistory {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pg_tid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.cancelled_at = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reason)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receipt_url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pg_tid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pg_tid);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.amount);
        }
        if self.cancelled_at != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cancelled_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.reason.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.reason);
        }
        if !self.receipt_url.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.receipt_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pg_tid.is_empty() {
            os.write_string(1, &self.pg_tid)?;
        }
        if !self.amount.is_empty() {
            os.write_string(2, &self.amount)?;
        }
        if self.cancelled_at != 0 {
            os.write_int32(3, self.cancelled_at)?;
        }
        if !self.reason.is_empty() {
            os.write_string(4, &self.reason)?;
        }
        if !self.receipt_url.is_empty() {
            os.write_string(5, &self.receipt_url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelHistory {
        CancelHistory::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pg_tid",
                |m: &CancelHistory| { &m.pg_tid },
                |m: &mut CancelHistory| { &mut m.pg_tid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "amount",
                |m: &CancelHistory| { &m.amount },
                |m: &mut CancelHistory| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "cancelled_at",
                |m: &CancelHistory| { &m.cancelled_at },
                |m: &mut CancelHistory| { &mut m.cancelled_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reason",
                |m: &CancelHistory| { &m.reason },
                |m: &mut CancelHistory| { &mut m.reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "receipt_url",
                |m: &CancelHistory| { &m.receipt_url },
                |m: &mut CancelHistory| { &mut m.receipt_url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CancelHistory>(
                "CancelHistory",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CancelHistory {
        static instance: ::protobuf::rt::LazyV2<CancelHistory> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CancelHistory::new)
    }
}

impl ::protobuf::Clear for CancelHistory {
    fn clear(&mut self) {
        self.pg_tid.clear();
        self.amount.clear();
        self.cancelled_at = 0;
        self.reason.clear();
        self.receipt_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelHistory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelHistory {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelCardPaymentRequest {
    // message fields
    pub amount: ::std::string::String,
    pub merchant_uid: ::std::string::String,
    pub duty_free_amount: ::std::string::String,
    pub reason: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelCardPaymentRequest {
    fn default() -> &'a CancelCardPaymentRequest {
        <CancelCardPaymentRequest as ::protobuf::Message>::default_instance()
    }
}

impl CancelCardPaymentRequest {
    pub fn new() -> CancelCardPaymentRequest {
        ::std::default::Default::default()
    }

    // string amount = 1;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }

    // string merchant_uid = 2;


    pub fn get_merchant_uid(&self) -> &str {
        &self.merchant_uid
    }
    pub fn clear_merchant_uid(&mut self) {
        self.merchant_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_merchant_uid(&mut self, v: ::std::string::String) {
        self.merchant_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_merchant_uid(&mut self) -> &mut ::std::string::String {
        &mut self.merchant_uid
    }

    // Take field
    pub fn take_merchant_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.merchant_uid, ::std::string::String::new())
    }

    // string duty_free_amount = 3;


    pub fn get_duty_free_amount(&self) -> &str {
        &self.duty_free_amount
    }
    pub fn clear_duty_free_amount(&mut self) {
        self.duty_free_amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_duty_free_amount(&mut self, v: ::std::string::String) {
        self.duty_free_amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_duty_free_amount(&mut self) -> &mut ::std::string::String {
        &mut self.duty_free_amount
    }

    // Take field
    pub fn take_duty_free_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.duty_free_amount, ::std::string::String::new())
    }

    // string reason = 4;


    pub fn get_reason(&self) -> &str {
        &self.reason
    }
    pub fn clear_reason(&mut self) {
        self.reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        &mut self.reason
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reason, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CancelCardPaymentRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.merchant_uid)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.duty_free_amount)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reason)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.amount);
        }
        if !self.merchant_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.merchant_uid);
        }
        if !self.duty_free_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.duty_free_amount);
        }
        if !self.reason.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.reason);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.amount.is_empty() {
            os.write_string(1, &self.amount)?;
        }
        if !self.merchant_uid.is_empty() {
            os.write_string(2, &self.merchant_uid)?;
        }
        if !self.duty_free_amount.is_empty() {
            os.write_string(3, &self.duty_free_amount)?;
        }
        if !self.reason.is_empty() {
            os.write_string(4, &self.reason)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelCardPaymentRequest {
        CancelCardPaymentRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "amount",
                |m: &CancelCardPaymentRequest| { &m.amount },
                |m: &mut CancelCardPaymentRequest| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "merchant_uid",
                |m: &CancelCardPaymentRequest| { &m.merchant_uid },
                |m: &mut CancelCardPaymentRequest| { &mut m.merchant_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "duty_free_amount",
                |m: &CancelCardPaymentRequest| { &m.duty_free_amount },
                |m: &mut CancelCardPaymentRequest| { &mut m.duty_free_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reason",
                |m: &CancelCardPaymentRequest| { &m.reason },
                |m: &mut CancelCardPaymentRequest| { &mut m.reason },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CancelCardPaymentRequest>(
                "CancelCardPaymentRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CancelCardPaymentRequest {
        static instance: ::protobuf::rt::LazyV2<CancelCardPaymentRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CancelCardPaymentRequest::new)
    }
}

impl ::protobuf::Clear for CancelCardPaymentRequest {
    fn clear(&mut self) {
        self.amount.clear();
        self.merchant_uid.clear();
        self.duty_free_amount.clear();
        self.reason.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelCardPaymentRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelCardPaymentRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelCardPaymenttResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<PayByRegisteredCardData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelCardPaymenttResponse {
    fn default() -> &'a CancelCardPaymenttResponse {
        <CancelCardPaymenttResponse as ::protobuf::Message>::default_instance()
    }
}

impl CancelCardPaymenttResponse {
    pub fn new() -> CancelCardPaymenttResponse {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .card_v2.PayByRegisteredCardData response = 3;


    pub fn get_response(&self) -> &PayByRegisteredCardData {
        self.response.as_ref().unwrap_or_else(|| <PayByRegisteredCardData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: PayByRegisteredCardData) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut PayByRegisteredCardData {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> PayByRegisteredCardData {
        self.response.take().unwrap_or_else(|| PayByRegisteredCardData::new())
    }
}

impl ::protobuf::Message for CancelCardPaymenttResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelCardPaymenttResponse {
        CancelCardPaymenttResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "code",
                |m: &CancelCardPaymenttResponse| { &m.code },
                |m: &mut CancelCardPaymenttResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &CancelCardPaymenttResponse| { &m.message },
                |m: &mut CancelCardPaymenttResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PayByRegisteredCardData>>(
                "response",
                |m: &CancelCardPaymenttResponse| { &m.response },
                |m: &mut CancelCardPaymenttResponse| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CancelCardPaymenttResponse>(
                "CancelCardPaymenttResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CancelCardPaymenttResponse {
        static instance: ::protobuf::rt::LazyV2<CancelCardPaymenttResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CancelCardPaymenttResponse::new)
    }
}

impl ::protobuf::Clear for CancelCardPaymenttResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelCardPaymenttResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelCardPaymenttResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bv2/payments/card/card.proto\x12\x07card_v2\"\xdf\x02\n\x13CardRegi\
    sterRequest\x12\x19\n\x08card_uid\x18\x01\x20\x01(\tR\x07cardUid\x12\x1f\
    \n\x0bcard_number\x18\x02\x20\x01(\tR\ncardNumber\x12\x16\n\x06expiry\
    \x18\x03\x20\x01(\tR\x06expiry\x12\x14\n\x05bitrh\x18\x04\x20\x01(\tR\
    \x05bitrh\x12\x1d\n\npwd_2digit\x18\x05\x20\x01(\tR\tpwd2digit\x12#\n\rc\
    ustomer_name\x18\x06\x20\x01(\tR\x0ccustomerName\x12!\n\x0ccustomer_tel\
    \x18\x07\x20\x01(\tR\x0bcustomerTel\x12%\n\x0ecustomer_email\x18\x08\x20\
    \x01(\tR\rcustomerEmail\x12#\n\rcustomer_addr\x18\t\x20\x01(\tR\x0ccusto\
    merAddr\x12+\n\x11customer_postcode\x18\n\x20\x01(\tR\x10customerPostcod\
    e\"\xc5\x03\n\x16CardRegisterResultData\x12\x19\n\x08card_uid\x18\x01\
    \x20\x01(\tR\x07cardUid\x12\x1b\n\tcard_name\x18\x02\x20\x01(\tR\x08card\
    Name\x12\x1b\n\tcard_code\x18\x03\x20\x01(\tR\x08cardCode\x12\x1f\n\x0bb\
    in_numbrer\x18\x04\x20\x01(\tR\nbinNumbrer\x12!\n\x0cbirth_number\x18\
    \x05\x20\x01(\tR\x0bbirthNumber\x12\x1b\n\tcard_type\x18\x06\x20\x01(\tR\
    \x08cardType\x12#\n\rcustomer_name\x18\x07\x20\x01(\tR\x0ccustomerName\
    \x12!\n\x0ccustomer_tel\x18\x08\x20\x01(\tR\x0bcustomerTel\x12%\n\x0ecus\
    tomer_email\x18\t\x20\x01(\tR\rcustomerEmail\x12#\n\rcustomer_addr\x18\n\
    \x20\x01(\tR\x0ccustomerAddr\x12+\n\x11customer_postcode\x18\x0b\x20\x01\
    (\tR\x10customerPostcode\x12\x1a\n\x08inserted\x18\x0c\x20\x01(\x05R\x08\
    inserted\x12\x18\n\x07updated\x18\r\x20\x01(\x05R\x07updated\"\x81\x01\n\
    \x14CardRegisterResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\
    \x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\x12;\n\x08response\
    \x18\x03\x20\x01(\x0b2\x1f.card_v2.CardRegisterResultDataR\x08response\"\
    /\n\x12GetCardInfoRequest\x12\x19\n\x08card_uid\x18\x01\x20\x01(\tR\x07c\
    ardUid\"\xa1\x03\n\x0fGetCardInfoData\x12\x19\n\x08card_uid\x18\x01\x20\
    \x01(\tR\x07cardUid\x12#\n\rcard_provider\x18\x02\x20\x01(\tR\x0ccardPro\
    vider\x12\x1b\n\tcard_code\x18\x03\x20\x01(\tR\x08cardCode\x12\x1d\n\nbi\
    n_number\x18\x04\x20\x01(\tR\tbinNumber\x12\x1b\n\tcard_type\x18\x05\x20\
    \x01(\tR\x08cardType\x12#\n\rcustomer_name\x18\x06\x20\x01(\tR\x0ccustom\
    erName\x12!\n\x0ccustomer_tel\x18\x07\x20\x01(\tR\x0bcustomerTel\x12%\n\
    \x0ecustomer_email\x18\x08\x20\x01(\tR\rcustomerEmail\x12#\n\rcustomer_a\
    ddr\x18\t\x20\x01(\tR\x0ccustomerAddr\x12+\n\x11customer_postcode\x18\n\
    \x20\x01(\tR\x10customerPostcode\x12\x1a\n\x08inserted\x18\x0b\x20\x01(\
    \x05R\x08inserted\x12\x18\n\x07updated\x18\x0c\x20\x01(\x05R\x07updated\
    \"y\n\x13GetCardInfoResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04\
    code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\x124\n\x08respo\
    nse\x18\x03\x20\x01(\x0b2\x18.card_v2.GetCardInfoDataR\x08response\"2\n\
    \x15DeleteCardInfoRequest\x12\x19\n\x08card_uid\x18\x01\x20\x01(\tR\x07c\
    ardUid\"F\n\x16DeleteCardInfoResponse\x12\x12\n\x04code\x18\x01\x20\x01(\
    \x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\"\xe5\
    \x02\n\x1aPayByRegisteredCardRequest\x12\x19\n\x08card_uid\x18\x01\x20\
    \x01(\tR\x07cardUid\x12!\n\x0cmerchant_uid\x18\x02\x20\x01(\tR\x0bmercha\
    ntUid\x12\x16\n\x06amount\x18\x03\x20\x01(\tR\x06amount\x12(\n\x10duty_f\
    ree_amount\x18\x04\x20\x01(\tR\x0edutyFreeAmount\x12\x1d\n\norder_name\
    \x18\x05\x20\x01(\tR\torderName\x12)\n\x10card_installment\x18\x06\x20\
    \x01(\x05R\x0fcardInstallment\x129\n\x19interest_free_by_merchant\x18\
    \x07\x20\x01(\x08R\x16interestFreeByMerchant\x12\x1f\n\x0bcustom_data\
    \x18\x08\x20\x01(\tR\ncustomData\x12!\n\x0ccallback_url\x18\t\x20\x01(\t\
    R\x0bcallbackUrl\"\xd3\t\n\x17PayByRegisteredCardData\x12\x16\n\x06amoun\
    t\x18\x01\x20\x01(\tR\x06amount\x12\x1b\n\tapply_num\x18\x02\x20\x01(\tR\
    \x08applyNum\x12\x1d\n\nbuyer_addr\x18\x03\x20\x01(\tR\tbuyerAddr\x12\
    \x1f\n\x0bbuyer_email\x18\x04\x20\x01(\tR\nbuyerEmail\x12\x1d\n\nbuyer_n\
    ame\x18\x05\x20\x01(\tR\tbuyerName\x12%\n\x0ebuyer_postcode\x18\x06\x20\
    \x01(\tR\rbuyerPostcode\x12\x1b\n\tbuyer_tel\x18\x07\x20\x01(\tR\x08buye\
    rTel\x12#\n\rcancel_amount\x18\x08\x20\x01(\tR\x0ccancelAmount\x12=\n\
    \x0ecancel_history\x18\t\x20\x03(\x0b2\x16.card_v2.CancelHistoryR\rcance\
    lHistory\x12#\n\rcancel_reason\x18\n\x20\x01(\tR\x0ccancelReason\x12.\n\
    \x13cancel_receipt_urls\x18\x0b\x20\x03(\tR\x11cancelReceiptUrls\x12!\n\
    \x0ccancelled_at\x18\x0c\x20\x01(\x05R\x0bcancelledAt\x12\x1b\n\tcard_co\
    de\x18\r\x20\x01(\tR\x08cardCode\x12\x1b\n\tcard_name\x18\x0e\x20\x01(\t\
    R\x08cardName\x12\x1d\n\nbin_number\x18\x0f\x20\x01(\tR\tbinNumber\x12)\
    \n\x10card_installment\x18\x10\x20\x01(\x05R\x0fcardInstallment\x12\x1b\
    \n\tcard_type\x18\x11\x20\x01(\x05R\x08cardType\x12.\n\x13cash_receipt_i\
    ssued\x18\x12\x20\x01(\x08R\x11cashReceiptIssued\x12\x18\n\x07channel\
    \x18\x13\x20\x01(\tR\x07channel\x12\x1a\n\x08currency\x18\x14\x20\x01(\t\
    R\x08currency\x12\x1f\n\x0bcustom_data\x18\x15\x20\x01(\tR\ncustomData\
    \x12\x19\n\x08card_uid\x18\x16\x20\x01(\tR\x07cardUid\x12,\n\x12customer\
    _uid_usage\x18\x17\x20\x01(\tR\x10customerUidUsage\x12\x1f\n\x0bfail_rea\
    son\x18\x18\x20\x01(\tR\nfailReason\x12\x1b\n\tfailed_at\x18\x19\x20\x01\
    (\x05R\x08failedAt\x12\x17\n\x07imp_uid\x18\x1a\x20\x01(\tR\x06impUid\
    \x12!\n\x0cmerchant_uid\x18\x1b\x20\x01(\tR\x0bmerchantUid\x12\x1d\n\nor\
    der_name\x18\x1c\x20\x01(\tR\torderName\x12\x17\n\x07paid_at\x18\x1d\x20\
    \x01(\x05R\x06paidAt\x12\x1d\n\npay_method\x18\x1e\x20\x01(\tR\tpayMetho\
    d\x12\x13\n\x05pg_id\x18\x1f\x20\x01(\tR\x04pgId\x12\x1f\n\x0bpg_provide\
    r\x18\x20\x20\x01(\tR\npgProvider\x12\x15\n\x06pg_tid\x18!\x20\x01(\tR\
    \x05pgTid\x12\x1f\n\x0breceipt_url\x18\"\x20\x01(\tR\nreceiptUrl\x12\x1d\
    \n\nstarted_at\x18#\x20\x01(\x05R\tstartedAt\x12\x16\n\x06status\x18$\
    \x20\x01(\tR\x06status\x12\x1d\n\nuser_agent\x18%\x20\x01(\tR\tuserAgent\
    \"\x89\x01\n\x1bPayByRegisteredCardResponse\x12\x12\n\x04code\x18\x01\
    \x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07messa\
    ge\x12<\n\x08response\x18\x03\x20\x01(\x0b2\x20.card_v2.PayByRegisteredC\
    ardDataR\x08response\"\x9a\x01\n\rCancelHistory\x12\x15\n\x06pg_tid\x18\
    \x01\x20\x01(\tR\x05pgTid\x12\x16\n\x06amount\x18\x02\x20\x01(\tR\x06amo\
    unt\x12!\n\x0ccancelled_at\x18\x03\x20\x01(\x05R\x0bcancelledAt\x12\x16\
    \n\x06reason\x18\x04\x20\x01(\tR\x06reason\x12\x1f\n\x0breceipt_url\x18\
    \x05\x20\x01(\tR\nreceiptUrl\"\x97\x01\n\x18CancelCardPaymentRequest\x12\
    \x16\n\x06amount\x18\x01\x20\x01(\tR\x06amount\x12!\n\x0cmerchant_uid\
    \x18\x02\x20\x01(\tR\x0bmerchantUid\x12(\n\x10duty_free_amount\x18\x03\
    \x20\x01(\tR\x0edutyFreeAmount\x12\x16\n\x06reason\x18\x04\x20\x01(\tR\
    \x06reason\"\x88\x01\n\x1aCancelCardPaymenttResponse\x12\x12\n\x04code\
    \x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\
    \x07message\x12<\n\x08response\x18\x03\x20\x01(\x0b2\x20.card_v2.PayByRe\
    gisteredCardDataR\x08responseB:Z8github.com/iamport/interface/gen_src/go\
    /v2/payments/cardJ\xb92\n\x07\x12\x05\0\0\x97\x01\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x10\n\x08\n\x01\x08\x12\
    \x03\x03\0O\n\t\n\x02\x08\x0b\x12\x03\x03\0O\n\n\n\x02\x04\0\x12\x04\x05\
    \0\x10\x01\n\n\n\x03\x04\0\x01\x12\x03\x05\x08\x1b\n#\n\x04\x04\0\x02\0\
    \x12\x03\x06\x04\x18\"\x16\x20a.k.a.)\x20customer_uid\n\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\x06\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x06\
    \x0b\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x06\x16\x17\n\x0b\n\x04\x04\
    \0\x02\x01\x12\x03\x07\x04\x1b\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x07\
    \x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x07\x0b\x16\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03\x07\x19\x1a\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x08\
    \x04\x16\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x08\x04\n\n\x0c\n\x05\x04\
    \0\x02\x02\x01\x12\x03\x08\x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x08\x14\x15\n\x0b\n\x04\x04\0\x02\x03\x12\x03\t\x04\x15\n\x0c\n\x05\x04\
    \0\x02\x03\x05\x12\x03\t\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\t\
    \x0b\x10\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\t\x13\x14\n\x0b\n\x04\x04\
    \0\x02\x04\x12\x03\n\x04\x1a\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\n\x04\
    \n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\n\x0b\x15\n\x0c\n\x05\x04\0\x02\
    \x04\x03\x12\x03\n\x18\x19\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x0b\x04\x1d\
    \n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\0\x02\
    \x05\x01\x12\x03\x0b\x0b\x18\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x0b\
    \x1b\x1c\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x0c\x04\x1c\n\x0c\n\x05\x04\0\
    \x02\x06\x05\x12\x03\x0c\x04\n\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x0c\
    \x0b\x17\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x0c\x1a\x1b\n\x0b\n\x04\
    \x04\0\x02\x07\x12\x03\r\x04\x1e\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\r\
    \x04\n\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\r\x0b\x19\n\x0c\n\x05\x04\0\
    \x02\x07\x03\x12\x03\r\x1c\x1d\n\x0b\n\x04\x04\0\x02\x08\x12\x03\x0e\x04\
    \x1d\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03\x0e\x04\n\n\x0c\n\x05\x04\0\
    \x02\x08\x01\x12\x03\x0e\x0b\x18\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\
    \x0e\x1b\x1c\n\x0b\n\x04\x04\0\x02\t\x12\x03\x0f\x04\"\n\x0c\n\x05\x04\0\
    \x02\t\x05\x12\x03\x0f\x04\n\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03\x0f\x0b\
    \x1c\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03\x0f\x1f!\n\n\n\x02\x04\x01\x12\
    \x04\x12\0\x20\x01\n\n\n\x03\x04\x01\x01\x12\x03\x12\x08\x1e\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03\x13\x04\x18\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\
    \x13\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x13\x0b\x13\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\x13\x16\x17\n%\n\x04\x04\x01\x02\x01\x12\x03\
    \x14\x04\x19\"\x18\x20card\x20alias\x20of\x20the\x20user\n\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03\x14\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x14\x0b\x14\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x14\x17\x18\
    \n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x15\x04\x19\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x03\x15\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x15\
    \x0b\x14\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x15\x17\x18\n.\n\x04\
    \x04\x01\x02\x03\x12\x03\x16\x04\x1b\"!\x20Only\x20masked\x20company\x20\
    can\x20provide\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x16\x04\n\n\x0c\
    \n\x05\x04\x01\x02\x03\x01\x12\x03\x16\x0b\x16\n\x0c\n\x05\x04\x01\x02\
    \x03\x03\x12\x03\x16\x19\x1a\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x17\x04\
    \x1c\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x17\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x04\x01\x12\x03\x17\x0b\x17\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\
    \x03\x17\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x18\x04\x19\n\x0c\n\
    \x05\x04\x01\x02\x05\x05\x12\x03\x18\x04\n\n\x0c\n\x05\x04\x01\x02\x05\
    \x01\x12\x03\x18\x0b\x14\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x18\x17\
    \x18\n\x0b\n\x04\x04\x01\x02\x06\x12\x03\x19\x04\x1d\n\x0c\n\x05\x04\x01\
    \x02\x06\x05\x12\x03\x19\x04\n\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03\
    \x19\x0b\x18\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03\x19\x1b\x1c\n\x0b\n\
    \x04\x04\x01\x02\x07\x12\x03\x1a\x04\x1c\n\x0c\n\x05\x04\x01\x02\x07\x05\
    \x12\x03\x1a\x04\n\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\x03\x1a\x0b\x17\n\
    \x0c\n\x05\x04\x01\x02\x07\x03\x12\x03\x1a\x1a\x1b\n\x0b\n\x04\x04\x01\
    \x02\x08\x12\x03\x1b\x04\x1e\n\x0c\n\x05\x04\x01\x02\x08\x05\x12\x03\x1b\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\x03\x1b\x0b\x19\n\x0c\n\x05\
    \x04\x01\x02\x08\x03\x12\x03\x1b\x1c\x1d\n\x0b\n\x04\x04\x01\x02\t\x12\
    \x03\x1c\x04\x1e\n\x0c\n\x05\x04\x01\x02\t\x05\x12\x03\x1c\x04\n\n\x0c\n\
    \x05\x04\x01\x02\t\x01\x12\x03\x1c\x0b\x18\n\x0c\n\x05\x04\x01\x02\t\x03\
    \x12\x03\x1c\x1b\x1d\n\x0b\n\x04\x04\x01\x02\n\x12\x03\x1d\x04\"\n\x0c\n\
    \x05\x04\x01\x02\n\x05\x12\x03\x1d\x04\n\n\x0c\n\x05\x04\x01\x02\n\x01\
    \x12\x03\x1d\x0b\x1c\n\x0c\n\x05\x04\x01\x02\n\x03\x12\x03\x1d\x1f!\n\
    \x0b\n\x04\x04\x01\x02\x0b\x12\x03\x1e\x04\x18\n\x0c\n\x05\x04\x01\x02\
    \x0b\x05\x12\x03\x1e\x04\t\n\x0c\n\x05\x04\x01\x02\x0b\x01\x12\x03\x1e\n\
    \x12\n\x0c\n\x05\x04\x01\x02\x0b\x03\x12\x03\x1e\x15\x17\n\x0b\n\x04\x04\
    \x01\x02\x0c\x12\x03\x1f\x04\x17\n\x0c\n\x05\x04\x01\x02\x0c\x05\x12\x03\
    \x1f\x04\t\n\x0c\n\x05\x04\x01\x02\x0c\x01\x12\x03\x1f\n\x11\n\x0c\n\x05\
    \x04\x01\x02\x0c\x03\x12\x03\x1f\x14\x16\n\n\n\x02\x04\x02\x12\x04\"\0&\
    \x01\n\n\n\x03\x04\x02\x01\x12\x03\"\x08\x1c\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03#\x04\x13\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03#\x04\t\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03#\n\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03#\x11\x12\n\x0b\n\x04\x04\x02\x02\x01\x12\x03$\x04\x17\n\x0c\n\x05\
    \x04\x02\x02\x01\x05\x12\x03$\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x03$\x0b\x12\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03$\x15\x16\n\x0b\n\
    \x04\x04\x02\x02\x02\x12\x03%\x04(\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\
    \x03%\x04\x1a\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03%\x1b#\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03%&'\n\n\n\x02\x04\x03\x12\x04(\0*\x01\n\n\n\
    \x03\x04\x03\x01\x12\x03(\x08\x1a\n\x0b\n\x04\x04\x03\x02\0\x12\x03)\x04\
    \x18\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03)\x04\n\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x03)\x0b\x13\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03)\x16\
    \x17\n\n\n\x02\x04\x04\x12\x04,\09\x01\n\n\n\x03\x04\x04\x01\x12\x03,\
    \x08\x17\n\x0b\n\x04\x04\x04\x02\0\x12\x03-\x04\x18\n\x0c\n\x05\x04\x04\
    \x02\0\x05\x12\x03-\x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03-\x0b\x13\
    \n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03-\x16\x17\n\x0b\n\x04\x04\x04\x02\
    \x01\x12\x03.\x04\x1d\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03.\x04\n\n\
    \x0c\n\x05\x04\x04\x02\x01\x01\x12\x03.\x0b\x18\n\x0c\n\x05\x04\x04\x02\
    \x01\x03\x12\x03.\x1b\x1c\n\x0b\n\x04\x04\x04\x02\x02\x12\x03/\x04\x19\n\
    \x0c\n\x05\x04\x04\x02\x02\x05\x12\x03/\x04\n\n\x0c\n\x05\x04\x04\x02\
    \x02\x01\x12\x03/\x0b\x14\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03/\x17\
    \x18\n\x0b\n\x04\x04\x04\x02\x03\x12\x030\x04\x1a\n\x0c\n\x05\x04\x04\
    \x02\x03\x05\x12\x030\x04\n\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x030\x0b\
    \x15\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x030\x18\x19\n\x0b\n\x04\x04\
    \x04\x02\x04\x12\x031\x04\x19\n\x0c\n\x05\x04\x04\x02\x04\x05\x12\x031\
    \x04\n\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x031\x0b\x14\n\x0c\n\x05\x04\
    \x04\x02\x04\x03\x12\x031\x17\x18\n\x0b\n\x04\x04\x04\x02\x05\x12\x032\
    \x04\x1d\n\x0c\n\x05\x04\x04\x02\x05\x05\x12\x032\x04\n\n\x0c\n\x05\x04\
    \x04\x02\x05\x01\x12\x032\x0b\x18\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\
    \x032\x1b\x1c\n\x0b\n\x04\x04\x04\x02\x06\x12\x033\x04\x1c\n\x0c\n\x05\
    \x04\x04\x02\x06\x05\x12\x033\x04\n\n\x0c\n\x05\x04\x04\x02\x06\x01\x12\
    \x033\x0b\x17\n\x0c\n\x05\x04\x04\x02\x06\x03\x12\x033\x1a\x1b\n\x0b\n\
    \x04\x04\x04\x02\x07\x12\x034\x04\x1e\n\x0c\n\x05\x04\x04\x02\x07\x05\
    \x12\x034\x04\n\n\x0c\n\x05\x04\x04\x02\x07\x01\x12\x034\x0b\x19\n\x0c\n\
    \x05\x04\x04\x02\x07\x03\x12\x034\x1c\x1d\n\x0b\n\x04\x04\x04\x02\x08\
    \x12\x035\x04\x1d\n\x0c\n\x05\x04\x04\x02\x08\x05\x12\x035\x04\n\n\x0c\n\
    \x05\x04\x04\x02\x08\x01\x12\x035\x0b\x18\n\x0c\n\x05\x04\x04\x02\x08\
    \x03\x12\x035\x1b\x1c\n\x0b\n\x04\x04\x04\x02\t\x12\x036\x04\"\n\x0c\n\
    \x05\x04\x04\x02\t\x05\x12\x036\x04\n\n\x0c\n\x05\x04\x04\x02\t\x01\x12\
    \x036\x0b\x1c\n\x0c\n\x05\x04\x04\x02\t\x03\x12\x036\x1f!\n\x0b\n\x04\
    \x04\x04\x02\n\x12\x037\x04\x18\n\x0c\n\x05\x04\x04\x02\n\x05\x12\x037\
    \x04\t\n\x0c\n\x05\x04\x04\x02\n\x01\x12\x037\n\x12\n\x0c\n\x05\x04\x04\
    \x02\n\x03\x12\x037\x15\x17\n\x0b\n\x04\x04\x04\x02\x0b\x12\x038\x04\x17\
    \n\x0c\n\x05\x04\x04\x02\x0b\x05\x12\x038\x04\t\n\x0c\n\x05\x04\x04\x02\
    \x0b\x01\x12\x038\n\x11\n\x0c\n\x05\x04\x04\x02\x0b\x03\x12\x038\x14\x16\
    \n\n\n\x02\x04\x05\x12\x04;\0?\x01\n\n\n\x03\x04\x05\x01\x12\x03;\x08\
    \x1b\n\x0b\n\x04\x04\x05\x02\0\x12\x03<\x04\x13\n\x0c\n\x05\x04\x05\x02\
    \0\x05\x12\x03<\x04\t\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03<\n\x0e\n\x0c\
    \n\x05\x04\x05\x02\0\x03\x12\x03<\x11\x12\n\x0b\n\x04\x04\x05\x02\x01\
    \x12\x03=\x04\x17\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03=\x04\n\n\x0c\n\
    \x05\x04\x05\x02\x01\x01\x12\x03=\x0b\x12\n\x0c\n\x05\x04\x05\x02\x01\
    \x03\x12\x03=\x15\x16\n\x0b\n\x04\x04\x05\x02\x02\x12\x03>\x04!\n\x0c\n\
    \x05\x04\x05\x02\x02\x06\x12\x03>\x04\x13\n\x0c\n\x05\x04\x05\x02\x02\
    \x01\x12\x03>\x14\x1c\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03>\x1f\x20\n\
    \n\n\x02\x04\x06\x12\x04A\0C\x01\n\n\n\x03\x04\x06\x01\x12\x03A\x08\x1d\
    \n\x0b\n\x04\x04\x06\x02\0\x12\x03B\x04\x18\n\x0c\n\x05\x04\x06\x02\0\
    \x05\x12\x03B\x04\n\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03B\x0b\x13\n\x0c\
    \n\x05\x04\x06\x02\0\x03\x12\x03B\x16\x17\n\n\n\x02\x04\x07\x12\x04E\0H\
    \x01\n\n\n\x03\x04\x07\x01\x12\x03E\x08\x1e\n\x0b\n\x04\x04\x07\x02\0\
    \x12\x03F\x04\x13\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03F\x04\t\n\x0c\n\
    \x05\x04\x07\x02\0\x01\x12\x03F\n\x0e\n\x0c\n\x05\x04\x07\x02\0\x03\x12\
    \x03F\x11\x12\n\x0b\n\x04\x04\x07\x02\x01\x12\x03G\x04\x17\n\x0c\n\x05\
    \x04\x07\x02\x01\x05\x12\x03G\x04\n\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\
    \x03G\x0b\x12\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03G\x15\x16\n\n\n\x02\
    \x04\x08\x12\x04J\0T\x01\n\n\n\x03\x04\x08\x01\x12\x03J\x08\"\n\x0b\n\
    \x04\x04\x08\x02\0\x12\x03K\x04\x18\n\x0c\n\x05\x04\x08\x02\0\x05\x12\
    \x03K\x04\n\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03K\x0b\x13\n\x0c\n\x05\
    \x04\x08\x02\0\x03\x12\x03K\x16\x17\n\x0b\n\x04\x04\x08\x02\x01\x12\x03L\
    \x04\x1c\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03L\x04\n\n\x0c\n\x05\x04\
    \x08\x02\x01\x01\x12\x03L\x0b\x17\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\
    \x03L\x1a\x1b\n\x0b\n\x04\x04\x08\x02\x02\x12\x03M\x04\x16\n\x0c\n\x05\
    \x04\x08\x02\x02\x05\x12\x03M\x04\n\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\
    \x03M\x0b\x11\n\x0c\n\x05\x04\x08\x02\x02\x03\x12\x03M\x14\x15\n\x0b\n\
    \x04\x04\x08\x02\x03\x12\x03N\x04\x20\n\x0c\n\x05\x04\x08\x02\x03\x05\
    \x12\x03N\x04\n\n\x0c\n\x05\x04\x08\x02\x03\x01\x12\x03N\x0b\x1b\n\x0c\n\
    \x05\x04\x08\x02\x03\x03\x12\x03N\x1e\x1f\n\x1b\n\x04\x04\x08\x02\x04\
    \x12\x03O\x04\x1a\"\x0e\x20a.k.a.)\x20name\n\n\x0c\n\x05\x04\x08\x02\x04\
    \x05\x12\x03O\x04\n\n\x0c\n\x05\x04\x08\x02\x04\x01\x12\x03O\x0b\x15\n\
    \x0c\n\x05\x04\x08\x02\x04\x03\x12\x03O\x18\x19\n!\n\x04\x04\x08\x02\x05\
    \x12\x03P\x04\x1f\"\x14\x20a.k.a.)\x20card_quota\n\n\x0c\n\x05\x04\x08\
    \x02\x05\x05\x12\x03P\x04\t\n\x0c\n\x05\x04\x08\x02\x05\x01\x12\x03P\n\
    \x1a\n\x0c\n\x05\x04\x08\x02\x05\x03\x12\x03P\x1d\x1e\n\x0b\n\x04\x04\
    \x08\x02\x06\x12\x03Q\x04'\n\x0c\n\x05\x04\x08\x02\x06\x05\x12\x03Q\x04\
    \x08\n\x0c\n\x05\x04\x08\x02\x06\x01\x12\x03Q\t\"\n\x0c\n\x05\x04\x08\
    \x02\x06\x03\x12\x03Q%&\n\x0b\n\x04\x04\x08\x02\x07\x12\x03R\x04\x1b\n\
    \x0c\n\x05\x04\x08\x02\x07\x05\x12\x03R\x04\n\n\x0c\n\x05\x04\x08\x02\
    \x07\x01\x12\x03R\x0b\x16\n\x0c\n\x05\x04\x08\x02\x07\x03\x12\x03R\x19\
    \x1a\n\x0b\n\x04\x04\x08\x02\x08\x12\x03S\x04\x1c\n\x0c\n\x05\x04\x08\
    \x02\x08\x05\x12\x03S\x04\n\n\x0c\n\x05\x04\x08\x02\x08\x01\x12\x03S\x0b\
    \x17\n\x0c\n\x05\x04\x08\x02\x08\x03\x12\x03S\x1a\x1b\n\n\n\x02\x04\t\
    \x12\x04V\0|\x01\n\n\n\x03\x04\t\x01\x12\x03V\x08\x1f\n\x0b\n\x04\x04\t\
    \x02\0\x12\x03W\x04\x16\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03W\x04\n\n\x0c\
    \n\x05\x04\t\x02\0\x01\x12\x03W\x0b\x11\n\x0c\n\x05\x04\t\x02\0\x03\x12\
    \x03W\x14\x15\n\x0b\n\x04\x04\t\x02\x01\x12\x03X\x04\x19\n\x0c\n\x05\x04\
    \t\x02\x01\x05\x12\x03X\x04\n\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03X\x0b\
    \x14\n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03X\x17\x18\n\x0b\n\x04\x04\t\
    \x02\x02\x12\x03Y\x04\x1a\n\x0c\n\x05\x04\t\x02\x02\x05\x12\x03Y\x04\n\n\
    \x0c\n\x05\x04\t\x02\x02\x01\x12\x03Y\x0b\x15\n\x0c\n\x05\x04\t\x02\x02\
    \x03\x12\x03Y\x18\x19\n\x0b\n\x04\x04\t\x02\x03\x12\x03Z\x04\x1b\n\x0c\n\
    \x05\x04\t\x02\x03\x05\x12\x03Z\x04\n\n\x0c\n\x05\x04\t\x02\x03\x01\x12\
    \x03Z\x0b\x16\n\x0c\n\x05\x04\t\x02\x03\x03\x12\x03Z\x19\x1a\n\x0b\n\x04\
    \x04\t\x02\x04\x12\x03[\x04\x1a\n\x0c\n\x05\x04\t\x02\x04\x05\x12\x03[\
    \x04\n\n\x0c\n\x05\x04\t\x02\x04\x01\x12\x03[\x0b\x15\n\x0c\n\x05\x04\t\
    \x02\x04\x03\x12\x03[\x18\x19\n\x0b\n\x04\x04\t\x02\x05\x12\x03\\\x04\
    \x1e\n\x0c\n\x05\x04\t\x02\x05\x05\x12\x03\\\x04\n\n\x0c\n\x05\x04\t\x02\
    \x05\x01\x12\x03\\\x0b\x19\n\x0c\n\x05\x04\t\x02\x05\x03\x12\x03\\\x1c\
    \x1d\n\x0b\n\x04\x04\t\x02\x06\x12\x03]\x04\x19\n\x0c\n\x05\x04\t\x02\
    \x06\x05\x12\x03]\x04\n\n\x0c\n\x05\x04\t\x02\x06\x01\x12\x03]\x0b\x14\n\
    \x0c\n\x05\x04\t\x02\x06\x03\x12\x03]\x17\x18\n\x0b\n\x04\x04\t\x02\x07\
    \x12\x03^\x04\x1d\n\x0c\n\x05\x04\t\x02\x07\x05\x12\x03^\x04\n\n\x0c\n\
    \x05\x04\t\x02\x07\x01\x12\x03^\x0b\x18\n\x0c\n\x05\x04\t\x02\x07\x03\
    \x12\x03^\x1b\x1c\n\x0b\n\x04\x04\t\x02\x08\x12\x03_\x04.\n\x0c\n\x05\
    \x04\t\x02\x08\x04\x12\x03_\x04\x0c\n\x0c\n\x05\x04\t\x02\x08\x06\x12\
    \x03_\r\x1a\n\x0c\n\x05\x04\t\x02\x08\x01\x12\x03_\x1b)\n\x0c\n\x05\x04\
    \t\x02\x08\x03\x12\x03_,-\n\x0b\n\x04\x04\t\x02\t\x12\x03`\x04\x1e\n\x0c\
    \n\x05\x04\t\x02\t\x05\x12\x03`\x04\n\n\x0c\n\x05\x04\t\x02\t\x01\x12\
    \x03`\x0b\x18\n\x0c\n\x05\x04\t\x02\t\x03\x12\x03`\x1b\x1d\n\x0b\n\x04\
    \x04\t\x02\n\x12\x03a\x04-\n\x0c\n\x05\x04\t\x02\n\x04\x12\x03a\x04\x0c\
    \n\x0c\n\x05\x04\t\x02\n\x05\x12\x03a\r\x13\n\x0c\n\x05\x04\t\x02\n\x01\
    \x12\x03a\x14'\n\x0c\n\x05\x04\t\x02\n\x03\x12\x03a*,\n\x0b\n\x04\x04\t\
    \x02\x0b\x12\x03b\x04\x1c\n\x0c\n\x05\x04\t\x02\x0b\x05\x12\x03b\x04\t\n\
    \x0c\n\x05\x04\t\x02\x0b\x01\x12\x03b\n\x16\n\x0c\n\x05\x04\t\x02\x0b\
    \x03\x12\x03b\x19\x1b\n\x0b\n\x04\x04\t\x02\x0c\x12\x03c\x04\x1a\n\x0c\n\
    \x05\x04\t\x02\x0c\x05\x12\x03c\x04\n\n\x0c\n\x05\x04\t\x02\x0c\x01\x12\
    \x03c\x0b\x14\n\x0c\n\x05\x04\t\x02\x0c\x03\x12\x03c\x17\x19\n\x0b\n\x04\
    \x04\t\x02\r\x12\x03d\x04\x1a\n\x0c\n\x05\x04\t\x02\r\x05\x12\x03d\x04\n\
    \n\x0c\n\x05\x04\t\x02\r\x01\x12\x03d\x0b\x14\n\x0c\n\x05\x04\t\x02\r\
    \x03\x12\x03d\x17\x19\n\x0b\n\x04\x04\t\x02\x0e\x12\x03e\x04\x1b\n\x0c\n\
    \x05\x04\t\x02\x0e\x05\x12\x03e\x04\n\n\x0c\n\x05\x04\t\x02\x0e\x01\x12\
    \x03e\x0b\x15\n\x0c\n\x05\x04\t\x02\x0e\x03\x12\x03e\x18\x1a\n\x0b\n\x04\
    \x04\t\x02\x0f\x12\x03f\x04\x20\n\x0c\n\x05\x04\t\x02\x0f\x05\x12\x03f\
    \x04\t\n\x0c\n\x05\x04\t\x02\x0f\x01\x12\x03f\n\x1a\n\x0c\n\x05\x04\t\
    \x02\x0f\x03\x12\x03f\x1d\x1f\n\x0b\n\x04\x04\t\x02\x10\x12\x03g\x04\x19\
    \n\x0c\n\x05\x04\t\x02\x10\x05\x12\x03g\x04\t\n\x0c\n\x05\x04\t\x02\x10\
    \x01\x12\x03g\n\x13\n\x0c\n\x05\x04\t\x02\x10\x03\x12\x03g\x16\x18\n\x0b\
    \n\x04\x04\t\x02\x11\x12\x03h\x04\"\n\x0c\n\x05\x04\t\x02\x11\x05\x12\
    \x03h\x04\x08\n\x0c\n\x05\x04\t\x02\x11\x01\x12\x03h\t\x1c\n\x0c\n\x05\
    \x04\t\x02\x11\x03\x12\x03h\x1f!\n\x0b\n\x04\x04\t\x02\x12\x12\x03i\x04\
    \x18\n\x0c\n\x05\x04\t\x02\x12\x05\x12\x03i\x04\n\n\x0c\n\x05\x04\t\x02\
    \x12\x01\x12\x03i\x0b\x12\n\x0c\n\x05\x04\t\x02\x12\x03\x12\x03i\x15\x17\
    \n\x0b\n\x04\x04\t\x02\x13\x12\x03j\x04\x19\n\x0c\n\x05\x04\t\x02\x13\
    \x05\x12\x03j\x04\n\n\x0c\n\x05\x04\t\x02\x13\x01\x12\x03j\x0b\x13\n\x0c\
    \n\x05\x04\t\x02\x13\x03\x12\x03j\x16\x18\n\x0b\n\x04\x04\t\x02\x14\x12\
    \x03k\x04\x1c\n\x0c\n\x05\x04\t\x02\x14\x05\x12\x03k\x04\n\n\x0c\n\x05\
    \x04\t\x02\x14\x01\x12\x03k\x0b\x16\n\x0c\n\x05\x04\t\x02\x14\x03\x12\
    \x03k\x19\x1b\n#\n\x04\x04\t\x02\x15\x12\x03l\x04\x19\"\x16\x20a.k.a.)\
    \x20customer_uid\n\n\x0c\n\x05\x04\t\x02\x15\x05\x12\x03l\x04\n\n\x0c\n\
    \x05\x04\t\x02\x15\x01\x12\x03l\x0b\x13\n\x0c\n\x05\x04\t\x02\x15\x03\
    \x12\x03l\x16\x18\n\x0b\n\x04\x04\t\x02\x16\x12\x03m\x04#\n\x0c\n\x05\
    \x04\t\x02\x16\x05\x12\x03m\x04\n\n\x0c\n\x05\x04\t\x02\x16\x01\x12\x03m\
    \x0b\x1d\n\x0c\n\x05\x04\t\x02\x16\x03\x12\x03m\x20\"\n\x0b\n\x04\x04\t\
    \x02\x17\x12\x03n\x04\x1c\n\x0c\n\x05\x04\t\x02\x17\x05\x12\x03n\x04\n\n\
    \x0c\n\x05\x04\t\x02\x17\x01\x12\x03n\x0b\x16\n\x0c\n\x05\x04\t\x02\x17\
    \x03\x12\x03n\x19\x1b\n\x0b\n\x04\x04\t\x02\x18\x12\x03o\x04\x19\n\x0c\n\
    \x05\x04\t\x02\x18\x05\x12\x03o\x04\t\n\x0c\n\x05\x04\t\x02\x18\x01\x12\
    \x03o\n\x13\n\x0c\n\x05\x04\t\x02\x18\x03\x12\x03o\x16\x18\n\x0b\n\x04\
    \x04\t\x02\x19\x12\x03p\x04\x18\n\x0c\n\x05\x04\t\x02\x19\x05\x12\x03p\
    \x04\n\n\x0c\n\x05\x04\t\x02\x19\x01\x12\x03p\x0b\x12\n\x0c\n\x05\x04\t\
    \x02\x19\x03\x12\x03p\x15\x17\n\x0b\n\x04\x04\t\x02\x1a\x12\x03q\x04\x1d\
    \n\x0c\n\x05\x04\t\x02\x1a\x05\x12\x03q\x04\n\n\x0c\n\x05\x04\t\x02\x1a\
    \x01\x12\x03q\x0b\x17\n\x0c\n\x05\x04\t\x02\x1a\x03\x12\x03q\x1a\x1c\n\
    \x0b\n\x04\x04\t\x02\x1b\x12\x03r\x04\x1b\n\x0c\n\x05\x04\t\x02\x1b\x05\
    \x12\x03r\x04\n\n\x0c\n\x05\x04\t\x02\x1b\x01\x12\x03r\x0b\x15\n\x0c\n\
    \x05\x04\t\x02\x1b\x03\x12\x03r\x18\x1a\n\x0b\n\x04\x04\t\x02\x1c\x12\
    \x03s\x04\x17\n\x0c\n\x05\x04\t\x02\x1c\x05\x12\x03s\x04\t\n\x0c\n\x05\
    \x04\t\x02\x1c\x01\x12\x03s\n\x11\n\x0c\n\x05\x04\t\x02\x1c\x03\x12\x03s\
    \x14\x16\n\x0b\n\x04\x04\t\x02\x1d\x12\x03t\x04\x1b\n\x0c\n\x05\x04\t\
    \x02\x1d\x05\x12\x03t\x04\n\n\x0c\n\x05\x04\t\x02\x1d\x01\x12\x03t\x0b\
    \x15\n\x0c\n\x05\x04\t\x02\x1d\x03\x12\x03t\x18\x1a\n\x0b\n\x04\x04\t\
    \x02\x1e\x12\x03u\x04\x16\n\x0c\n\x05\x04\t\x02\x1e\x05\x12\x03u\x04\n\n\
    \x0c\n\x05\x04\t\x02\x1e\x01\x12\x03u\x0b\x10\n\x0c\n\x05\x04\t\x02\x1e\
    \x03\x12\x03u\x13\x15\n\x0b\n\x04\x04\t\x02\x1f\x12\x03v\x04\x1c\n\x0c\n\
    \x05\x04\t\x02\x1f\x05\x12\x03v\x04\n\n\x0c\n\x05\x04\t\x02\x1f\x01\x12\
    \x03v\x0b\x16\n\x0c\n\x05\x04\t\x02\x1f\x03\x12\x03v\x19\x1b\n\x0b\n\x04\
    \x04\t\x02\x20\x12\x03w\x04\x17\n\x0c\n\x05\x04\t\x02\x20\x05\x12\x03w\
    \x04\n\n\x0c\n\x05\x04\t\x02\x20\x01\x12\x03w\x0b\x11\n\x0c\n\x05\x04\t\
    \x02\x20\x03\x12\x03w\x14\x16\n\x0b\n\x04\x04\t\x02!\x12\x03x\x04\x1c\n\
    \x0c\n\x05\x04\t\x02!\x05\x12\x03x\x04\n\n\x0c\n\x05\x04\t\x02!\x01\x12\
    \x03x\x0b\x16\n\x0c\n\x05\x04\t\x02!\x03\x12\x03x\x19\x1b\n\x0b\n\x04\
    \x04\t\x02\"\x12\x03y\x04\x1a\n\x0c\n\x05\x04\t\x02\"\x05\x12\x03y\x04\t\
    \n\x0c\n\x05\x04\t\x02\"\x01\x12\x03y\n\x14\n\x0c\n\x05\x04\t\x02\"\x03\
    \x12\x03y\x17\x19\n\x0b\n\x04\x04\t\x02#\x12\x03z\x04\x17\n\x0c\n\x05\
    \x04\t\x02#\x05\x12\x03z\x04\n\n\x0c\n\x05\x04\t\x02#\x01\x12\x03z\x0b\
    \x11\n\x0c\n\x05\x04\t\x02#\x03\x12\x03z\x14\x16\n\x0b\n\x04\x04\t\x02$\
    \x12\x03{\x04\x1b\n\x0c\n\x05\x04\t\x02$\x05\x12\x03{\x04\n\n\x0c\n\x05\
    \x04\t\x02$\x01\x12\x03{\x0b\x15\n\x0c\n\x05\x04\t\x02$\x03\x12\x03{\x18\
    \x1a\n\x0b\n\x02\x04\n\x12\x05~\0\x82\x01\x01\n\n\n\x03\x04\n\x01\x12\
    \x03~\x08#\n\x0b\n\x04\x04\n\x02\0\x12\x03\x7f\x04\x13\n\x0c\n\x05\x04\n\
    \x02\0\x05\x12\x03\x7f\x04\t\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03\x7f\n\
    \x0e\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03\x7f\x11\x12\n\x0c\n\x04\x04\n\
    \x02\x01\x12\x04\x80\x01\x04\x17\n\r\n\x05\x04\n\x02\x01\x05\x12\x04\x80\
    \x01\x04\n\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\x80\x01\x0b\x12\n\r\n\x05\
    \x04\n\x02\x01\x03\x12\x04\x80\x01\x15\x16\n\x0c\n\x04\x04\n\x02\x02\x12\
    \x04\x81\x01\x04)\n\r\n\x05\x04\n\x02\x02\x06\x12\x04\x81\x01\x04\x1b\n\
    \r\n\x05\x04\n\x02\x02\x01\x12\x04\x81\x01\x1c$\n\r\n\x05\x04\n\x02\x02\
    \x03\x12\x04\x81\x01'(\n\x0c\n\x02\x04\x0b\x12\x06\x84\x01\0\x8a\x01\x01\
    \n\x0b\n\x03\x04\x0b\x01\x12\x04\x84\x01\x08\x15\n\x0c\n\x04\x04\x0b\x02\
    \0\x12\x04\x85\x01\x04\x16\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\x85\x01\
    \x04\n\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\x85\x01\x0b\x11\n\r\n\x05\x04\
    \x0b\x02\0\x03\x12\x04\x85\x01\x14\x15\n\x0c\n\x04\x04\x0b\x02\x01\x12\
    \x04\x86\x01\x04\x16\n\r\n\x05\x04\x0b\x02\x01\x05\x12\x04\x86\x01\x04\n\
    \n\r\n\x05\x04\x0b\x02\x01\x01\x12\x04\x86\x01\x0b\x11\n\r\n\x05\x04\x0b\
    \x02\x01\x03\x12\x04\x86\x01\x14\x15\n\x0c\n\x04\x04\x0b\x02\x02\x12\x04\
    \x87\x01\x04\x1b\n\r\n\x05\x04\x0b\x02\x02\x05\x12\x04\x87\x01\x04\t\n\r\
    \n\x05\x04\x0b\x02\x02\x01\x12\x04\x87\x01\n\x16\n\r\n\x05\x04\x0b\x02\
    \x02\x03\x12\x04\x87\x01\x19\x1a\n\x0c\n\x04\x04\x0b\x02\x03\x12\x04\x88\
    \x01\x04\x16\n\r\n\x05\x04\x0b\x02\x03\x05\x12\x04\x88\x01\x04\n\n\r\n\
    \x05\x04\x0b\x02\x03\x01\x12\x04\x88\x01\x0b\x11\n\r\n\x05\x04\x0b\x02\
    \x03\x03\x12\x04\x88\x01\x14\x15\n\x0c\n\x04\x04\x0b\x02\x04\x12\x04\x89\
    \x01\x04\x1b\n\r\n\x05\x04\x0b\x02\x04\x05\x12\x04\x89\x01\x04\n\n\r\n\
    \x05\x04\x0b\x02\x04\x01\x12\x04\x89\x01\x0b\x16\n\r\n\x05\x04\x0b\x02\
    \x04\x03\x12\x04\x89\x01\x19\x1a\n\x0c\n\x02\x04\x0c\x12\x06\x8c\x01\0\
    \x91\x01\x01\n\x0b\n\x03\x04\x0c\x01\x12\x04\x8c\x01\x08\x20\n\x0c\n\x04\
    \x04\x0c\x02\0\x12\x04\x8d\x01\x04\x16\n\r\n\x05\x04\x0c\x02\0\x05\x12\
    \x04\x8d\x01\x04\n\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\x8d\x01\x0b\x11\n\
    \r\n\x05\x04\x0c\x02\0\x03\x12\x04\x8d\x01\x14\x15\n\x0c\n\x04\x04\x0c\
    \x02\x01\x12\x04\x8e\x01\x04\x1c\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\
    \x8e\x01\x04\n\n\r\n\x05\x04\x0c\x02\x01\x01\x12\x04\x8e\x01\x0b\x17\n\r\
    \n\x05\x04\x0c\x02\x01\x03\x12\x04\x8e\x01\x1a\x1b\n\x0c\n\x04\x04\x0c\
    \x02\x02\x12\x04\x8f\x01\x04\x20\n\r\n\x05\x04\x0c\x02\x02\x05\x12\x04\
    \x8f\x01\x04\n\n\r\n\x05\x04\x0c\x02\x02\x01\x12\x04\x8f\x01\x0b\x1b\n\r\
    \n\x05\x04\x0c\x02\x02\x03\x12\x04\x8f\x01\x1e\x1f\n\x0c\n\x04\x04\x0c\
    \x02\x03\x12\x04\x90\x01\x04\x16\n\r\n\x05\x04\x0c\x02\x03\x05\x12\x04\
    \x90\x01\x04\n\n\r\n\x05\x04\x0c\x02\x03\x01\x12\x04\x90\x01\x0b\x11\n\r\
    \n\x05\x04\x0c\x02\x03\x03\x12\x04\x90\x01\x14\x15\n\x0c\n\x02\x04\r\x12\
    \x06\x93\x01\0\x97\x01\x01\n\x0b\n\x03\x04\r\x01\x12\x04\x93\x01\x08\"\n\
    \x0c\n\x04\x04\r\x02\0\x12\x04\x94\x01\x04\x13\n\r\n\x05\x04\r\x02\0\x05\
    \x12\x04\x94\x01\x04\t\n\r\n\x05\x04\r\x02\0\x01\x12\x04\x94\x01\n\x0e\n\
    \r\n\x05\x04\r\x02\0\x03\x12\x04\x94\x01\x11\x12\n\x0c\n\x04\x04\r\x02\
    \x01\x12\x04\x95\x01\x04\x17\n\r\n\x05\x04\r\x02\x01\x05\x12\x04\x95\x01\
    \x04\n\n\r\n\x05\x04\r\x02\x01\x01\x12\x04\x95\x01\x0b\x12\n\r\n\x05\x04\
    \r\x02\x01\x03\x12\x04\x95\x01\x15\x16\n\x0c\n\x04\x04\r\x02\x02\x12\x04\
    \x96\x01\x04)\n\r\n\x05\x04\r\x02\x02\x06\x12\x04\x96\x01\x04\x1b\n\r\n\
    \x05\x04\r\x02\x02\x01\x12\x04\x96\x01\x1c$\n\r\n\x05\x04\r\x02\x02\x03\
    \x12\x04\x96\x01'(b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
