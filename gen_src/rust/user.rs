// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `custompay/v1/user/user.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct User {
    // message fields
    pub id: i32,
    pub name: ::std::string::String,
    pub email: ::std::string::String,
    pub tel: ::std::string::String,
    pub address: ::std::string::String,
    pub postcode: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a User {
    fn default() -> &'a User {
        <User as ::protobuf::Message>::default_instance()
    }
}

impl User {
    pub fn new() -> User {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &User| { &m.id },
            |m: &mut User| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &User| { &m.name },
            |m: &mut User| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "email",
            |m: &User| { &m.email },
            |m: &mut User| { &mut m.email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tel",
            |m: &User| { &m.tel },
            |m: &mut User| { &mut m.tel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &User| { &m.address },
            |m: &mut User| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "postcode",
            |m: &User| { &m.postcode },
            |m: &mut User| { &mut m.postcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<User>(
            "User",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for User {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.email = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.tel = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.address = is.read_string()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.postcode = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.email);
        }
        if !self.tel.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.tel);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.address);
        }
        if !self.postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.postcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.email.is_empty() {
            os.write_string(3, &self.email)?;
        }
        if !self.tel.is_empty() {
            os.write_string(4, &self.tel)?;
        }
        if !self.address.is_empty() {
            os.write_string(5, &self.address)?;
        }
        if !self.postcode.is_empty() {
            os.write_string(6, &self.postcode)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> User {
        User::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static User {
        static instance: User = User {
            id: 0,
            name: ::std::string::String::new(),
            email: ::std::string::String::new(),
            tel: ::std::string::String::new(),
            address: ::std::string::String::new(),
            postcode: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for User {
    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.email.clear();
        self.tel.clear();
        self.address.clear();
        self.postcode.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for User {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for User {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct UserRegisterRequest {
    // message fields
    pub name: ::std::string::String,
    pub email: ::std::string::String,
    pub tel: ::std::string::String,
    pub address: ::std::string::String,
    pub postcode: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a UserRegisterRequest {
    fn default() -> &'a UserRegisterRequest {
        <UserRegisterRequest as ::protobuf::Message>::default_instance()
    }
}

impl UserRegisterRequest {
    pub fn new() -> UserRegisterRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &UserRegisterRequest| { &m.name },
            |m: &mut UserRegisterRequest| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "email",
            |m: &UserRegisterRequest| { &m.email },
            |m: &mut UserRegisterRequest| { &mut m.email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tel",
            |m: &UserRegisterRequest| { &m.tel },
            |m: &mut UserRegisterRequest| { &mut m.tel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &UserRegisterRequest| { &m.address },
            |m: &mut UserRegisterRequest| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "postcode",
            |m: &UserRegisterRequest| { &m.postcode },
            |m: &mut UserRegisterRequest| { &mut m.postcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UserRegisterRequest>(
            "UserRegisterRequest",
            1,
            fields,
        )
    }
}

impl ::protobuf::Message for UserRegisterRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.email = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.tel = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.address = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.postcode = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.email);
        }
        if !self.tel.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.tel);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.address);
        }
        if !self.postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.postcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.email.is_empty() {
            os.write_string(2, &self.email)?;
        }
        if !self.tel.is_empty() {
            os.write_string(3, &self.tel)?;
        }
        if !self.address.is_empty() {
            os.write_string(4, &self.address)?;
        }
        if !self.postcode.is_empty() {
            os.write_string(5, &self.postcode)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> UserRegisterRequest {
        UserRegisterRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 1)
    }

    fn default_instance() -> &'static UserRegisterRequest {
        static instance: UserRegisterRequest = UserRegisterRequest {
            name: ::std::string::String::new(),
            email: ::std::string::String::new(),
            tel: ::std::string::String::new(),
            address: ::std::string::String::new(),
            postcode: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for UserRegisterRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.email.clear();
        self.tel.clear();
        self.address.clear();
        self.postcode.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserRegisterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserRegisterRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct UserRegisterResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<User>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a UserRegisterResponse {
    fn default() -> &'a UserRegisterResponse {
        <UserRegisterResponse as ::protobuf::Message>::default_instance()
    }
}

impl UserRegisterResponse {
    pub fn new() -> UserRegisterResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &UserRegisterResponse| { &m.code },
            |m: &mut UserRegisterResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &UserRegisterResponse| { &m.message },
            |m: &mut UserRegisterResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, User>(
            "response",
            |m: &UserRegisterResponse| { &m.response },
            |m: &mut UserRegisterResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UserRegisterResponse>(
            "UserRegisterResponse",
            2,
            fields,
        )
    }
}

impl ::protobuf::Message for UserRegisterResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> UserRegisterResponse {
        UserRegisterResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 2)
    }

    fn default_instance() -> &'static UserRegisterResponse {
        static instance: UserRegisterResponse = UserRegisterResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for UserRegisterResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserRegisterResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserRegisterResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct UserEditRequest {
    // message fields
    pub id: i32,
    pub name: ::std::string::String,
    pub email: ::std::string::String,
    pub tel: ::std::string::String,
    pub address: ::std::string::String,
    pub postcode: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a UserEditRequest {
    fn default() -> &'a UserEditRequest {
        <UserEditRequest as ::protobuf::Message>::default_instance()
    }
}

impl UserEditRequest {
    pub fn new() -> UserEditRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &UserEditRequest| { &m.id },
            |m: &mut UserEditRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &UserEditRequest| { &m.name },
            |m: &mut UserEditRequest| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "email",
            |m: &UserEditRequest| { &m.email },
            |m: &mut UserEditRequest| { &mut m.email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tel",
            |m: &UserEditRequest| { &m.tel },
            |m: &mut UserEditRequest| { &mut m.tel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &UserEditRequest| { &m.address },
            |m: &mut UserEditRequest| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "postcode",
            |m: &UserEditRequest| { &m.postcode },
            |m: &mut UserEditRequest| { &mut m.postcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UserEditRequest>(
            "UserEditRequest",
            3,
            fields,
        )
    }
}

impl ::protobuf::Message for UserEditRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.email = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.tel = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.address = is.read_string()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.postcode = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.email);
        }
        if !self.tel.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.tel);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.address);
        }
        if !self.postcode.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.postcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.email.is_empty() {
            os.write_string(3, &self.email)?;
        }
        if !self.tel.is_empty() {
            os.write_string(4, &self.tel)?;
        }
        if !self.address.is_empty() {
            os.write_string(5, &self.address)?;
        }
        if !self.postcode.is_empty() {
            os.write_string(6, &self.postcode)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> UserEditRequest {
        UserEditRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 3)
    }

    fn default_instance() -> &'static UserEditRequest {
        static instance: UserEditRequest = UserEditRequest {
            id: 0,
            name: ::std::string::String::new(),
            email: ::std::string::String::new(),
            tel: ::std::string::String::new(),
            address: ::std::string::String::new(),
            postcode: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for UserEditRequest {
    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.email.clear();
        self.tel.clear();
        self.address.clear();
        self.postcode.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserEditRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserEditRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct UserEditResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<User>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a UserEditResponse {
    fn default() -> &'a UserEditResponse {
        <UserEditResponse as ::protobuf::Message>::default_instance()
    }
}

impl UserEditResponse {
    pub fn new() -> UserEditResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &UserEditResponse| { &m.code },
            |m: &mut UserEditResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &UserEditResponse| { &m.message },
            |m: &mut UserEditResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, User>(
            "response",
            |m: &UserEditResponse| { &m.response },
            |m: &mut UserEditResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UserEditResponse>(
            "UserEditResponse",
            4,
            fields,
        )
    }
}

impl ::protobuf::Message for UserEditResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> UserEditResponse {
        UserEditResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 4)
    }

    fn default_instance() -> &'static UserEditResponse {
        static instance: UserEditResponse = UserEditResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for UserEditResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserEditResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserEditResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct UserRequest {
    // message fields
    pub id: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a UserRequest {
    fn default() -> &'a UserRequest {
        <UserRequest as ::protobuf::Message>::default_instance()
    }
}

impl UserRequest {
    pub fn new() -> UserRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &UserRequest| { &m.id },
            |m: &mut UserRequest| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UserRequest>(
            "UserRequest",
            5,
            fields,
        )
    }
}

impl ::protobuf::Message for UserRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = is.read_int32()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> UserRequest {
        UserRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 5)
    }

    fn default_instance() -> &'static UserRequest {
        static instance: UserRequest = UserRequest {
            id: 0,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for UserRequest {
    fn clear(&mut self) {
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct UserResponse {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    pub response: ::protobuf::MessageField<User>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a UserResponse {
    fn default() -> &'a UserResponse {
        <UserResponse as ::protobuf::Message>::default_instance()
    }
}

impl UserResponse {
    pub fn new() -> UserResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &UserResponse| { &m.code },
            |m: &mut UserResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &UserResponse| { &m.message },
            |m: &mut UserResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, User>(
            "response",
            |m: &UserResponse| { &m.response },
            |m: &mut UserResponse| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UserResponse>(
            "UserResponse",
            6,
            fields,
        )
    }
}

impl ::protobuf::Message for UserResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.code = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> UserResponse {
        UserResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 6)
    }

    fn default_instance() -> &'static UserResponse {
        static instance: UserResponse = UserResponse {
            code: 0,
            message: ::std::string::String::new(),
            response: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for UserResponse {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ccustompay/v1/user/user.proto\x12\x0euser_custompay\x1a\x1cgoogle/a\
    pi/annotations.proto\"\x88\x01\n\x04User\x12\x0e\n\x02id\x18\x01\x20\x01\
    (\x05R\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x14\n\x05\
    email\x18\x03\x20\x01(\tR\x05email\x12\x10\n\x03tel\x18\x04\x20\x01(\tR\
    \x03tel\x12\x18\n\x07address\x18\x05\x20\x01(\tR\x07address\x12\x1a\n\
    \x08postcode\x18\x06\x20\x01(\tR\x08postcode\"\x87\x01\n\x13UserRegister\
    Request\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x14\n\x05email\
    \x18\x02\x20\x01(\tR\x05email\x12\x10\n\x03tel\x18\x03\x20\x01(\tR\x03te\
    l\x12\x18\n\x07address\x18\x04\x20\x01(\tR\x07address\x12\x1a\n\x08postc\
    ode\x18\x05\x20\x01(\tR\x08postcode\"v\n\x14UserRegisterResponse\x12\x12\
    \n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\
    \x20\x01(\tR\x07message\x120\n\x08response\x18\x03\x20\x01(\x0b2\x14.use\
    r_custompay.UserR\x08response\"\x93\x01\n\x0fUserEditRequest\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\x05R\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\
    \x04name\x12\x14\n\x05email\x18\x03\x20\x01(\tR\x05email\x12\x10\n\x03te\
    l\x18\x04\x20\x01(\tR\x03tel\x12\x18\n\x07address\x18\x05\x20\x01(\tR\
    \x07address\x12\x1a\n\x08postcode\x18\x06\x20\x01(\tR\x08postcode\"r\n\
    \x10UserEditResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\
    \x18\n\x07message\x18\x02\x20\x01(\tR\x07message\x120\n\x08response\x18\
    \x03\x20\x01(\x0b2\x14.user_custompay.UserR\x08response\"\x1d\n\x0bUserR\
    equest\x12\x0e\n\x02id\x18\x01\x20\x01(\x05R\x02id\"n\n\x0cUserResponse\
    \x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\
    \x18\x02\x20\x01(\tR\x07message\x120\n\x08response\x18\x03\x20\x01(\x0b2\
    \x14.user_custompay.UserR\x08response2\xa4\x03\n\x0bUserService\x12n\n\
    \x0fUserRegisterRPC\x12#.user_custompay.UserRegisterRequest\x1a$.user_cu\
    stompay.UserRegisterResponse\"\x10\x82\xd3\xe4\x93\x02\n\"\x05/user:\x01\
    *\x12\\\n\x0bUserInfoRPC\x12\x1b.user_custompay.UserRequest\x1a\x1c.user\
    _custompay.UserResponse\"\x12\x82\xd3\xe4\x93\x02\x0c\x12\n/user/{id}\
    \x12^\n\rUserDeleteRPC\x12\x1b.user_custompay.UserRequest\x1a\x1c.user_c\
    ustompay.UserResponse\"\x12\x82\xd3\xe4\x93\x02\x0c*\n/user/{id}\x12g\n\
    \x0bUserEditRPC\x12\x1f.user_custompay.UserEditRequest\x1a\x20.user_cust\
    ompay.UserEditResponse\"\x15\x82\xd3\xe4\x93\x02\x0f2\n/user/{id}:\x01*B\
    ;Z9github.com/iamport/interface/gen_src/go/custompay/v1/userJ\xb1\x10\n\
    \x06\x12\x04\0\0P\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x01\0\x17\n\t\n\x02\x03\0\x12\x03\x03\0&\n\x08\n\x01\x08\x12\
    \x03\x04\0P\n\t\n\x02\x08\x0b\x12\x03\x04\0P\n\n\n\x02\x06\0\x12\x04\x06\
    \0\x20\x01\n\n\n\x03\x06\0\x01\x12\x03\x06\x08\x13\n\x0c\n\x04\x06\0\x02\
    \0\x12\x04\x07\x04\x0c\x05\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x07\x08\
    \x17\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x07\x18+\n\x0c\n\x05\x06\0\x02\
    \0\x03\x12\x03\x076J\n\r\n\x05\x06\0\x02\0\x04\x12\x04\x08\x08\x0b\n\n\
    \x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04\x08\x08\x0b\n\n\x0c\n\x04\
    \x06\0\x02\x01\x12\x04\x0e\x04\x12\x05\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x0e\x08\x13\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x0e\x14\x1f\n\x0c\
    \n\x05\x06\0\x02\x01\x03\x12\x03\x0e*6\n\r\n\x05\x06\0\x02\x01\x04\x12\
    \x04\x0f\x08\x11\n\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04\x0f\
    \x08\x11\n\n\x0c\n\x04\x06\0\x02\x02\x12\x04\x14\x04\x18\x05\n\x0c\n\x05\
    \x06\0\x02\x02\x01\x12\x03\x14\x08\x15\n\x0c\n\x05\x06\0\x02\x02\x02\x12\
    \x03\x14\x16!\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x14,8\n\r\n\x05\x06\
    \0\x02\x02\x04\x12\x04\x15\x08\x17\n\n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\
    \xbc\"\x12\x04\x15\x08\x17\n\n\x0c\n\x04\x06\0\x02\x03\x12\x04\x1a\x04\
    \x1f\x05\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x1a\x08\x13\n\x0c\n\x05\
    \x06\0\x02\x03\x02\x12\x03\x1a\x14#\n\x0c\n\x05\x06\0\x02\x03\x03\x12\
    \x03\x1a.>\n\r\n\x05\x06\0\x02\x03\x04\x12\x04\x1b\x08\x1e\n\n\x11\n\t\
    \x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04\x1b\x08\x1e\n\n\n\n\x02\x04\0\
    \x12\x04\"\0)\x01\n\n\n\x03\x04\0\x01\x12\x03\"\x08\x0c\n\x0b\n\x04\x04\
    \0\x02\0\x12\x03#\x04\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03#\x04\t\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03#\n\x0c\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03#\x0e\x0f\n\x0b\n\x04\x04\0\x02\x01\x12\x03$\x04\x14\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03$\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03$\
    \x0b\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03$\x12\x13\n\x0b\n\x04\x04\
    \0\x02\x02\x12\x03%\x04\x15\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03%\x04\n\
    \n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03%\x0b\x10\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03%\x13\x14\n\x0b\n\x04\x04\0\x02\x03\x12\x03&\x04\x13\n\
    \x0c\n\x05\x04\0\x02\x03\x05\x12\x03&\x04\n\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x03&\x0b\x0e\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03&\x11\x12\n\
    \x0b\n\x04\x04\0\x02\x04\x12\x03'\x04\x17\n\x0c\n\x05\x04\0\x02\x04\x05\
    \x12\x03'\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03'\x0b\x12\n\x0c\n\
    \x05\x04\0\x02\x04\x03\x12\x03'\x15\x16\n\x0b\n\x04\x04\0\x02\x05\x12\
    \x03(\x04\x18\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03(\x04\n\n\x0c\n\x05\
    \x04\0\x02\x05\x01\x12\x03(\x0b\x13\n\x0c\n\x05\x04\0\x02\x05\x03\x12\
    \x03(\x16\x17\n\n\n\x02\x04\x01\x12\x04+\01\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03+\x08\x1b\n\x0b\n\x04\x04\x01\x02\0\x12\x03,\x04\x14\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03,\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03,\
    \x0b\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03,\x12\x13\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03-\x04\x15\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03-\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03-\x0b\x10\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03-\x13\x14\n\x0b\n\x04\x04\x01\x02\x02\x12\x03.\
    \x04\x13\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03.\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03.\x0b\x0e\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\
    \x03.\x11\x12\n\x0b\n\x04\x04\x01\x02\x03\x12\x03/\x04\x17\n\x0c\n\x05\
    \x04\x01\x02\x03\x05\x12\x03/\x04\n\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\
    \x03/\x0b\x12\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03/\x15\x16\n\x0b\n\
    \x04\x04\x01\x02\x04\x12\x030\x04\x18\n\x0c\n\x05\x04\x01\x02\x04\x05\
    \x12\x030\x04\n\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x030\x0b\x13\n\x0c\n\
    \x05\x04\x01\x02\x04\x03\x12\x030\x16\x17\n\n\n\x02\x04\x02\x12\x043\07\
    \x01\n\n\n\x03\x04\x02\x01\x12\x033\x08\x1c\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x034\x04\x13\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x034\x04\t\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x034\n\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x034\x11\x12\n\x0b\n\x04\x04\x02\x02\x01\x12\x035\x04\x17\n\x0c\n\x05\
    \x04\x02\x02\x01\x05\x12\x035\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x035\x0b\x12\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x035\x15\x16\n\x0b\n\
    \x04\x04\x02\x02\x02\x12\x036\x04\x16\n\x0c\n\x05\x04\x02\x02\x02\x06\
    \x12\x036\x04\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x036\t\x11\n\x0c\n\
    \x05\x04\x02\x02\x02\x03\x12\x036\x14\x15\n\n\n\x02\x04\x03\x12\x049\0@\
    \x01\n\n\n\x03\x04\x03\x01\x12\x039\x08\x17\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03:\x04\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03:\x04\t\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03:\n\x0c\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03:\x0e\x0f\n\x0b\n\x04\x04\x03\x02\x01\x12\x03;\x04\x14\n\x0c\n\x05\
    \x04\x03\x02\x01\x05\x12\x03;\x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\
    \x03;\x0b\x0f\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03;\x12\x13\n\x0b\n\
    \x04\x04\x03\x02\x02\x12\x03<\x04\x15\n\x0c\n\x05\x04\x03\x02\x02\x05\
    \x12\x03<\x04\n\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03<\x0b\x10\n\x0c\n\
    \x05\x04\x03\x02\x02\x03\x12\x03<\x13\x14\n\x0b\n\x04\x04\x03\x02\x03\
    \x12\x03=\x04\x13\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03=\x04\n\n\x0c\n\
    \x05\x04\x03\x02\x03\x01\x12\x03=\x0b\x0e\n\x0c\n\x05\x04\x03\x02\x03\
    \x03\x12\x03=\x11\x12\n\x0b\n\x04\x04\x03\x02\x04\x12\x03>\x04\x17\n\x0c\
    \n\x05\x04\x03\x02\x04\x05\x12\x03>\x04\n\n\x0c\n\x05\x04\x03\x02\x04\
    \x01\x12\x03>\x0b\x12\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03>\x15\x16\n\
    \x0b\n\x04\x04\x03\x02\x05\x12\x03?\x04\x18\n\x0c\n\x05\x04\x03\x02\x05\
    \x05\x12\x03?\x04\n\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03?\x0b\x13\n\
    \x0c\n\x05\x04\x03\x02\x05\x03\x12\x03?\x16\x17\n\n\n\x02\x04\x04\x12\
    \x04B\0F\x01\n\n\n\x03\x04\x04\x01\x12\x03B\x08\x18\n\x0b\n\x04\x04\x04\
    \x02\0\x12\x03C\x04\x13\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03C\x04\t\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03C\n\x0e\n\x0c\n\x05\x04\x04\x02\0\
    \x03\x12\x03C\x11\x12\n\x0b\n\x04\x04\x04\x02\x01\x12\x03D\x04\x17\n\x0c\
    \n\x05\x04\x04\x02\x01\x05\x12\x03D\x04\n\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x03D\x0b\x12\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03D\x15\x16\n\
    \x0b\n\x04\x04\x04\x02\x02\x12\x03E\x04\x16\n\x0c\n\x05\x04\x04\x02\x02\
    \x06\x12\x03E\x04\x08\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03E\t\x11\n\
    \x0c\n\x05\x04\x04\x02\x02\x03\x12\x03E\x14\x15\n\n\n\x02\x04\x05\x12\
    \x04H\0J\x01\n\n\n\x03\x04\x05\x01\x12\x03H\x08\x13\n\x0b\n\x04\x04\x05\
    \x02\0\x12\x03I\x04\x11\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03I\x04\t\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x03I\n\x0c\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x03I\x0f\x10\n\n\n\x02\x04\x06\x12\x04L\0P\x01\n\n\n\x03\x04\
    \x06\x01\x12\x03L\x08\x14\n\x0b\n\x04\x04\x06\x02\0\x12\x03M\x04\x13\n\
    \x0c\n\x05\x04\x06\x02\0\x05\x12\x03M\x04\t\n\x0c\n\x05\x04\x06\x02\0\
    \x01\x12\x03M\n\x0e\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03M\x11\x12\n\x0b\
    \n\x04\x04\x06\x02\x01\x12\x03N\x04\x17\n\x0c\n\x05\x04\x06\x02\x01\x05\
    \x12\x03N\x04\n\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03N\x0b\x12\n\x0c\n\
    \x05\x04\x06\x02\x01\x03\x12\x03N\x15\x16\n\x0b\n\x04\x04\x06\x02\x02\
    \x12\x03O\x04\x16\n\x0c\n\x05\x04\x06\x02\x02\x06\x12\x03O\x04\x08\n\x0c\
    \n\x05\x04\x06\x02\x02\x01\x12\x03O\t\x11\n\x0c\n\x05\x04\x06\x02\x02\
    \x03\x12\x03O\x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(super::annotations::file_descriptor());
        let mut messages = ::std::vec::Vec::new();
        messages.push(User::generated_message_descriptor_data());
        messages.push(UserRegisterRequest::generated_message_descriptor_data());
        messages.push(UserRegisterResponse::generated_message_descriptor_data());
        messages.push(UserEditRequest::generated_message_descriptor_data());
        messages.push(UserEditResponse::generated_message_descriptor_data());
        messages.push(UserRequest::generated_message_descriptor_data());
        messages.push(UserResponse::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
