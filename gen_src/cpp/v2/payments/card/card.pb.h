// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v2/payments/card/card.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_v2_2fpayments_2fcard_2fcard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_v2_2fpayments_2fcard_2fcard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_v2_2fpayments_2fcard_2fcard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_v2_2fpayments_2fcard_2fcard_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v2_2fpayments_2fcard_2fcard_2eproto;
namespace card_v2 {
class CancelCardPaymentRequest;
struct CancelCardPaymentRequestDefaultTypeInternal;
extern CancelCardPaymentRequestDefaultTypeInternal _CancelCardPaymentRequest_default_instance_;
class CancelCardPaymenttResponse;
struct CancelCardPaymenttResponseDefaultTypeInternal;
extern CancelCardPaymenttResponseDefaultTypeInternal _CancelCardPaymenttResponse_default_instance_;
class CancelHistory;
struct CancelHistoryDefaultTypeInternal;
extern CancelHistoryDefaultTypeInternal _CancelHistory_default_instance_;
class CardRegisterRequest;
struct CardRegisterRequestDefaultTypeInternal;
extern CardRegisterRequestDefaultTypeInternal _CardRegisterRequest_default_instance_;
class CardRegisterResponse;
struct CardRegisterResponseDefaultTypeInternal;
extern CardRegisterResponseDefaultTypeInternal _CardRegisterResponse_default_instance_;
class CardRegisterResultData;
struct CardRegisterResultDataDefaultTypeInternal;
extern CardRegisterResultDataDefaultTypeInternal _CardRegisterResultData_default_instance_;
class DeleteCardInfoRequest;
struct DeleteCardInfoRequestDefaultTypeInternal;
extern DeleteCardInfoRequestDefaultTypeInternal _DeleteCardInfoRequest_default_instance_;
class DeleteCardInfoResponse;
struct DeleteCardInfoResponseDefaultTypeInternal;
extern DeleteCardInfoResponseDefaultTypeInternal _DeleteCardInfoResponse_default_instance_;
class GetCardInfoData;
struct GetCardInfoDataDefaultTypeInternal;
extern GetCardInfoDataDefaultTypeInternal _GetCardInfoData_default_instance_;
class GetCardInfoRequest;
struct GetCardInfoRequestDefaultTypeInternal;
extern GetCardInfoRequestDefaultTypeInternal _GetCardInfoRequest_default_instance_;
class GetCardInfoResponse;
struct GetCardInfoResponseDefaultTypeInternal;
extern GetCardInfoResponseDefaultTypeInternal _GetCardInfoResponse_default_instance_;
class PayByRegisteredCardData;
struct PayByRegisteredCardDataDefaultTypeInternal;
extern PayByRegisteredCardDataDefaultTypeInternal _PayByRegisteredCardData_default_instance_;
class PayByRegisteredCardRequest;
struct PayByRegisteredCardRequestDefaultTypeInternal;
extern PayByRegisteredCardRequestDefaultTypeInternal _PayByRegisteredCardRequest_default_instance_;
class PayByRegisteredCardResponse;
struct PayByRegisteredCardResponseDefaultTypeInternal;
extern PayByRegisteredCardResponseDefaultTypeInternal _PayByRegisteredCardResponse_default_instance_;
}  // namespace card_v2
PROTOBUF_NAMESPACE_OPEN
template<> ::card_v2::CancelCardPaymentRequest* Arena::CreateMaybeMessage<::card_v2::CancelCardPaymentRequest>(Arena*);
template<> ::card_v2::CancelCardPaymenttResponse* Arena::CreateMaybeMessage<::card_v2::CancelCardPaymenttResponse>(Arena*);
template<> ::card_v2::CancelHistory* Arena::CreateMaybeMessage<::card_v2::CancelHistory>(Arena*);
template<> ::card_v2::CardRegisterRequest* Arena::CreateMaybeMessage<::card_v2::CardRegisterRequest>(Arena*);
template<> ::card_v2::CardRegisterResponse* Arena::CreateMaybeMessage<::card_v2::CardRegisterResponse>(Arena*);
template<> ::card_v2::CardRegisterResultData* Arena::CreateMaybeMessage<::card_v2::CardRegisterResultData>(Arena*);
template<> ::card_v2::DeleteCardInfoRequest* Arena::CreateMaybeMessage<::card_v2::DeleteCardInfoRequest>(Arena*);
template<> ::card_v2::DeleteCardInfoResponse* Arena::CreateMaybeMessage<::card_v2::DeleteCardInfoResponse>(Arena*);
template<> ::card_v2::GetCardInfoData* Arena::CreateMaybeMessage<::card_v2::GetCardInfoData>(Arena*);
template<> ::card_v2::GetCardInfoRequest* Arena::CreateMaybeMessage<::card_v2::GetCardInfoRequest>(Arena*);
template<> ::card_v2::GetCardInfoResponse* Arena::CreateMaybeMessage<::card_v2::GetCardInfoResponse>(Arena*);
template<> ::card_v2::PayByRegisteredCardData* Arena::CreateMaybeMessage<::card_v2::PayByRegisteredCardData>(Arena*);
template<> ::card_v2::PayByRegisteredCardRequest* Arena::CreateMaybeMessage<::card_v2::PayByRegisteredCardRequest>(Arena*);
template<> ::card_v2::PayByRegisteredCardResponse* Arena::CreateMaybeMessage<::card_v2::PayByRegisteredCardResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace card_v2 {

// ===================================================================

class CardRegisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_v2.CardRegisterRequest) */ {
 public:
  inline CardRegisterRequest() : CardRegisterRequest(nullptr) {}
  ~CardRegisterRequest() override;
  explicit constexpr CardRegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CardRegisterRequest(const CardRegisterRequest& from);
  CardRegisterRequest(CardRegisterRequest&& from) noexcept
    : CardRegisterRequest() {
    *this = ::std::move(from);
  }

  inline CardRegisterRequest& operator=(const CardRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardRegisterRequest& operator=(CardRegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CardRegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CardRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const CardRegisterRequest*>(
               &_CardRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CardRegisterRequest& a, CardRegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CardRegisterRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardRegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardRegisterRequest* New() const final {
    return new CardRegisterRequest();
  }

  CardRegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardRegisterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CardRegisterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CardRegisterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardRegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_v2.CardRegisterRequest";
  }
  protected:
  explicit CardRegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardUidFieldNumber = 1,
    kCardNumberFieldNumber = 2,
    kExpiryFieldNumber = 3,
    kBirthFieldNumber = 4,
    kPwd2DigitFieldNumber = 5,
    kCustomerNameFieldNumber = 6,
    kCustomerTelFieldNumber = 7,
    kCustomerEmailFieldNumber = 8,
    kCustomerAddrFieldNumber = 9,
    kCustomerPostcodeFieldNumber = 10,
    kPgFieldNumber = 11,
  };
  // string card_uid = 1;
  void clear_card_uid();
  const std::string& card_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_uid();
  void set_allocated_card_uid(std::string* card_uid);
  private:
  const std::string& _internal_card_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_uid(const std::string& value);
  std::string* _internal_mutable_card_uid();
  public:

  // string card_number = 2;
  void clear_card_number();
  const std::string& card_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_number();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_number();
  void set_allocated_card_number(std::string* card_number);
  private:
  const std::string& _internal_card_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_number(const std::string& value);
  std::string* _internal_mutable_card_number();
  public:

  // string expiry = 3;
  void clear_expiry();
  const std::string& expiry() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expiry(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expiry();
  PROTOBUF_MUST_USE_RESULT std::string* release_expiry();
  void set_allocated_expiry(std::string* expiry);
  private:
  const std::string& _internal_expiry() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expiry(const std::string& value);
  std::string* _internal_mutable_expiry();
  public:

  // string birth = 4;
  void clear_birth();
  const std::string& birth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_birth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_birth();
  PROTOBUF_MUST_USE_RESULT std::string* release_birth();
  void set_allocated_birth(std::string* birth);
  private:
  const std::string& _internal_birth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_birth(const std::string& value);
  std::string* _internal_mutable_birth();
  public:

  // string pwd_2digit = 5;
  void clear_pwd_2digit();
  const std::string& pwd_2digit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pwd_2digit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pwd_2digit();
  PROTOBUF_MUST_USE_RESULT std::string* release_pwd_2digit();
  void set_allocated_pwd_2digit(std::string* pwd_2digit);
  private:
  const std::string& _internal_pwd_2digit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwd_2digit(const std::string& value);
  std::string* _internal_mutable_pwd_2digit();
  public:

  // string customer_name = 6;
  void clear_customer_name();
  const std::string& customer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_name();
  void set_allocated_customer_name(std::string* customer_name);
  private:
  const std::string& _internal_customer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_name(const std::string& value);
  std::string* _internal_mutable_customer_name();
  public:

  // string customer_tel = 7;
  void clear_customer_tel();
  const std::string& customer_tel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_tel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_tel();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_tel();
  void set_allocated_customer_tel(std::string* customer_tel);
  private:
  const std::string& _internal_customer_tel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_tel(const std::string& value);
  std::string* _internal_mutable_customer_tel();
  public:

  // string customer_email = 8;
  void clear_customer_email();
  const std::string& customer_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_email();
  void set_allocated_customer_email(std::string* customer_email);
  private:
  const std::string& _internal_customer_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_email(const std::string& value);
  std::string* _internal_mutable_customer_email();
  public:

  // string customer_addr = 9;
  void clear_customer_addr();
  const std::string& customer_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_addr();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_addr();
  void set_allocated_customer_addr(std::string* customer_addr);
  private:
  const std::string& _internal_customer_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_addr(const std::string& value);
  std::string* _internal_mutable_customer_addr();
  public:

  // string customer_postcode = 10;
  void clear_customer_postcode();
  const std::string& customer_postcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_postcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_postcode();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_postcode();
  void set_allocated_customer_postcode(std::string* customer_postcode);
  private:
  const std::string& _internal_customer_postcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_postcode(const std::string& value);
  std::string* _internal_mutable_customer_postcode();
  public:

  // string pg = 11;
  void clear_pg();
  const std::string& pg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pg();
  PROTOBUF_MUST_USE_RESULT std::string* release_pg();
  void set_allocated_pg(std::string* pg);
  private:
  const std::string& _internal_pg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pg(const std::string& value);
  std::string* _internal_mutable_pg();
  public:

  // @@protoc_insertion_point(class_scope:card_v2.CardRegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expiry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr birth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_2digit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_postcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2fpayments_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class CardRegisterResultData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_v2.CardRegisterResultData) */ {
 public:
  inline CardRegisterResultData() : CardRegisterResultData(nullptr) {}
  ~CardRegisterResultData() override;
  explicit constexpr CardRegisterResultData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CardRegisterResultData(const CardRegisterResultData& from);
  CardRegisterResultData(CardRegisterResultData&& from) noexcept
    : CardRegisterResultData() {
    *this = ::std::move(from);
  }

  inline CardRegisterResultData& operator=(const CardRegisterResultData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardRegisterResultData& operator=(CardRegisterResultData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CardRegisterResultData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CardRegisterResultData* internal_default_instance() {
    return reinterpret_cast<const CardRegisterResultData*>(
               &_CardRegisterResultData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CardRegisterResultData& a, CardRegisterResultData& b) {
    a.Swap(&b);
  }
  inline void Swap(CardRegisterResultData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardRegisterResultData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardRegisterResultData* New() const final {
    return new CardRegisterResultData();
  }

  CardRegisterResultData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardRegisterResultData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CardRegisterResultData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CardRegisterResultData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardRegisterResultData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_v2.CardRegisterResultData";
  }
  protected:
  explicit CardRegisterResultData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardUidFieldNumber = 1,
    kCardNameFieldNumber = 2,
    kCardCodeFieldNumber = 3,
    kBinNumbrerFieldNumber = 4,
    kCustomerNameFieldNumber = 6,
    kCustomerTelFieldNumber = 7,
    kCustomerEmailFieldNumber = 8,
    kCustomerAddrFieldNumber = 9,
    kCustomerPostcodeFieldNumber = 10,
    kPgProviderFieldNumber = 13,
    kPgIdFieldNumber = 14,
    kCardTypeFieldNumber = 5,
    kInsertedFieldNumber = 11,
    kUpdatedFieldNumber = 12,
  };
  // string card_uid = 1;
  void clear_card_uid();
  const std::string& card_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_uid();
  void set_allocated_card_uid(std::string* card_uid);
  private:
  const std::string& _internal_card_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_uid(const std::string& value);
  std::string* _internal_mutable_card_uid();
  public:

  // string card_name = 2;
  void clear_card_name();
  const std::string& card_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_name();
  void set_allocated_card_name(std::string* card_name);
  private:
  const std::string& _internal_card_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_name(const std::string& value);
  std::string* _internal_mutable_card_name();
  public:

  // string card_code = 3;
  void clear_card_code();
  const std::string& card_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_code();
  void set_allocated_card_code(std::string* card_code);
  private:
  const std::string& _internal_card_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_code(const std::string& value);
  std::string* _internal_mutable_card_code();
  public:

  // string bin_numbrer = 4;
  void clear_bin_numbrer();
  const std::string& bin_numbrer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bin_numbrer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bin_numbrer();
  PROTOBUF_MUST_USE_RESULT std::string* release_bin_numbrer();
  void set_allocated_bin_numbrer(std::string* bin_numbrer);
  private:
  const std::string& _internal_bin_numbrer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bin_numbrer(const std::string& value);
  std::string* _internal_mutable_bin_numbrer();
  public:

  // string customer_name = 6;
  void clear_customer_name();
  const std::string& customer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_name();
  void set_allocated_customer_name(std::string* customer_name);
  private:
  const std::string& _internal_customer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_name(const std::string& value);
  std::string* _internal_mutable_customer_name();
  public:

  // string customer_tel = 7;
  void clear_customer_tel();
  const std::string& customer_tel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_tel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_tel();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_tel();
  void set_allocated_customer_tel(std::string* customer_tel);
  private:
  const std::string& _internal_customer_tel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_tel(const std::string& value);
  std::string* _internal_mutable_customer_tel();
  public:

  // string customer_email = 8;
  void clear_customer_email();
  const std::string& customer_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_email();
  void set_allocated_customer_email(std::string* customer_email);
  private:
  const std::string& _internal_customer_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_email(const std::string& value);
  std::string* _internal_mutable_customer_email();
  public:

  // string customer_addr = 9;
  void clear_customer_addr();
  const std::string& customer_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_addr();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_addr();
  void set_allocated_customer_addr(std::string* customer_addr);
  private:
  const std::string& _internal_customer_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_addr(const std::string& value);
  std::string* _internal_mutable_customer_addr();
  public:

  // string customer_postcode = 10;
  void clear_customer_postcode();
  const std::string& customer_postcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_postcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_postcode();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_postcode();
  void set_allocated_customer_postcode(std::string* customer_postcode);
  private:
  const std::string& _internal_customer_postcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_postcode(const std::string& value);
  std::string* _internal_mutable_customer_postcode();
  public:

  // string pg_provider = 13;
  void clear_pg_provider();
  const std::string& pg_provider() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pg_provider(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pg_provider();
  PROTOBUF_MUST_USE_RESULT std::string* release_pg_provider();
  void set_allocated_pg_provider(std::string* pg_provider);
  private:
  const std::string& _internal_pg_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pg_provider(const std::string& value);
  std::string* _internal_mutable_pg_provider();
  public:

  // string pg_id = 14;
  void clear_pg_id();
  const std::string& pg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pg_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_pg_id();
  void set_allocated_pg_id(std::string* pg_id);
  private:
  const std::string& _internal_pg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pg_id(const std::string& value);
  std::string* _internal_mutable_pg_id();
  public:

  // int32 card_type = 5;
  void clear_card_type();
  ::PROTOBUF_NAMESPACE_ID::int32 card_type() const;
  void set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_type() const;
  void _internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inserted = 11;
  void clear_inserted();
  ::PROTOBUF_NAMESPACE_ID::int32 inserted() const;
  void set_inserted(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inserted() const;
  void _internal_set_inserted(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 updated = 12;
  void clear_updated();
  ::PROTOBUF_NAMESPACE_ID::int32 updated() const;
  void set_updated(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_updated() const;
  void _internal_set_updated(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_v2.CardRegisterResultData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bin_numbrer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_postcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_provider_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 inserted_;
  ::PROTOBUF_NAMESPACE_ID::int32 updated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2fpayments_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class CardRegisterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_v2.CardRegisterResponse) */ {
 public:
  inline CardRegisterResponse() : CardRegisterResponse(nullptr) {}
  ~CardRegisterResponse() override;
  explicit constexpr CardRegisterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CardRegisterResponse(const CardRegisterResponse& from);
  CardRegisterResponse(CardRegisterResponse&& from) noexcept
    : CardRegisterResponse() {
    *this = ::std::move(from);
  }

  inline CardRegisterResponse& operator=(const CardRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardRegisterResponse& operator=(CardRegisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CardRegisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CardRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const CardRegisterResponse*>(
               &_CardRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CardRegisterResponse& a, CardRegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CardRegisterResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardRegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardRegisterResponse* New() const final {
    return new CardRegisterResponse();
  }

  CardRegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardRegisterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CardRegisterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CardRegisterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardRegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_v2.CardRegisterResponse";
  }
  protected:
  explicit CardRegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .card_v2.CardRegisterResultData response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::card_v2::CardRegisterResultData& response() const;
  PROTOBUF_MUST_USE_RESULT ::card_v2::CardRegisterResultData* release_response();
  ::card_v2::CardRegisterResultData* mutable_response();
  void set_allocated_response(::card_v2::CardRegisterResultData* response);
  private:
  const ::card_v2::CardRegisterResultData& _internal_response() const;
  ::card_v2::CardRegisterResultData* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::card_v2::CardRegisterResultData* response);
  ::card_v2::CardRegisterResultData* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_v2.CardRegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::card_v2::CardRegisterResultData* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2fpayments_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class GetCardInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_v2.GetCardInfoRequest) */ {
 public:
  inline GetCardInfoRequest() : GetCardInfoRequest(nullptr) {}
  ~GetCardInfoRequest() override;
  explicit constexpr GetCardInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCardInfoRequest(const GetCardInfoRequest& from);
  GetCardInfoRequest(GetCardInfoRequest&& from) noexcept
    : GetCardInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetCardInfoRequest& operator=(const GetCardInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCardInfoRequest& operator=(GetCardInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCardInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCardInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetCardInfoRequest*>(
               &_GetCardInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetCardInfoRequest& a, GetCardInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCardInfoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCardInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCardInfoRequest* New() const final {
    return new GetCardInfoRequest();
  }

  GetCardInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCardInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCardInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCardInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCardInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_v2.GetCardInfoRequest";
  }
  protected:
  explicit GetCardInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardUidFieldNumber = 1,
  };
  // string card_uid = 1;
  void clear_card_uid();
  const std::string& card_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_uid();
  void set_allocated_card_uid(std::string* card_uid);
  private:
  const std::string& _internal_card_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_uid(const std::string& value);
  std::string* _internal_mutable_card_uid();
  public:

  // @@protoc_insertion_point(class_scope:card_v2.GetCardInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2fpayments_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class GetCardInfoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_v2.GetCardInfoData) */ {
 public:
  inline GetCardInfoData() : GetCardInfoData(nullptr) {}
  ~GetCardInfoData() override;
  explicit constexpr GetCardInfoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCardInfoData(const GetCardInfoData& from);
  GetCardInfoData(GetCardInfoData&& from) noexcept
    : GetCardInfoData() {
    *this = ::std::move(from);
  }

  inline GetCardInfoData& operator=(const GetCardInfoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCardInfoData& operator=(GetCardInfoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCardInfoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCardInfoData* internal_default_instance() {
    return reinterpret_cast<const GetCardInfoData*>(
               &_GetCardInfoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetCardInfoData& a, GetCardInfoData& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCardInfoData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCardInfoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCardInfoData* New() const final {
    return new GetCardInfoData();
  }

  GetCardInfoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCardInfoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCardInfoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCardInfoData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCardInfoData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_v2.GetCardInfoData";
  }
  protected:
  explicit GetCardInfoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardUidFieldNumber = 1,
    kCardProviderFieldNumber = 2,
    kCardCodeFieldNumber = 3,
    kBinNumberFieldNumber = 4,
    kCustomerNameFieldNumber = 6,
    kCustomerTelFieldNumber = 7,
    kCustomerEmailFieldNumber = 8,
    kCustomerAddrFieldNumber = 9,
    kCustomerPostcodeFieldNumber = 10,
    kCardTypeFieldNumber = 5,
    kInsertedFieldNumber = 11,
    kUpdatedFieldNumber = 12,
  };
  // string card_uid = 1;
  void clear_card_uid();
  const std::string& card_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_uid();
  void set_allocated_card_uid(std::string* card_uid);
  private:
  const std::string& _internal_card_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_uid(const std::string& value);
  std::string* _internal_mutable_card_uid();
  public:

  // string card_provider = 2;
  void clear_card_provider();
  const std::string& card_provider() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_provider(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_provider();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_provider();
  void set_allocated_card_provider(std::string* card_provider);
  private:
  const std::string& _internal_card_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_provider(const std::string& value);
  std::string* _internal_mutable_card_provider();
  public:

  // string card_code = 3;
  void clear_card_code();
  const std::string& card_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_code();
  void set_allocated_card_code(std::string* card_code);
  private:
  const std::string& _internal_card_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_code(const std::string& value);
  std::string* _internal_mutable_card_code();
  public:

  // string bin_number = 4;
  void clear_bin_number();
  const std::string& bin_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bin_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bin_number();
  PROTOBUF_MUST_USE_RESULT std::string* release_bin_number();
  void set_allocated_bin_number(std::string* bin_number);
  private:
  const std::string& _internal_bin_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bin_number(const std::string& value);
  std::string* _internal_mutable_bin_number();
  public:

  // string customer_name = 6;
  void clear_customer_name();
  const std::string& customer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_name();
  void set_allocated_customer_name(std::string* customer_name);
  private:
  const std::string& _internal_customer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_name(const std::string& value);
  std::string* _internal_mutable_customer_name();
  public:

  // string customer_tel = 7;
  void clear_customer_tel();
  const std::string& customer_tel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_tel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_tel();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_tel();
  void set_allocated_customer_tel(std::string* customer_tel);
  private:
  const std::string& _internal_customer_tel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_tel(const std::string& value);
  std::string* _internal_mutable_customer_tel();
  public:

  // string customer_email = 8;
  void clear_customer_email();
  const std::string& customer_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_email();
  void set_allocated_customer_email(std::string* customer_email);
  private:
  const std::string& _internal_customer_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_email(const std::string& value);
  std::string* _internal_mutable_customer_email();
  public:

  // string customer_addr = 9;
  void clear_customer_addr();
  const std::string& customer_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_addr();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_addr();
  void set_allocated_customer_addr(std::string* customer_addr);
  private:
  const std::string& _internal_customer_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_addr(const std::string& value);
  std::string* _internal_mutable_customer_addr();
  public:

  // string customer_postcode = 10;
  void clear_customer_postcode();
  const std::string& customer_postcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_postcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_postcode();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_postcode();
  void set_allocated_customer_postcode(std::string* customer_postcode);
  private:
  const std::string& _internal_customer_postcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_postcode(const std::string& value);
  std::string* _internal_mutable_customer_postcode();
  public:

  // int32 card_type = 5;
  void clear_card_type();
  ::PROTOBUF_NAMESPACE_ID::int32 card_type() const;
  void set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_type() const;
  void _internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inserted = 11;
  void clear_inserted();
  ::PROTOBUF_NAMESPACE_ID::int32 inserted() const;
  void set_inserted(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inserted() const;
  void _internal_set_inserted(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 updated = 12;
  void clear_updated();
  ::PROTOBUF_NAMESPACE_ID::int32 updated() const;
  void set_updated(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_updated() const;
  void _internal_set_updated(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_v2.GetCardInfoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_provider_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bin_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_postcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 inserted_;
  ::PROTOBUF_NAMESPACE_ID::int32 updated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2fpayments_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class GetCardInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_v2.GetCardInfoResponse) */ {
 public:
  inline GetCardInfoResponse() : GetCardInfoResponse(nullptr) {}
  ~GetCardInfoResponse() override;
  explicit constexpr GetCardInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCardInfoResponse(const GetCardInfoResponse& from);
  GetCardInfoResponse(GetCardInfoResponse&& from) noexcept
    : GetCardInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetCardInfoResponse& operator=(const GetCardInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCardInfoResponse& operator=(GetCardInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCardInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCardInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetCardInfoResponse*>(
               &_GetCardInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetCardInfoResponse& a, GetCardInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCardInfoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCardInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCardInfoResponse* New() const final {
    return new GetCardInfoResponse();
  }

  GetCardInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCardInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCardInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCardInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCardInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_v2.GetCardInfoResponse";
  }
  protected:
  explicit GetCardInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .card_v2.GetCardInfoData response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::card_v2::GetCardInfoData& response() const;
  PROTOBUF_MUST_USE_RESULT ::card_v2::GetCardInfoData* release_response();
  ::card_v2::GetCardInfoData* mutable_response();
  void set_allocated_response(::card_v2::GetCardInfoData* response);
  private:
  const ::card_v2::GetCardInfoData& _internal_response() const;
  ::card_v2::GetCardInfoData* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::card_v2::GetCardInfoData* response);
  ::card_v2::GetCardInfoData* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_v2.GetCardInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::card_v2::GetCardInfoData* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2fpayments_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class DeleteCardInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_v2.DeleteCardInfoRequest) */ {
 public:
  inline DeleteCardInfoRequest() : DeleteCardInfoRequest(nullptr) {}
  ~DeleteCardInfoRequest() override;
  explicit constexpr DeleteCardInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteCardInfoRequest(const DeleteCardInfoRequest& from);
  DeleteCardInfoRequest(DeleteCardInfoRequest&& from) noexcept
    : DeleteCardInfoRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCardInfoRequest& operator=(const DeleteCardInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCardInfoRequest& operator=(DeleteCardInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteCardInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteCardInfoRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCardInfoRequest*>(
               &_DeleteCardInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteCardInfoRequest& a, DeleteCardInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCardInfoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCardInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCardInfoRequest* New() const final {
    return new DeleteCardInfoRequest();
  }

  DeleteCardInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCardInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteCardInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteCardInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCardInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_v2.DeleteCardInfoRequest";
  }
  protected:
  explicit DeleteCardInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardUidFieldNumber = 1,
  };
  // string card_uid = 1;
  void clear_card_uid();
  const std::string& card_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_uid();
  void set_allocated_card_uid(std::string* card_uid);
  private:
  const std::string& _internal_card_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_uid(const std::string& value);
  std::string* _internal_mutable_card_uid();
  public:

  // @@protoc_insertion_point(class_scope:card_v2.DeleteCardInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2fpayments_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class DeleteCardInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_v2.DeleteCardInfoResponse) */ {
 public:
  inline DeleteCardInfoResponse() : DeleteCardInfoResponse(nullptr) {}
  ~DeleteCardInfoResponse() override;
  explicit constexpr DeleteCardInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteCardInfoResponse(const DeleteCardInfoResponse& from);
  DeleteCardInfoResponse(DeleteCardInfoResponse&& from) noexcept
    : DeleteCardInfoResponse() {
    *this = ::std::move(from);
  }

  inline DeleteCardInfoResponse& operator=(const DeleteCardInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCardInfoResponse& operator=(DeleteCardInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteCardInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteCardInfoResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteCardInfoResponse*>(
               &_DeleteCardInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteCardInfoResponse& a, DeleteCardInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCardInfoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCardInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCardInfoResponse* New() const final {
    return new DeleteCardInfoResponse();
  }

  DeleteCardInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCardInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteCardInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteCardInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCardInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_v2.DeleteCardInfoResponse";
  }
  protected:
  explicit DeleteCardInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_v2.DeleteCardInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2fpayments_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class PayByRegisteredCardRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_v2.PayByRegisteredCardRequest) */ {
 public:
  inline PayByRegisteredCardRequest() : PayByRegisteredCardRequest(nullptr) {}
  ~PayByRegisteredCardRequest() override;
  explicit constexpr PayByRegisteredCardRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PayByRegisteredCardRequest(const PayByRegisteredCardRequest& from);
  PayByRegisteredCardRequest(PayByRegisteredCardRequest&& from) noexcept
    : PayByRegisteredCardRequest() {
    *this = ::std::move(from);
  }

  inline PayByRegisteredCardRequest& operator=(const PayByRegisteredCardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayByRegisteredCardRequest& operator=(PayByRegisteredCardRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayByRegisteredCardRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayByRegisteredCardRequest* internal_default_instance() {
    return reinterpret_cast<const PayByRegisteredCardRequest*>(
               &_PayByRegisteredCardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PayByRegisteredCardRequest& a, PayByRegisteredCardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PayByRegisteredCardRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayByRegisteredCardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PayByRegisteredCardRequest* New() const final {
    return new PayByRegisteredCardRequest();
  }

  PayByRegisteredCardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PayByRegisteredCardRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PayByRegisteredCardRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PayByRegisteredCardRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayByRegisteredCardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_v2.PayByRegisteredCardRequest";
  }
  protected:
  explicit PayByRegisteredCardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardUidFieldNumber = 1,
    kMerchantUidFieldNumber = 2,
    kAmountFieldNumber = 3,
    kTaxFreeAmountFieldNumber = 4,
    kOrderNameFieldNumber = 5,
    kCustomDataFieldNumber = 8,
    kCallbackUrlFieldNumber = 9,
    kBuyerAddrFieldNumber = 10,
    kBuyerEmailFieldNumber = 11,
    kBuyerNameFieldNumber = 12,
    kBuyerPostcodeFieldNumber = 13,
    kBuyerTelFieldNumber = 14,
    kCardInstallmentFieldNumber = 6,
    kInterestFreeByMerchantFieldNumber = 7,
  };
  // string card_uid = 1;
  void clear_card_uid();
  const std::string& card_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_uid();
  void set_allocated_card_uid(std::string* card_uid);
  private:
  const std::string& _internal_card_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_uid(const std::string& value);
  std::string* _internal_mutable_card_uid();
  public:

  // string merchant_uid = 2;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merchant_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merchant_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // string amount = 3;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_MUST_USE_RESULT std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string tax_free_amount = 4;
  void clear_tax_free_amount();
  const std::string& tax_free_amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tax_free_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tax_free_amount();
  PROTOBUF_MUST_USE_RESULT std::string* release_tax_free_amount();
  void set_allocated_tax_free_amount(std::string* tax_free_amount);
  private:
  const std::string& _internal_tax_free_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tax_free_amount(const std::string& value);
  std::string* _internal_mutable_tax_free_amount();
  public:

  // string order_name = 5;
  void clear_order_name();
  const std::string& order_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_order_name();
  void set_allocated_order_name(std::string* order_name);
  private:
  const std::string& _internal_order_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_name(const std::string& value);
  std::string* _internal_mutable_order_name();
  public:

  // string custom_data = 8;
  void clear_custom_data();
  const std::string& custom_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_custom_data();
  void set_allocated_custom_data(std::string* custom_data);
  private:
  const std::string& _internal_custom_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_data(const std::string& value);
  std::string* _internal_mutable_custom_data();
  public:

  // string callback_url = 9;
  void clear_callback_url();
  const std::string& callback_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_callback_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_callback_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_callback_url();
  void set_allocated_callback_url(std::string* callback_url);
  private:
  const std::string& _internal_callback_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callback_url(const std::string& value);
  std::string* _internal_mutable_callback_url();
  public:

  // string buyer_addr = 10;
  void clear_buyer_addr();
  const std::string& buyer_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer_addr();
  PROTOBUF_MUST_USE_RESULT std::string* release_buyer_addr();
  void set_allocated_buyer_addr(std::string* buyer_addr);
  private:
  const std::string& _internal_buyer_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer_addr(const std::string& value);
  std::string* _internal_mutable_buyer_addr();
  public:

  // string buyer_email = 11;
  void clear_buyer_email();
  const std::string& buyer_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_buyer_email();
  void set_allocated_buyer_email(std::string* buyer_email);
  private:
  const std::string& _internal_buyer_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer_email(const std::string& value);
  std::string* _internal_mutable_buyer_email();
  public:

  // string buyer_name = 12;
  void clear_buyer_name();
  const std::string& buyer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_buyer_name();
  void set_allocated_buyer_name(std::string* buyer_name);
  private:
  const std::string& _internal_buyer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer_name(const std::string& value);
  std::string* _internal_mutable_buyer_name();
  public:

  // string buyer_postcode = 13;
  void clear_buyer_postcode();
  const std::string& buyer_postcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer_postcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer_postcode();
  PROTOBUF_MUST_USE_RESULT std::string* release_buyer_postcode();
  void set_allocated_buyer_postcode(std::string* buyer_postcode);
  private:
  const std::string& _internal_buyer_postcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer_postcode(const std::string& value);
  std::string* _internal_mutable_buyer_postcode();
  public:

  // string buyer_tel = 14;
  void clear_buyer_tel();
  const std::string& buyer_tel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer_tel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer_tel();
  PROTOBUF_MUST_USE_RESULT std::string* release_buyer_tel();
  void set_allocated_buyer_tel(std::string* buyer_tel);
  private:
  const std::string& _internal_buyer_tel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer_tel(const std::string& value);
  std::string* _internal_mutable_buyer_tel();
  public:

  // int32 card_installment = 6;
  void clear_card_installment();
  ::PROTOBUF_NAMESPACE_ID::int32 card_installment() const;
  void set_card_installment(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_installment() const;
  void _internal_set_card_installment(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool interest_free_by_merchant = 7;
  void clear_interest_free_by_merchant();
  bool interest_free_by_merchant() const;
  void set_interest_free_by_merchant(bool value);
  private:
  bool _internal_interest_free_by_merchant() const;
  void _internal_set_interest_free_by_merchant(bool value);
  public:

  // @@protoc_insertion_point(class_scope:card_v2.PayByRegisteredCardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tax_free_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callback_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_postcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_tel_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_installment_;
  bool interest_free_by_merchant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2fpayments_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class PayByRegisteredCardData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_v2.PayByRegisteredCardData) */ {
 public:
  inline PayByRegisteredCardData() : PayByRegisteredCardData(nullptr) {}
  ~PayByRegisteredCardData() override;
  explicit constexpr PayByRegisteredCardData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PayByRegisteredCardData(const PayByRegisteredCardData& from);
  PayByRegisteredCardData(PayByRegisteredCardData&& from) noexcept
    : PayByRegisteredCardData() {
    *this = ::std::move(from);
  }

  inline PayByRegisteredCardData& operator=(const PayByRegisteredCardData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayByRegisteredCardData& operator=(PayByRegisteredCardData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayByRegisteredCardData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayByRegisteredCardData* internal_default_instance() {
    return reinterpret_cast<const PayByRegisteredCardData*>(
               &_PayByRegisteredCardData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PayByRegisteredCardData& a, PayByRegisteredCardData& b) {
    a.Swap(&b);
  }
  inline void Swap(PayByRegisteredCardData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayByRegisteredCardData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PayByRegisteredCardData* New() const final {
    return new PayByRegisteredCardData();
  }

  PayByRegisteredCardData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PayByRegisteredCardData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PayByRegisteredCardData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PayByRegisteredCardData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayByRegisteredCardData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_v2.PayByRegisteredCardData";
  }
  protected:
  explicit PayByRegisteredCardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCancelHistoryFieldNumber = 9,
    kCancelReceiptUrlsFieldNumber = 11,
    kAmountFieldNumber = 1,
    kApplyNumFieldNumber = 2,
    kBuyerAddrFieldNumber = 3,
    kBuyerEmailFieldNumber = 4,
    kBuyerNameFieldNumber = 5,
    kBuyerPostcodeFieldNumber = 6,
    kBuyerTelFieldNumber = 7,
    kCancelAmountFieldNumber = 8,
    kCancelReasonFieldNumber = 10,
    kCardCodeFieldNumber = 13,
    kCardNameFieldNumber = 14,
    kBinNumberFieldNumber = 15,
    kChannelFieldNumber = 19,
    kCurrencyFieldNumber = 20,
    kCustomDataFieldNumber = 21,
    kCardUidFieldNumber = 22,
    kCustomerUidUsageFieldNumber = 23,
    kFailReasonFieldNumber = 24,
    kImpUidFieldNumber = 26,
    kMerchantUidFieldNumber = 27,
    kOrderNameFieldNumber = 28,
    kPayMethodFieldNumber = 30,
    kPgIdFieldNumber = 31,
    kPgProviderFieldNumber = 32,
    kPgTidFieldNumber = 33,
    kReceiptUrlFieldNumber = 34,
    kStatusFieldNumber = 36,
    kUserAgentFieldNumber = 37,
    kCancelledAtFieldNumber = 12,
    kCardInstallmentFieldNumber = 16,
    kCardTypeFieldNumber = 17,
    kCashReceiptIssuedFieldNumber = 18,
    kFailedAtFieldNumber = 25,
    kPaidAtFieldNumber = 29,
    kStartedAtFieldNumber = 35,
  };
  // repeated .card_v2.CancelHistory cancel_history = 9;
  int cancel_history_size() const;
  private:
  int _internal_cancel_history_size() const;
  public:
  void clear_cancel_history();
  ::card_v2::CancelHistory* mutable_cancel_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::card_v2::CancelHistory >*
      mutable_cancel_history();
  private:
  const ::card_v2::CancelHistory& _internal_cancel_history(int index) const;
  ::card_v2::CancelHistory* _internal_add_cancel_history();
  public:
  const ::card_v2::CancelHistory& cancel_history(int index) const;
  ::card_v2::CancelHistory* add_cancel_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::card_v2::CancelHistory >&
      cancel_history() const;

  // repeated string cancel_receipt_urls = 11;
  int cancel_receipt_urls_size() const;
  private:
  int _internal_cancel_receipt_urls_size() const;
  public:
  void clear_cancel_receipt_urls();
  const std::string& cancel_receipt_urls(int index) const;
  std::string* mutable_cancel_receipt_urls(int index);
  void set_cancel_receipt_urls(int index, const std::string& value);
  void set_cancel_receipt_urls(int index, std::string&& value);
  void set_cancel_receipt_urls(int index, const char* value);
  void set_cancel_receipt_urls(int index, const char* value, size_t size);
  std::string* add_cancel_receipt_urls();
  void add_cancel_receipt_urls(const std::string& value);
  void add_cancel_receipt_urls(std::string&& value);
  void add_cancel_receipt_urls(const char* value);
  void add_cancel_receipt_urls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cancel_receipt_urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cancel_receipt_urls();
  private:
  const std::string& _internal_cancel_receipt_urls(int index) const;
  std::string* _internal_add_cancel_receipt_urls();
  public:

  // string amount = 1;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_MUST_USE_RESULT std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string apply_num = 2;
  void clear_apply_num();
  const std::string& apply_num() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apply_num(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apply_num();
  PROTOBUF_MUST_USE_RESULT std::string* release_apply_num();
  void set_allocated_apply_num(std::string* apply_num);
  private:
  const std::string& _internal_apply_num() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apply_num(const std::string& value);
  std::string* _internal_mutable_apply_num();
  public:

  // string buyer_addr = 3;
  void clear_buyer_addr();
  const std::string& buyer_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer_addr();
  PROTOBUF_MUST_USE_RESULT std::string* release_buyer_addr();
  void set_allocated_buyer_addr(std::string* buyer_addr);
  private:
  const std::string& _internal_buyer_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer_addr(const std::string& value);
  std::string* _internal_mutable_buyer_addr();
  public:

  // string buyer_email = 4;
  void clear_buyer_email();
  const std::string& buyer_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_buyer_email();
  void set_allocated_buyer_email(std::string* buyer_email);
  private:
  const std::string& _internal_buyer_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer_email(const std::string& value);
  std::string* _internal_mutable_buyer_email();
  public:

  // string buyer_name = 5;
  void clear_buyer_name();
  const std::string& buyer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_buyer_name();
  void set_allocated_buyer_name(std::string* buyer_name);
  private:
  const std::string& _internal_buyer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer_name(const std::string& value);
  std::string* _internal_mutable_buyer_name();
  public:

  // string buyer_postcode = 6;
  void clear_buyer_postcode();
  const std::string& buyer_postcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer_postcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer_postcode();
  PROTOBUF_MUST_USE_RESULT std::string* release_buyer_postcode();
  void set_allocated_buyer_postcode(std::string* buyer_postcode);
  private:
  const std::string& _internal_buyer_postcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer_postcode(const std::string& value);
  std::string* _internal_mutable_buyer_postcode();
  public:

  // string buyer_tel = 7;
  void clear_buyer_tel();
  const std::string& buyer_tel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer_tel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer_tel();
  PROTOBUF_MUST_USE_RESULT std::string* release_buyer_tel();
  void set_allocated_buyer_tel(std::string* buyer_tel);
  private:
  const std::string& _internal_buyer_tel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer_tel(const std::string& value);
  std::string* _internal_mutable_buyer_tel();
  public:

  // string cancel_amount = 8;
  void clear_cancel_amount();
  const std::string& cancel_amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cancel_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cancel_amount();
  PROTOBUF_MUST_USE_RESULT std::string* release_cancel_amount();
  void set_allocated_cancel_amount(std::string* cancel_amount);
  private:
  const std::string& _internal_cancel_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cancel_amount(const std::string& value);
  std::string* _internal_mutable_cancel_amount();
  public:

  // string cancel_reason = 10;
  void clear_cancel_reason();
  const std::string& cancel_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cancel_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cancel_reason();
  PROTOBUF_MUST_USE_RESULT std::string* release_cancel_reason();
  void set_allocated_cancel_reason(std::string* cancel_reason);
  private:
  const std::string& _internal_cancel_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cancel_reason(const std::string& value);
  std::string* _internal_mutable_cancel_reason();
  public:

  // string card_code = 13;
  void clear_card_code();
  const std::string& card_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_code();
  void set_allocated_card_code(std::string* card_code);
  private:
  const std::string& _internal_card_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_code(const std::string& value);
  std::string* _internal_mutable_card_code();
  public:

  // string card_name = 14;
  void clear_card_name();
  const std::string& card_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_name();
  void set_allocated_card_name(std::string* card_name);
  private:
  const std::string& _internal_card_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_name(const std::string& value);
  std::string* _internal_mutable_card_name();
  public:

  // string bin_number = 15;
  void clear_bin_number();
  const std::string& bin_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bin_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bin_number();
  PROTOBUF_MUST_USE_RESULT std::string* release_bin_number();
  void set_allocated_bin_number(std::string* bin_number);
  private:
  const std::string& _internal_bin_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bin_number(const std::string& value);
  std::string* _internal_mutable_bin_number();
  public:

  // string channel = 19;
  void clear_channel();
  const std::string& channel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel();
  PROTOBUF_MUST_USE_RESULT std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // string currency = 20;
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_MUST_USE_RESULT std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string custom_data = 21;
  void clear_custom_data();
  const std::string& custom_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_custom_data();
  void set_allocated_custom_data(std::string* custom_data);
  private:
  const std::string& _internal_custom_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_data(const std::string& value);
  std::string* _internal_mutable_custom_data();
  public:

  // string card_uid = 22;
  void clear_card_uid();
  const std::string& card_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_uid();
  void set_allocated_card_uid(std::string* card_uid);
  private:
  const std::string& _internal_card_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_uid(const std::string& value);
  std::string* _internal_mutable_card_uid();
  public:

  // string customer_uid_usage = 23;
  void clear_customer_uid_usage();
  const std::string& customer_uid_usage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_uid_usage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_uid_usage();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_uid_usage();
  void set_allocated_customer_uid_usage(std::string* customer_uid_usage);
  private:
  const std::string& _internal_customer_uid_usage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_uid_usage(const std::string& value);
  std::string* _internal_mutable_customer_uid_usage();
  public:

  // string fail_reason = 24;
  void clear_fail_reason();
  const std::string& fail_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fail_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fail_reason();
  PROTOBUF_MUST_USE_RESULT std::string* release_fail_reason();
  void set_allocated_fail_reason(std::string* fail_reason);
  private:
  const std::string& _internal_fail_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fail_reason(const std::string& value);
  std::string* _internal_mutable_fail_reason();
  public:

  // string imp_uid = 26;
  void clear_imp_uid();
  const std::string& imp_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imp_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imp_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_imp_uid();
  void set_allocated_imp_uid(std::string* imp_uid);
  private:
  const std::string& _internal_imp_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imp_uid(const std::string& value);
  std::string* _internal_mutable_imp_uid();
  public:

  // string merchant_uid = 27;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merchant_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merchant_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // string order_name = 28;
  void clear_order_name();
  const std::string& order_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_order_name();
  void set_allocated_order_name(std::string* order_name);
  private:
  const std::string& _internal_order_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_name(const std::string& value);
  std::string* _internal_mutable_order_name();
  public:

  // string pay_method = 30;
  void clear_pay_method();
  const std::string& pay_method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pay_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pay_method();
  PROTOBUF_MUST_USE_RESULT std::string* release_pay_method();
  void set_allocated_pay_method(std::string* pay_method);
  private:
  const std::string& _internal_pay_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pay_method(const std::string& value);
  std::string* _internal_mutable_pay_method();
  public:

  // string pg_id = 31;
  void clear_pg_id();
  const std::string& pg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pg_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_pg_id();
  void set_allocated_pg_id(std::string* pg_id);
  private:
  const std::string& _internal_pg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pg_id(const std::string& value);
  std::string* _internal_mutable_pg_id();
  public:

  // string pg_provider = 32;
  void clear_pg_provider();
  const std::string& pg_provider() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pg_provider(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pg_provider();
  PROTOBUF_MUST_USE_RESULT std::string* release_pg_provider();
  void set_allocated_pg_provider(std::string* pg_provider);
  private:
  const std::string& _internal_pg_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pg_provider(const std::string& value);
  std::string* _internal_mutable_pg_provider();
  public:

  // string pg_tid = 33;
  void clear_pg_tid();
  const std::string& pg_tid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pg_tid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pg_tid();
  PROTOBUF_MUST_USE_RESULT std::string* release_pg_tid();
  void set_allocated_pg_tid(std::string* pg_tid);
  private:
  const std::string& _internal_pg_tid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pg_tid(const std::string& value);
  std::string* _internal_mutable_pg_tid();
  public:

  // string receipt_url = 34;
  void clear_receipt_url();
  const std::string& receipt_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receipt_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receipt_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_receipt_url();
  void set_allocated_receipt_url(std::string* receipt_url);
  private:
  const std::string& _internal_receipt_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receipt_url(const std::string& value);
  std::string* _internal_mutable_receipt_url();
  public:

  // string status = 36;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string user_agent = 37;
  void clear_user_agent();
  const std::string& user_agent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_agent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_agent();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_agent();
  void set_allocated_user_agent(std::string* user_agent);
  private:
  const std::string& _internal_user_agent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_agent(const std::string& value);
  std::string* _internal_mutable_user_agent();
  public:

  // int32 cancelled_at = 12;
  void clear_cancelled_at();
  ::PROTOBUF_NAMESPACE_ID::int32 cancelled_at() const;
  void set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cancelled_at() const;
  void _internal_set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 card_installment = 16;
  void clear_card_installment();
  ::PROTOBUF_NAMESPACE_ID::int32 card_installment() const;
  void set_card_installment(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_installment() const;
  void _internal_set_card_installment(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 card_type = 17;
  void clear_card_type();
  ::PROTOBUF_NAMESPACE_ID::int32 card_type() const;
  void set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_type() const;
  void _internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool cash_receipt_issued = 18;
  void clear_cash_receipt_issued();
  bool cash_receipt_issued() const;
  void set_cash_receipt_issued(bool value);
  private:
  bool _internal_cash_receipt_issued() const;
  void _internal_set_cash_receipt_issued(bool value);
  public:

  // int32 failed_at = 25;
  void clear_failed_at();
  ::PROTOBUF_NAMESPACE_ID::int32 failed_at() const;
  void set_failed_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_failed_at() const;
  void _internal_set_failed_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 paid_at = 29;
  void clear_paid_at();
  ::PROTOBUF_NAMESPACE_ID::int32 paid_at() const;
  void set_paid_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_paid_at() const;
  void _internal_set_paid_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 started_at = 35;
  void clear_started_at();
  ::PROTOBUF_NAMESPACE_ID::int32 started_at() const;
  void set_started_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_started_at() const;
  void _internal_set_started_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_v2.PayByRegisteredCardData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::card_v2::CancelHistory > cancel_history_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cancel_receipt_urls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apply_num_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_postcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cancel_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cancel_reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bin_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_uid_usage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fail_reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imp_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pay_method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_provider_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_tid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receipt_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_agent_;
  ::PROTOBUF_NAMESPACE_ID::int32 cancelled_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_installment_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_type_;
  bool cash_receipt_issued_;
  ::PROTOBUF_NAMESPACE_ID::int32 failed_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 paid_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 started_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2fpayments_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class PayByRegisteredCardResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_v2.PayByRegisteredCardResponse) */ {
 public:
  inline PayByRegisteredCardResponse() : PayByRegisteredCardResponse(nullptr) {}
  ~PayByRegisteredCardResponse() override;
  explicit constexpr PayByRegisteredCardResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PayByRegisteredCardResponse(const PayByRegisteredCardResponse& from);
  PayByRegisteredCardResponse(PayByRegisteredCardResponse&& from) noexcept
    : PayByRegisteredCardResponse() {
    *this = ::std::move(from);
  }

  inline PayByRegisteredCardResponse& operator=(const PayByRegisteredCardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayByRegisteredCardResponse& operator=(PayByRegisteredCardResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayByRegisteredCardResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayByRegisteredCardResponse* internal_default_instance() {
    return reinterpret_cast<const PayByRegisteredCardResponse*>(
               &_PayByRegisteredCardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PayByRegisteredCardResponse& a, PayByRegisteredCardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PayByRegisteredCardResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayByRegisteredCardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PayByRegisteredCardResponse* New() const final {
    return new PayByRegisteredCardResponse();
  }

  PayByRegisteredCardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PayByRegisteredCardResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PayByRegisteredCardResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PayByRegisteredCardResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayByRegisteredCardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_v2.PayByRegisteredCardResponse";
  }
  protected:
  explicit PayByRegisteredCardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .card_v2.PayByRegisteredCardData response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::card_v2::PayByRegisteredCardData& response() const;
  PROTOBUF_MUST_USE_RESULT ::card_v2::PayByRegisteredCardData* release_response();
  ::card_v2::PayByRegisteredCardData* mutable_response();
  void set_allocated_response(::card_v2::PayByRegisteredCardData* response);
  private:
  const ::card_v2::PayByRegisteredCardData& _internal_response() const;
  ::card_v2::PayByRegisteredCardData* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::card_v2::PayByRegisteredCardData* response);
  ::card_v2::PayByRegisteredCardData* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_v2.PayByRegisteredCardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::card_v2::PayByRegisteredCardData* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2fpayments_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class CancelHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_v2.CancelHistory) */ {
 public:
  inline CancelHistory() : CancelHistory(nullptr) {}
  ~CancelHistory() override;
  explicit constexpr CancelHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelHistory(const CancelHistory& from);
  CancelHistory(CancelHistory&& from) noexcept
    : CancelHistory() {
    *this = ::std::move(from);
  }

  inline CancelHistory& operator=(const CancelHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelHistory& operator=(CancelHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelHistory* internal_default_instance() {
    return reinterpret_cast<const CancelHistory*>(
               &_CancelHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CancelHistory& a, CancelHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelHistory* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelHistory* New() const final {
    return new CancelHistory();
  }

  CancelHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelHistory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_v2.CancelHistory";
  }
  protected:
  explicit CancelHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPgTidFieldNumber = 1,
    kAmountFieldNumber = 2,
    kReasonFieldNumber = 4,
    kReceiptUrlFieldNumber = 5,
    kCancelledAtFieldNumber = 3,
  };
  // string pg_tid = 1;
  void clear_pg_tid();
  const std::string& pg_tid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pg_tid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pg_tid();
  PROTOBUF_MUST_USE_RESULT std::string* release_pg_tid();
  void set_allocated_pg_tid(std::string* pg_tid);
  private:
  const std::string& _internal_pg_tid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pg_tid(const std::string& value);
  std::string* _internal_mutable_pg_tid();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_MUST_USE_RESULT std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string reason = 4;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_MUST_USE_RESULT std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string receipt_url = 5;
  void clear_receipt_url();
  const std::string& receipt_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receipt_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receipt_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_receipt_url();
  void set_allocated_receipt_url(std::string* receipt_url);
  private:
  const std::string& _internal_receipt_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receipt_url(const std::string& value);
  std::string* _internal_mutable_receipt_url();
  public:

  // int32 cancelled_at = 3;
  void clear_cancelled_at();
  ::PROTOBUF_NAMESPACE_ID::int32 cancelled_at() const;
  void set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cancelled_at() const;
  void _internal_set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_v2.CancelHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_tid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receipt_url_;
  ::PROTOBUF_NAMESPACE_ID::int32 cancelled_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2fpayments_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class CancelCardPaymentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_v2.CancelCardPaymentRequest) */ {
 public:
  inline CancelCardPaymentRequest() : CancelCardPaymentRequest(nullptr) {}
  ~CancelCardPaymentRequest() override;
  explicit constexpr CancelCardPaymentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelCardPaymentRequest(const CancelCardPaymentRequest& from);
  CancelCardPaymentRequest(CancelCardPaymentRequest&& from) noexcept
    : CancelCardPaymentRequest() {
    *this = ::std::move(from);
  }

  inline CancelCardPaymentRequest& operator=(const CancelCardPaymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelCardPaymentRequest& operator=(CancelCardPaymentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelCardPaymentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelCardPaymentRequest* internal_default_instance() {
    return reinterpret_cast<const CancelCardPaymentRequest*>(
               &_CancelCardPaymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CancelCardPaymentRequest& a, CancelCardPaymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelCardPaymentRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelCardPaymentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelCardPaymentRequest* New() const final {
    return new CancelCardPaymentRequest();
  }

  CancelCardPaymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelCardPaymentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelCardPaymentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelCardPaymentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelCardPaymentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_v2.CancelCardPaymentRequest";
  }
  protected:
  explicit CancelCardPaymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpUidFieldNumber = 1,
    kAmountFieldNumber = 2,
    kMerchantUidFieldNumber = 3,
    kTaxFreeAmountFieldNumber = 4,
    kReasonFieldNumber = 5,
  };
  // string imp_uid = 1;
  void clear_imp_uid();
  const std::string& imp_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imp_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imp_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_imp_uid();
  void set_allocated_imp_uid(std::string* imp_uid);
  private:
  const std::string& _internal_imp_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imp_uid(const std::string& value);
  std::string* _internal_mutable_imp_uid();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_MUST_USE_RESULT std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string merchant_uid = 3;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merchant_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merchant_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // string tax_free_amount = 4;
  void clear_tax_free_amount();
  const std::string& tax_free_amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tax_free_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tax_free_amount();
  PROTOBUF_MUST_USE_RESULT std::string* release_tax_free_amount();
  void set_allocated_tax_free_amount(std::string* tax_free_amount);
  private:
  const std::string& _internal_tax_free_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tax_free_amount(const std::string& value);
  std::string* _internal_mutable_tax_free_amount();
  public:

  // string reason = 5;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_MUST_USE_RESULT std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // @@protoc_insertion_point(class_scope:card_v2.CancelCardPaymentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imp_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tax_free_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2fpayments_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class CancelCardPaymenttResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_v2.CancelCardPaymenttResponse) */ {
 public:
  inline CancelCardPaymenttResponse() : CancelCardPaymenttResponse(nullptr) {}
  ~CancelCardPaymenttResponse() override;
  explicit constexpr CancelCardPaymenttResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelCardPaymenttResponse(const CancelCardPaymenttResponse& from);
  CancelCardPaymenttResponse(CancelCardPaymenttResponse&& from) noexcept
    : CancelCardPaymenttResponse() {
    *this = ::std::move(from);
  }

  inline CancelCardPaymenttResponse& operator=(const CancelCardPaymenttResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelCardPaymenttResponse& operator=(CancelCardPaymenttResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelCardPaymenttResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelCardPaymenttResponse* internal_default_instance() {
    return reinterpret_cast<const CancelCardPaymenttResponse*>(
               &_CancelCardPaymenttResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CancelCardPaymenttResponse& a, CancelCardPaymenttResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelCardPaymenttResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelCardPaymenttResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelCardPaymenttResponse* New() const final {
    return new CancelCardPaymenttResponse();
  }

  CancelCardPaymenttResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelCardPaymenttResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelCardPaymenttResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelCardPaymenttResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelCardPaymenttResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_v2.CancelCardPaymenttResponse";
  }
  protected:
  explicit CancelCardPaymenttResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .card_v2.PayByRegisteredCardData response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::card_v2::PayByRegisteredCardData& response() const;
  PROTOBUF_MUST_USE_RESULT ::card_v2::PayByRegisteredCardData* release_response();
  ::card_v2::PayByRegisteredCardData* mutable_response();
  void set_allocated_response(::card_v2::PayByRegisteredCardData* response);
  private:
  const ::card_v2::PayByRegisteredCardData& _internal_response() const;
  ::card_v2::PayByRegisteredCardData* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::card_v2::PayByRegisteredCardData* response);
  ::card_v2::PayByRegisteredCardData* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_v2.CancelCardPaymenttResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::card_v2::PayByRegisteredCardData* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2fpayments_2fcard_2fcard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CardRegisterRequest

// string card_uid = 1;
inline void CardRegisterRequest::clear_card_uid() {
  card_uid_.ClearToEmpty();
}
inline const std::string& CardRegisterRequest::card_uid() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterRequest.card_uid)
  return _internal_card_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterRequest::set_card_uid(ArgT0&& arg0, ArgT... args) {
 
 card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterRequest.card_uid)
}
inline std::string* CardRegisterRequest::mutable_card_uid() {
  std::string* _s = _internal_mutable_card_uid();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterRequest.card_uid)
  return _s;
}
inline const std::string& CardRegisterRequest::_internal_card_uid() const {
  return card_uid_.Get();
}
inline void CardRegisterRequest::_internal_set_card_uid(const std::string& value) {
  
  card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::_internal_mutable_card_uid() {
  
  return card_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::release_card_uid() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterRequest.card_uid)
  return card_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterRequest::set_allocated_card_uid(std::string* card_uid) {
  if (card_uid != nullptr) {
    
  } else {
    
  }
  card_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterRequest.card_uid)
}

// string card_number = 2;
inline void CardRegisterRequest::clear_card_number() {
  card_number_.ClearToEmpty();
}
inline const std::string& CardRegisterRequest::card_number() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterRequest.card_number)
  return _internal_card_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterRequest::set_card_number(ArgT0&& arg0, ArgT... args) {
 
 card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterRequest.card_number)
}
inline std::string* CardRegisterRequest::mutable_card_number() {
  std::string* _s = _internal_mutable_card_number();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterRequest.card_number)
  return _s;
}
inline const std::string& CardRegisterRequest::_internal_card_number() const {
  return card_number_.Get();
}
inline void CardRegisterRequest::_internal_set_card_number(const std::string& value) {
  
  card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::_internal_mutable_card_number() {
  
  return card_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::release_card_number() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterRequest.card_number)
  return card_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterRequest::set_allocated_card_number(std::string* card_number) {
  if (card_number != nullptr) {
    
  } else {
    
  }
  card_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterRequest.card_number)
}

// string expiry = 3;
inline void CardRegisterRequest::clear_expiry() {
  expiry_.ClearToEmpty();
}
inline const std::string& CardRegisterRequest::expiry() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterRequest.expiry)
  return _internal_expiry();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterRequest::set_expiry(ArgT0&& arg0, ArgT... args) {
 
 expiry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterRequest.expiry)
}
inline std::string* CardRegisterRequest::mutable_expiry() {
  std::string* _s = _internal_mutable_expiry();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterRequest.expiry)
  return _s;
}
inline const std::string& CardRegisterRequest::_internal_expiry() const {
  return expiry_.Get();
}
inline void CardRegisterRequest::_internal_set_expiry(const std::string& value) {
  
  expiry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::_internal_mutable_expiry() {
  
  return expiry_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::release_expiry() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterRequest.expiry)
  return expiry_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterRequest::set_allocated_expiry(std::string* expiry) {
  if (expiry != nullptr) {
    
  } else {
    
  }
  expiry_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expiry,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterRequest.expiry)
}

// string birth = 4;
inline void CardRegisterRequest::clear_birth() {
  birth_.ClearToEmpty();
}
inline const std::string& CardRegisterRequest::birth() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterRequest.birth)
  return _internal_birth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterRequest::set_birth(ArgT0&& arg0, ArgT... args) {
 
 birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterRequest.birth)
}
inline std::string* CardRegisterRequest::mutable_birth() {
  std::string* _s = _internal_mutable_birth();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterRequest.birth)
  return _s;
}
inline const std::string& CardRegisterRequest::_internal_birth() const {
  return birth_.Get();
}
inline void CardRegisterRequest::_internal_set_birth(const std::string& value) {
  
  birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::_internal_mutable_birth() {
  
  return birth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::release_birth() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterRequest.birth)
  return birth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterRequest::set_allocated_birth(std::string* birth) {
  if (birth != nullptr) {
    
  } else {
    
  }
  birth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), birth,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterRequest.birth)
}

// string pwd_2digit = 5;
inline void CardRegisterRequest::clear_pwd_2digit() {
  pwd_2digit_.ClearToEmpty();
}
inline const std::string& CardRegisterRequest::pwd_2digit() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterRequest.pwd_2digit)
  return _internal_pwd_2digit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterRequest::set_pwd_2digit(ArgT0&& arg0, ArgT... args) {
 
 pwd_2digit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterRequest.pwd_2digit)
}
inline std::string* CardRegisterRequest::mutable_pwd_2digit() {
  std::string* _s = _internal_mutable_pwd_2digit();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterRequest.pwd_2digit)
  return _s;
}
inline const std::string& CardRegisterRequest::_internal_pwd_2digit() const {
  return pwd_2digit_.Get();
}
inline void CardRegisterRequest::_internal_set_pwd_2digit(const std::string& value) {
  
  pwd_2digit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::_internal_mutable_pwd_2digit() {
  
  return pwd_2digit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::release_pwd_2digit() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterRequest.pwd_2digit)
  return pwd_2digit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterRequest::set_allocated_pwd_2digit(std::string* pwd_2digit) {
  if (pwd_2digit != nullptr) {
    
  } else {
    
  }
  pwd_2digit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd_2digit,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterRequest.pwd_2digit)
}

// string customer_name = 6;
inline void CardRegisterRequest::clear_customer_name() {
  customer_name_.ClearToEmpty();
}
inline const std::string& CardRegisterRequest::customer_name() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterRequest.customer_name)
  return _internal_customer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterRequest::set_customer_name(ArgT0&& arg0, ArgT... args) {
 
 customer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterRequest.customer_name)
}
inline std::string* CardRegisterRequest::mutable_customer_name() {
  std::string* _s = _internal_mutable_customer_name();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterRequest.customer_name)
  return _s;
}
inline const std::string& CardRegisterRequest::_internal_customer_name() const {
  return customer_name_.Get();
}
inline void CardRegisterRequest::_internal_set_customer_name(const std::string& value) {
  
  customer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::_internal_mutable_customer_name() {
  
  return customer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::release_customer_name() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterRequest.customer_name)
  return customer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterRequest::set_allocated_customer_name(std::string* customer_name) {
  if (customer_name != nullptr) {
    
  } else {
    
  }
  customer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterRequest.customer_name)
}

// string customer_tel = 7;
inline void CardRegisterRequest::clear_customer_tel() {
  customer_tel_.ClearToEmpty();
}
inline const std::string& CardRegisterRequest::customer_tel() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterRequest.customer_tel)
  return _internal_customer_tel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterRequest::set_customer_tel(ArgT0&& arg0, ArgT... args) {
 
 customer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterRequest.customer_tel)
}
inline std::string* CardRegisterRequest::mutable_customer_tel() {
  std::string* _s = _internal_mutable_customer_tel();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterRequest.customer_tel)
  return _s;
}
inline const std::string& CardRegisterRequest::_internal_customer_tel() const {
  return customer_tel_.Get();
}
inline void CardRegisterRequest::_internal_set_customer_tel(const std::string& value) {
  
  customer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::_internal_mutable_customer_tel() {
  
  return customer_tel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::release_customer_tel() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterRequest.customer_tel)
  return customer_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterRequest::set_allocated_customer_tel(std::string* customer_tel) {
  if (customer_tel != nullptr) {
    
  } else {
    
  }
  customer_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_tel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterRequest.customer_tel)
}

// string customer_email = 8;
inline void CardRegisterRequest::clear_customer_email() {
  customer_email_.ClearToEmpty();
}
inline const std::string& CardRegisterRequest::customer_email() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterRequest.customer_email)
  return _internal_customer_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterRequest::set_customer_email(ArgT0&& arg0, ArgT... args) {
 
 customer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterRequest.customer_email)
}
inline std::string* CardRegisterRequest::mutable_customer_email() {
  std::string* _s = _internal_mutable_customer_email();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterRequest.customer_email)
  return _s;
}
inline const std::string& CardRegisterRequest::_internal_customer_email() const {
  return customer_email_.Get();
}
inline void CardRegisterRequest::_internal_set_customer_email(const std::string& value) {
  
  customer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::_internal_mutable_customer_email() {
  
  return customer_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::release_customer_email() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterRequest.customer_email)
  return customer_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterRequest::set_allocated_customer_email(std::string* customer_email) {
  if (customer_email != nullptr) {
    
  } else {
    
  }
  customer_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterRequest.customer_email)
}

// string customer_addr = 9;
inline void CardRegisterRequest::clear_customer_addr() {
  customer_addr_.ClearToEmpty();
}
inline const std::string& CardRegisterRequest::customer_addr() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterRequest.customer_addr)
  return _internal_customer_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterRequest::set_customer_addr(ArgT0&& arg0, ArgT... args) {
 
 customer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterRequest.customer_addr)
}
inline std::string* CardRegisterRequest::mutable_customer_addr() {
  std::string* _s = _internal_mutable_customer_addr();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterRequest.customer_addr)
  return _s;
}
inline const std::string& CardRegisterRequest::_internal_customer_addr() const {
  return customer_addr_.Get();
}
inline void CardRegisterRequest::_internal_set_customer_addr(const std::string& value) {
  
  customer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::_internal_mutable_customer_addr() {
  
  return customer_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::release_customer_addr() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterRequest.customer_addr)
  return customer_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterRequest::set_allocated_customer_addr(std::string* customer_addr) {
  if (customer_addr != nullptr) {
    
  } else {
    
  }
  customer_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_addr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterRequest.customer_addr)
}

// string customer_postcode = 10;
inline void CardRegisterRequest::clear_customer_postcode() {
  customer_postcode_.ClearToEmpty();
}
inline const std::string& CardRegisterRequest::customer_postcode() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterRequest.customer_postcode)
  return _internal_customer_postcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterRequest::set_customer_postcode(ArgT0&& arg0, ArgT... args) {
 
 customer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterRequest.customer_postcode)
}
inline std::string* CardRegisterRequest::mutable_customer_postcode() {
  std::string* _s = _internal_mutable_customer_postcode();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterRequest.customer_postcode)
  return _s;
}
inline const std::string& CardRegisterRequest::_internal_customer_postcode() const {
  return customer_postcode_.Get();
}
inline void CardRegisterRequest::_internal_set_customer_postcode(const std::string& value) {
  
  customer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::_internal_mutable_customer_postcode() {
  
  return customer_postcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::release_customer_postcode() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterRequest.customer_postcode)
  return customer_postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterRequest::set_allocated_customer_postcode(std::string* customer_postcode) {
  if (customer_postcode != nullptr) {
    
  } else {
    
  }
  customer_postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_postcode,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterRequest.customer_postcode)
}

// string pg = 11;
inline void CardRegisterRequest::clear_pg() {
  pg_.ClearToEmpty();
}
inline const std::string& CardRegisterRequest::pg() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterRequest.pg)
  return _internal_pg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterRequest::set_pg(ArgT0&& arg0, ArgT... args) {
 
 pg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterRequest.pg)
}
inline std::string* CardRegisterRequest::mutable_pg() {
  std::string* _s = _internal_mutable_pg();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterRequest.pg)
  return _s;
}
inline const std::string& CardRegisterRequest::_internal_pg() const {
  return pg_.Get();
}
inline void CardRegisterRequest::_internal_set_pg(const std::string& value) {
  
  pg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::_internal_mutable_pg() {
  
  return pg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterRequest::release_pg() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterRequest.pg)
  return pg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterRequest::set_allocated_pg(std::string* pg) {
  if (pg != nullptr) {
    
  } else {
    
  }
  pg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterRequest.pg)
}

// -------------------------------------------------------------------

// CardRegisterResultData

// string card_uid = 1;
inline void CardRegisterResultData::clear_card_uid() {
  card_uid_.ClearToEmpty();
}
inline const std::string& CardRegisterResultData::card_uid() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResultData.card_uid)
  return _internal_card_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterResultData::set_card_uid(ArgT0&& arg0, ArgT... args) {
 
 card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResultData.card_uid)
}
inline std::string* CardRegisterResultData::mutable_card_uid() {
  std::string* _s = _internal_mutable_card_uid();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterResultData.card_uid)
  return _s;
}
inline const std::string& CardRegisterResultData::_internal_card_uid() const {
  return card_uid_.Get();
}
inline void CardRegisterResultData::_internal_set_card_uid(const std::string& value) {
  
  card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::_internal_mutable_card_uid() {
  
  return card_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::release_card_uid() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterResultData.card_uid)
  return card_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterResultData::set_allocated_card_uid(std::string* card_uid) {
  if (card_uid != nullptr) {
    
  } else {
    
  }
  card_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterResultData.card_uid)
}

// string card_name = 2;
inline void CardRegisterResultData::clear_card_name() {
  card_name_.ClearToEmpty();
}
inline const std::string& CardRegisterResultData::card_name() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResultData.card_name)
  return _internal_card_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterResultData::set_card_name(ArgT0&& arg0, ArgT... args) {
 
 card_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResultData.card_name)
}
inline std::string* CardRegisterResultData::mutable_card_name() {
  std::string* _s = _internal_mutable_card_name();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterResultData.card_name)
  return _s;
}
inline const std::string& CardRegisterResultData::_internal_card_name() const {
  return card_name_.Get();
}
inline void CardRegisterResultData::_internal_set_card_name(const std::string& value) {
  
  card_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::_internal_mutable_card_name() {
  
  return card_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::release_card_name() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterResultData.card_name)
  return card_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterResultData::set_allocated_card_name(std::string* card_name) {
  if (card_name != nullptr) {
    
  } else {
    
  }
  card_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterResultData.card_name)
}

// string card_code = 3;
inline void CardRegisterResultData::clear_card_code() {
  card_code_.ClearToEmpty();
}
inline const std::string& CardRegisterResultData::card_code() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResultData.card_code)
  return _internal_card_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterResultData::set_card_code(ArgT0&& arg0, ArgT... args) {
 
 card_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResultData.card_code)
}
inline std::string* CardRegisterResultData::mutable_card_code() {
  std::string* _s = _internal_mutable_card_code();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterResultData.card_code)
  return _s;
}
inline const std::string& CardRegisterResultData::_internal_card_code() const {
  return card_code_.Get();
}
inline void CardRegisterResultData::_internal_set_card_code(const std::string& value) {
  
  card_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::_internal_mutable_card_code() {
  
  return card_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::release_card_code() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterResultData.card_code)
  return card_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterResultData::set_allocated_card_code(std::string* card_code) {
  if (card_code != nullptr) {
    
  } else {
    
  }
  card_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterResultData.card_code)
}

// string bin_numbrer = 4;
inline void CardRegisterResultData::clear_bin_numbrer() {
  bin_numbrer_.ClearToEmpty();
}
inline const std::string& CardRegisterResultData::bin_numbrer() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResultData.bin_numbrer)
  return _internal_bin_numbrer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterResultData::set_bin_numbrer(ArgT0&& arg0, ArgT... args) {
 
 bin_numbrer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResultData.bin_numbrer)
}
inline std::string* CardRegisterResultData::mutable_bin_numbrer() {
  std::string* _s = _internal_mutable_bin_numbrer();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterResultData.bin_numbrer)
  return _s;
}
inline const std::string& CardRegisterResultData::_internal_bin_numbrer() const {
  return bin_numbrer_.Get();
}
inline void CardRegisterResultData::_internal_set_bin_numbrer(const std::string& value) {
  
  bin_numbrer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::_internal_mutable_bin_numbrer() {
  
  return bin_numbrer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::release_bin_numbrer() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterResultData.bin_numbrer)
  return bin_numbrer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterResultData::set_allocated_bin_numbrer(std::string* bin_numbrer) {
  if (bin_numbrer != nullptr) {
    
  } else {
    
  }
  bin_numbrer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bin_numbrer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterResultData.bin_numbrer)
}

// int32 card_type = 5;
inline void CardRegisterResultData::clear_card_type() {
  card_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardRegisterResultData::_internal_card_type() const {
  return card_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardRegisterResultData::card_type() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResultData.card_type)
  return _internal_card_type();
}
inline void CardRegisterResultData::_internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_type_ = value;
}
inline void CardRegisterResultData::set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_type(value);
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResultData.card_type)
}

// string customer_name = 6;
inline void CardRegisterResultData::clear_customer_name() {
  customer_name_.ClearToEmpty();
}
inline const std::string& CardRegisterResultData::customer_name() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResultData.customer_name)
  return _internal_customer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterResultData::set_customer_name(ArgT0&& arg0, ArgT... args) {
 
 customer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResultData.customer_name)
}
inline std::string* CardRegisterResultData::mutable_customer_name() {
  std::string* _s = _internal_mutable_customer_name();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterResultData.customer_name)
  return _s;
}
inline const std::string& CardRegisterResultData::_internal_customer_name() const {
  return customer_name_.Get();
}
inline void CardRegisterResultData::_internal_set_customer_name(const std::string& value) {
  
  customer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::_internal_mutable_customer_name() {
  
  return customer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::release_customer_name() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterResultData.customer_name)
  return customer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterResultData::set_allocated_customer_name(std::string* customer_name) {
  if (customer_name != nullptr) {
    
  } else {
    
  }
  customer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterResultData.customer_name)
}

// string customer_tel = 7;
inline void CardRegisterResultData::clear_customer_tel() {
  customer_tel_.ClearToEmpty();
}
inline const std::string& CardRegisterResultData::customer_tel() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResultData.customer_tel)
  return _internal_customer_tel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterResultData::set_customer_tel(ArgT0&& arg0, ArgT... args) {
 
 customer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResultData.customer_tel)
}
inline std::string* CardRegisterResultData::mutable_customer_tel() {
  std::string* _s = _internal_mutable_customer_tel();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterResultData.customer_tel)
  return _s;
}
inline const std::string& CardRegisterResultData::_internal_customer_tel() const {
  return customer_tel_.Get();
}
inline void CardRegisterResultData::_internal_set_customer_tel(const std::string& value) {
  
  customer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::_internal_mutable_customer_tel() {
  
  return customer_tel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::release_customer_tel() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterResultData.customer_tel)
  return customer_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterResultData::set_allocated_customer_tel(std::string* customer_tel) {
  if (customer_tel != nullptr) {
    
  } else {
    
  }
  customer_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_tel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterResultData.customer_tel)
}

// string customer_email = 8;
inline void CardRegisterResultData::clear_customer_email() {
  customer_email_.ClearToEmpty();
}
inline const std::string& CardRegisterResultData::customer_email() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResultData.customer_email)
  return _internal_customer_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterResultData::set_customer_email(ArgT0&& arg0, ArgT... args) {
 
 customer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResultData.customer_email)
}
inline std::string* CardRegisterResultData::mutable_customer_email() {
  std::string* _s = _internal_mutable_customer_email();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterResultData.customer_email)
  return _s;
}
inline const std::string& CardRegisterResultData::_internal_customer_email() const {
  return customer_email_.Get();
}
inline void CardRegisterResultData::_internal_set_customer_email(const std::string& value) {
  
  customer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::_internal_mutable_customer_email() {
  
  return customer_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::release_customer_email() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterResultData.customer_email)
  return customer_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterResultData::set_allocated_customer_email(std::string* customer_email) {
  if (customer_email != nullptr) {
    
  } else {
    
  }
  customer_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterResultData.customer_email)
}

// string customer_addr = 9;
inline void CardRegisterResultData::clear_customer_addr() {
  customer_addr_.ClearToEmpty();
}
inline const std::string& CardRegisterResultData::customer_addr() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResultData.customer_addr)
  return _internal_customer_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterResultData::set_customer_addr(ArgT0&& arg0, ArgT... args) {
 
 customer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResultData.customer_addr)
}
inline std::string* CardRegisterResultData::mutable_customer_addr() {
  std::string* _s = _internal_mutable_customer_addr();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterResultData.customer_addr)
  return _s;
}
inline const std::string& CardRegisterResultData::_internal_customer_addr() const {
  return customer_addr_.Get();
}
inline void CardRegisterResultData::_internal_set_customer_addr(const std::string& value) {
  
  customer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::_internal_mutable_customer_addr() {
  
  return customer_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::release_customer_addr() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterResultData.customer_addr)
  return customer_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterResultData::set_allocated_customer_addr(std::string* customer_addr) {
  if (customer_addr != nullptr) {
    
  } else {
    
  }
  customer_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_addr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterResultData.customer_addr)
}

// string customer_postcode = 10;
inline void CardRegisterResultData::clear_customer_postcode() {
  customer_postcode_.ClearToEmpty();
}
inline const std::string& CardRegisterResultData::customer_postcode() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResultData.customer_postcode)
  return _internal_customer_postcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterResultData::set_customer_postcode(ArgT0&& arg0, ArgT... args) {
 
 customer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResultData.customer_postcode)
}
inline std::string* CardRegisterResultData::mutable_customer_postcode() {
  std::string* _s = _internal_mutable_customer_postcode();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterResultData.customer_postcode)
  return _s;
}
inline const std::string& CardRegisterResultData::_internal_customer_postcode() const {
  return customer_postcode_.Get();
}
inline void CardRegisterResultData::_internal_set_customer_postcode(const std::string& value) {
  
  customer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::_internal_mutable_customer_postcode() {
  
  return customer_postcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::release_customer_postcode() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterResultData.customer_postcode)
  return customer_postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterResultData::set_allocated_customer_postcode(std::string* customer_postcode) {
  if (customer_postcode != nullptr) {
    
  } else {
    
  }
  customer_postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_postcode,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterResultData.customer_postcode)
}

// int32 inserted = 11;
inline void CardRegisterResultData::clear_inserted() {
  inserted_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardRegisterResultData::_internal_inserted() const {
  return inserted_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardRegisterResultData::inserted() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResultData.inserted)
  return _internal_inserted();
}
inline void CardRegisterResultData::_internal_set_inserted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inserted_ = value;
}
inline void CardRegisterResultData::set_inserted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inserted(value);
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResultData.inserted)
}

// int32 updated = 12;
inline void CardRegisterResultData::clear_updated() {
  updated_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardRegisterResultData::_internal_updated() const {
  return updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardRegisterResultData::updated() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResultData.updated)
  return _internal_updated();
}
inline void CardRegisterResultData::_internal_set_updated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  updated_ = value;
}
inline void CardRegisterResultData::set_updated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_updated(value);
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResultData.updated)
}

// string pg_provider = 13;
inline void CardRegisterResultData::clear_pg_provider() {
  pg_provider_.ClearToEmpty();
}
inline const std::string& CardRegisterResultData::pg_provider() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResultData.pg_provider)
  return _internal_pg_provider();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterResultData::set_pg_provider(ArgT0&& arg0, ArgT... args) {
 
 pg_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResultData.pg_provider)
}
inline std::string* CardRegisterResultData::mutable_pg_provider() {
  std::string* _s = _internal_mutable_pg_provider();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterResultData.pg_provider)
  return _s;
}
inline const std::string& CardRegisterResultData::_internal_pg_provider() const {
  return pg_provider_.Get();
}
inline void CardRegisterResultData::_internal_set_pg_provider(const std::string& value) {
  
  pg_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::_internal_mutable_pg_provider() {
  
  return pg_provider_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::release_pg_provider() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterResultData.pg_provider)
  return pg_provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterResultData::set_allocated_pg_provider(std::string* pg_provider) {
  if (pg_provider != nullptr) {
    
  } else {
    
  }
  pg_provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg_provider,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterResultData.pg_provider)
}

// string pg_id = 14;
inline void CardRegisterResultData::clear_pg_id() {
  pg_id_.ClearToEmpty();
}
inline const std::string& CardRegisterResultData::pg_id() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResultData.pg_id)
  return _internal_pg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterResultData::set_pg_id(ArgT0&& arg0, ArgT... args) {
 
 pg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResultData.pg_id)
}
inline std::string* CardRegisterResultData::mutable_pg_id() {
  std::string* _s = _internal_mutable_pg_id();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterResultData.pg_id)
  return _s;
}
inline const std::string& CardRegisterResultData::_internal_pg_id() const {
  return pg_id_.Get();
}
inline void CardRegisterResultData::_internal_set_pg_id(const std::string& value) {
  
  pg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::_internal_mutable_pg_id() {
  
  return pg_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterResultData::release_pg_id() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterResultData.pg_id)
  return pg_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterResultData::set_allocated_pg_id(std::string* pg_id) {
  if (pg_id != nullptr) {
    
  } else {
    
  }
  pg_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterResultData.pg_id)
}

// -------------------------------------------------------------------

// CardRegisterResponse

// int32 code = 1;
inline void CardRegisterResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardRegisterResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardRegisterResponse::code() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResponse.code)
  return _internal_code();
}
inline void CardRegisterResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CardRegisterResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResponse.code)
}

// string message = 2;
inline void CardRegisterResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CardRegisterResponse::message() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardRegisterResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CardRegisterResponse.message)
}
inline std::string* CardRegisterResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterResponse.message)
  return _s;
}
inline const std::string& CardRegisterResponse::_internal_message() const {
  return message_.Get();
}
inline void CardRegisterResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CardRegisterResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CardRegisterResponse::release_message() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CardRegisterResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterResponse.message)
}

// .card_v2.CardRegisterResultData response = 3;
inline bool CardRegisterResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool CardRegisterResponse::has_response() const {
  return _internal_has_response();
}
inline void CardRegisterResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::card_v2::CardRegisterResultData& CardRegisterResponse::_internal_response() const {
  const ::card_v2::CardRegisterResultData* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::card_v2::CardRegisterResultData&>(
      ::card_v2::_CardRegisterResultData_default_instance_);
}
inline const ::card_v2::CardRegisterResultData& CardRegisterResponse::response() const {
  // @@protoc_insertion_point(field_get:card_v2.CardRegisterResponse.response)
  return _internal_response();
}
inline void CardRegisterResponse::unsafe_arena_set_allocated_response(
    ::card_v2::CardRegisterResultData* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:card_v2.CardRegisterResponse.response)
}
inline ::card_v2::CardRegisterResultData* CardRegisterResponse::release_response() {
  
  ::card_v2::CardRegisterResultData* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::card_v2::CardRegisterResultData* CardRegisterResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:card_v2.CardRegisterResponse.response)
  
  ::card_v2::CardRegisterResultData* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::card_v2::CardRegisterResultData* CardRegisterResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::card_v2::CardRegisterResultData>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::card_v2::CardRegisterResultData* CardRegisterResponse::mutable_response() {
  ::card_v2::CardRegisterResultData* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:card_v2.CardRegisterResponse.response)
  return _msg;
}
inline void CardRegisterResponse::set_allocated_response(::card_v2::CardRegisterResultData* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::card_v2::CardRegisterResultData>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:card_v2.CardRegisterResponse.response)
}

// -------------------------------------------------------------------

// GetCardInfoRequest

// string card_uid = 1;
inline void GetCardInfoRequest::clear_card_uid() {
  card_uid_.ClearToEmpty();
}
inline const std::string& GetCardInfoRequest::card_uid() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoRequest.card_uid)
  return _internal_card_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCardInfoRequest::set_card_uid(ArgT0&& arg0, ArgT... args) {
 
 card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.GetCardInfoRequest.card_uid)
}
inline std::string* GetCardInfoRequest::mutable_card_uid() {
  std::string* _s = _internal_mutable_card_uid();
  // @@protoc_insertion_point(field_mutable:card_v2.GetCardInfoRequest.card_uid)
  return _s;
}
inline const std::string& GetCardInfoRequest::_internal_card_uid() const {
  return card_uid_.Get();
}
inline void GetCardInfoRequest::_internal_set_card_uid(const std::string& value) {
  
  card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCardInfoRequest::_internal_mutable_card_uid() {
  
  return card_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCardInfoRequest::release_card_uid() {
  // @@protoc_insertion_point(field_release:card_v2.GetCardInfoRequest.card_uid)
  return card_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCardInfoRequest::set_allocated_card_uid(std::string* card_uid) {
  if (card_uid != nullptr) {
    
  } else {
    
  }
  card_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.GetCardInfoRequest.card_uid)
}

// -------------------------------------------------------------------

// GetCardInfoData

// string card_uid = 1;
inline void GetCardInfoData::clear_card_uid() {
  card_uid_.ClearToEmpty();
}
inline const std::string& GetCardInfoData::card_uid() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoData.card_uid)
  return _internal_card_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCardInfoData::set_card_uid(ArgT0&& arg0, ArgT... args) {
 
 card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.GetCardInfoData.card_uid)
}
inline std::string* GetCardInfoData::mutable_card_uid() {
  std::string* _s = _internal_mutable_card_uid();
  // @@protoc_insertion_point(field_mutable:card_v2.GetCardInfoData.card_uid)
  return _s;
}
inline const std::string& GetCardInfoData::_internal_card_uid() const {
  return card_uid_.Get();
}
inline void GetCardInfoData::_internal_set_card_uid(const std::string& value) {
  
  card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::_internal_mutable_card_uid() {
  
  return card_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::release_card_uid() {
  // @@protoc_insertion_point(field_release:card_v2.GetCardInfoData.card_uid)
  return card_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCardInfoData::set_allocated_card_uid(std::string* card_uid) {
  if (card_uid != nullptr) {
    
  } else {
    
  }
  card_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.GetCardInfoData.card_uid)
}

// string card_provider = 2;
inline void GetCardInfoData::clear_card_provider() {
  card_provider_.ClearToEmpty();
}
inline const std::string& GetCardInfoData::card_provider() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoData.card_provider)
  return _internal_card_provider();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCardInfoData::set_card_provider(ArgT0&& arg0, ArgT... args) {
 
 card_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.GetCardInfoData.card_provider)
}
inline std::string* GetCardInfoData::mutable_card_provider() {
  std::string* _s = _internal_mutable_card_provider();
  // @@protoc_insertion_point(field_mutable:card_v2.GetCardInfoData.card_provider)
  return _s;
}
inline const std::string& GetCardInfoData::_internal_card_provider() const {
  return card_provider_.Get();
}
inline void GetCardInfoData::_internal_set_card_provider(const std::string& value) {
  
  card_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::_internal_mutable_card_provider() {
  
  return card_provider_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::release_card_provider() {
  // @@protoc_insertion_point(field_release:card_v2.GetCardInfoData.card_provider)
  return card_provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCardInfoData::set_allocated_card_provider(std::string* card_provider) {
  if (card_provider != nullptr) {
    
  } else {
    
  }
  card_provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_provider,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.GetCardInfoData.card_provider)
}

// string card_code = 3;
inline void GetCardInfoData::clear_card_code() {
  card_code_.ClearToEmpty();
}
inline const std::string& GetCardInfoData::card_code() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoData.card_code)
  return _internal_card_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCardInfoData::set_card_code(ArgT0&& arg0, ArgT... args) {
 
 card_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.GetCardInfoData.card_code)
}
inline std::string* GetCardInfoData::mutable_card_code() {
  std::string* _s = _internal_mutable_card_code();
  // @@protoc_insertion_point(field_mutable:card_v2.GetCardInfoData.card_code)
  return _s;
}
inline const std::string& GetCardInfoData::_internal_card_code() const {
  return card_code_.Get();
}
inline void GetCardInfoData::_internal_set_card_code(const std::string& value) {
  
  card_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::_internal_mutable_card_code() {
  
  return card_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::release_card_code() {
  // @@protoc_insertion_point(field_release:card_v2.GetCardInfoData.card_code)
  return card_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCardInfoData::set_allocated_card_code(std::string* card_code) {
  if (card_code != nullptr) {
    
  } else {
    
  }
  card_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.GetCardInfoData.card_code)
}

// string bin_number = 4;
inline void GetCardInfoData::clear_bin_number() {
  bin_number_.ClearToEmpty();
}
inline const std::string& GetCardInfoData::bin_number() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoData.bin_number)
  return _internal_bin_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCardInfoData::set_bin_number(ArgT0&& arg0, ArgT... args) {
 
 bin_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.GetCardInfoData.bin_number)
}
inline std::string* GetCardInfoData::mutable_bin_number() {
  std::string* _s = _internal_mutable_bin_number();
  // @@protoc_insertion_point(field_mutable:card_v2.GetCardInfoData.bin_number)
  return _s;
}
inline const std::string& GetCardInfoData::_internal_bin_number() const {
  return bin_number_.Get();
}
inline void GetCardInfoData::_internal_set_bin_number(const std::string& value) {
  
  bin_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::_internal_mutable_bin_number() {
  
  return bin_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::release_bin_number() {
  // @@protoc_insertion_point(field_release:card_v2.GetCardInfoData.bin_number)
  return bin_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCardInfoData::set_allocated_bin_number(std::string* bin_number) {
  if (bin_number != nullptr) {
    
  } else {
    
  }
  bin_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bin_number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.GetCardInfoData.bin_number)
}

// int32 card_type = 5;
inline void GetCardInfoData::clear_card_type() {
  card_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCardInfoData::_internal_card_type() const {
  return card_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCardInfoData::card_type() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoData.card_type)
  return _internal_card_type();
}
inline void GetCardInfoData::_internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_type_ = value;
}
inline void GetCardInfoData::set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_type(value);
  // @@protoc_insertion_point(field_set:card_v2.GetCardInfoData.card_type)
}

// string customer_name = 6;
inline void GetCardInfoData::clear_customer_name() {
  customer_name_.ClearToEmpty();
}
inline const std::string& GetCardInfoData::customer_name() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoData.customer_name)
  return _internal_customer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCardInfoData::set_customer_name(ArgT0&& arg0, ArgT... args) {
 
 customer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.GetCardInfoData.customer_name)
}
inline std::string* GetCardInfoData::mutable_customer_name() {
  std::string* _s = _internal_mutable_customer_name();
  // @@protoc_insertion_point(field_mutable:card_v2.GetCardInfoData.customer_name)
  return _s;
}
inline const std::string& GetCardInfoData::_internal_customer_name() const {
  return customer_name_.Get();
}
inline void GetCardInfoData::_internal_set_customer_name(const std::string& value) {
  
  customer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::_internal_mutable_customer_name() {
  
  return customer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::release_customer_name() {
  // @@protoc_insertion_point(field_release:card_v2.GetCardInfoData.customer_name)
  return customer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCardInfoData::set_allocated_customer_name(std::string* customer_name) {
  if (customer_name != nullptr) {
    
  } else {
    
  }
  customer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.GetCardInfoData.customer_name)
}

// string customer_tel = 7;
inline void GetCardInfoData::clear_customer_tel() {
  customer_tel_.ClearToEmpty();
}
inline const std::string& GetCardInfoData::customer_tel() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoData.customer_tel)
  return _internal_customer_tel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCardInfoData::set_customer_tel(ArgT0&& arg0, ArgT... args) {
 
 customer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.GetCardInfoData.customer_tel)
}
inline std::string* GetCardInfoData::mutable_customer_tel() {
  std::string* _s = _internal_mutable_customer_tel();
  // @@protoc_insertion_point(field_mutable:card_v2.GetCardInfoData.customer_tel)
  return _s;
}
inline const std::string& GetCardInfoData::_internal_customer_tel() const {
  return customer_tel_.Get();
}
inline void GetCardInfoData::_internal_set_customer_tel(const std::string& value) {
  
  customer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::_internal_mutable_customer_tel() {
  
  return customer_tel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::release_customer_tel() {
  // @@protoc_insertion_point(field_release:card_v2.GetCardInfoData.customer_tel)
  return customer_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCardInfoData::set_allocated_customer_tel(std::string* customer_tel) {
  if (customer_tel != nullptr) {
    
  } else {
    
  }
  customer_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_tel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.GetCardInfoData.customer_tel)
}

// string customer_email = 8;
inline void GetCardInfoData::clear_customer_email() {
  customer_email_.ClearToEmpty();
}
inline const std::string& GetCardInfoData::customer_email() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoData.customer_email)
  return _internal_customer_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCardInfoData::set_customer_email(ArgT0&& arg0, ArgT... args) {
 
 customer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.GetCardInfoData.customer_email)
}
inline std::string* GetCardInfoData::mutable_customer_email() {
  std::string* _s = _internal_mutable_customer_email();
  // @@protoc_insertion_point(field_mutable:card_v2.GetCardInfoData.customer_email)
  return _s;
}
inline const std::string& GetCardInfoData::_internal_customer_email() const {
  return customer_email_.Get();
}
inline void GetCardInfoData::_internal_set_customer_email(const std::string& value) {
  
  customer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::_internal_mutable_customer_email() {
  
  return customer_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::release_customer_email() {
  // @@protoc_insertion_point(field_release:card_v2.GetCardInfoData.customer_email)
  return customer_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCardInfoData::set_allocated_customer_email(std::string* customer_email) {
  if (customer_email != nullptr) {
    
  } else {
    
  }
  customer_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.GetCardInfoData.customer_email)
}

// string customer_addr = 9;
inline void GetCardInfoData::clear_customer_addr() {
  customer_addr_.ClearToEmpty();
}
inline const std::string& GetCardInfoData::customer_addr() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoData.customer_addr)
  return _internal_customer_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCardInfoData::set_customer_addr(ArgT0&& arg0, ArgT... args) {
 
 customer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.GetCardInfoData.customer_addr)
}
inline std::string* GetCardInfoData::mutable_customer_addr() {
  std::string* _s = _internal_mutable_customer_addr();
  // @@protoc_insertion_point(field_mutable:card_v2.GetCardInfoData.customer_addr)
  return _s;
}
inline const std::string& GetCardInfoData::_internal_customer_addr() const {
  return customer_addr_.Get();
}
inline void GetCardInfoData::_internal_set_customer_addr(const std::string& value) {
  
  customer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::_internal_mutable_customer_addr() {
  
  return customer_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::release_customer_addr() {
  // @@protoc_insertion_point(field_release:card_v2.GetCardInfoData.customer_addr)
  return customer_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCardInfoData::set_allocated_customer_addr(std::string* customer_addr) {
  if (customer_addr != nullptr) {
    
  } else {
    
  }
  customer_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_addr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.GetCardInfoData.customer_addr)
}

// string customer_postcode = 10;
inline void GetCardInfoData::clear_customer_postcode() {
  customer_postcode_.ClearToEmpty();
}
inline const std::string& GetCardInfoData::customer_postcode() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoData.customer_postcode)
  return _internal_customer_postcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCardInfoData::set_customer_postcode(ArgT0&& arg0, ArgT... args) {
 
 customer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.GetCardInfoData.customer_postcode)
}
inline std::string* GetCardInfoData::mutable_customer_postcode() {
  std::string* _s = _internal_mutable_customer_postcode();
  // @@protoc_insertion_point(field_mutable:card_v2.GetCardInfoData.customer_postcode)
  return _s;
}
inline const std::string& GetCardInfoData::_internal_customer_postcode() const {
  return customer_postcode_.Get();
}
inline void GetCardInfoData::_internal_set_customer_postcode(const std::string& value) {
  
  customer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::_internal_mutable_customer_postcode() {
  
  return customer_postcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCardInfoData::release_customer_postcode() {
  // @@protoc_insertion_point(field_release:card_v2.GetCardInfoData.customer_postcode)
  return customer_postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCardInfoData::set_allocated_customer_postcode(std::string* customer_postcode) {
  if (customer_postcode != nullptr) {
    
  } else {
    
  }
  customer_postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_postcode,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.GetCardInfoData.customer_postcode)
}

// int32 inserted = 11;
inline void GetCardInfoData::clear_inserted() {
  inserted_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCardInfoData::_internal_inserted() const {
  return inserted_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCardInfoData::inserted() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoData.inserted)
  return _internal_inserted();
}
inline void GetCardInfoData::_internal_set_inserted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inserted_ = value;
}
inline void GetCardInfoData::set_inserted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inserted(value);
  // @@protoc_insertion_point(field_set:card_v2.GetCardInfoData.inserted)
}

// int32 updated = 12;
inline void GetCardInfoData::clear_updated() {
  updated_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCardInfoData::_internal_updated() const {
  return updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCardInfoData::updated() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoData.updated)
  return _internal_updated();
}
inline void GetCardInfoData::_internal_set_updated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  updated_ = value;
}
inline void GetCardInfoData::set_updated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_updated(value);
  // @@protoc_insertion_point(field_set:card_v2.GetCardInfoData.updated)
}

// -------------------------------------------------------------------

// GetCardInfoResponse

// int32 code = 1;
inline void GetCardInfoResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCardInfoResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCardInfoResponse::code() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoResponse.code)
  return _internal_code();
}
inline void GetCardInfoResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetCardInfoResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:card_v2.GetCardInfoResponse.code)
}

// string message = 2;
inline void GetCardInfoResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& GetCardInfoResponse::message() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCardInfoResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.GetCardInfoResponse.message)
}
inline std::string* GetCardInfoResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:card_v2.GetCardInfoResponse.message)
  return _s;
}
inline const std::string& GetCardInfoResponse::_internal_message() const {
  return message_.Get();
}
inline void GetCardInfoResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCardInfoResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCardInfoResponse::release_message() {
  // @@protoc_insertion_point(field_release:card_v2.GetCardInfoResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCardInfoResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.GetCardInfoResponse.message)
}

// .card_v2.GetCardInfoData response = 3;
inline bool GetCardInfoResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool GetCardInfoResponse::has_response() const {
  return _internal_has_response();
}
inline void GetCardInfoResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::card_v2::GetCardInfoData& GetCardInfoResponse::_internal_response() const {
  const ::card_v2::GetCardInfoData* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::card_v2::GetCardInfoData&>(
      ::card_v2::_GetCardInfoData_default_instance_);
}
inline const ::card_v2::GetCardInfoData& GetCardInfoResponse::response() const {
  // @@protoc_insertion_point(field_get:card_v2.GetCardInfoResponse.response)
  return _internal_response();
}
inline void GetCardInfoResponse::unsafe_arena_set_allocated_response(
    ::card_v2::GetCardInfoData* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:card_v2.GetCardInfoResponse.response)
}
inline ::card_v2::GetCardInfoData* GetCardInfoResponse::release_response() {
  
  ::card_v2::GetCardInfoData* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::card_v2::GetCardInfoData* GetCardInfoResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:card_v2.GetCardInfoResponse.response)
  
  ::card_v2::GetCardInfoData* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::card_v2::GetCardInfoData* GetCardInfoResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::card_v2::GetCardInfoData>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::card_v2::GetCardInfoData* GetCardInfoResponse::mutable_response() {
  ::card_v2::GetCardInfoData* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:card_v2.GetCardInfoResponse.response)
  return _msg;
}
inline void GetCardInfoResponse::set_allocated_response(::card_v2::GetCardInfoData* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::card_v2::GetCardInfoData>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:card_v2.GetCardInfoResponse.response)
}

// -------------------------------------------------------------------

// DeleteCardInfoRequest

// string card_uid = 1;
inline void DeleteCardInfoRequest::clear_card_uid() {
  card_uid_.ClearToEmpty();
}
inline const std::string& DeleteCardInfoRequest::card_uid() const {
  // @@protoc_insertion_point(field_get:card_v2.DeleteCardInfoRequest.card_uid)
  return _internal_card_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteCardInfoRequest::set_card_uid(ArgT0&& arg0, ArgT... args) {
 
 card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.DeleteCardInfoRequest.card_uid)
}
inline std::string* DeleteCardInfoRequest::mutable_card_uid() {
  std::string* _s = _internal_mutable_card_uid();
  // @@protoc_insertion_point(field_mutable:card_v2.DeleteCardInfoRequest.card_uid)
  return _s;
}
inline const std::string& DeleteCardInfoRequest::_internal_card_uid() const {
  return card_uid_.Get();
}
inline void DeleteCardInfoRequest::_internal_set_card_uid(const std::string& value) {
  
  card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteCardInfoRequest::_internal_mutable_card_uid() {
  
  return card_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteCardInfoRequest::release_card_uid() {
  // @@protoc_insertion_point(field_release:card_v2.DeleteCardInfoRequest.card_uid)
  return card_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteCardInfoRequest::set_allocated_card_uid(std::string* card_uid) {
  if (card_uid != nullptr) {
    
  } else {
    
  }
  card_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.DeleteCardInfoRequest.card_uid)
}

// -------------------------------------------------------------------

// DeleteCardInfoResponse

// int32 code = 1;
inline void DeleteCardInfoResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteCardInfoResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteCardInfoResponse::code() const {
  // @@protoc_insertion_point(field_get:card_v2.DeleteCardInfoResponse.code)
  return _internal_code();
}
inline void DeleteCardInfoResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void DeleteCardInfoResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:card_v2.DeleteCardInfoResponse.code)
}

// string message = 2;
inline void DeleteCardInfoResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& DeleteCardInfoResponse::message() const {
  // @@protoc_insertion_point(field_get:card_v2.DeleteCardInfoResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteCardInfoResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.DeleteCardInfoResponse.message)
}
inline std::string* DeleteCardInfoResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:card_v2.DeleteCardInfoResponse.message)
  return _s;
}
inline const std::string& DeleteCardInfoResponse::_internal_message() const {
  return message_.Get();
}
inline void DeleteCardInfoResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteCardInfoResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteCardInfoResponse::release_message() {
  // @@protoc_insertion_point(field_release:card_v2.DeleteCardInfoResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteCardInfoResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.DeleteCardInfoResponse.message)
}

// -------------------------------------------------------------------

// PayByRegisteredCardRequest

// string card_uid = 1;
inline void PayByRegisteredCardRequest::clear_card_uid() {
  card_uid_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardRequest::card_uid() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardRequest.card_uid)
  return _internal_card_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardRequest::set_card_uid(ArgT0&& arg0, ArgT... args) {
 
 card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardRequest.card_uid)
}
inline std::string* PayByRegisteredCardRequest::mutable_card_uid() {
  std::string* _s = _internal_mutable_card_uid();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardRequest.card_uid)
  return _s;
}
inline const std::string& PayByRegisteredCardRequest::_internal_card_uid() const {
  return card_uid_.Get();
}
inline void PayByRegisteredCardRequest::_internal_set_card_uid(const std::string& value) {
  
  card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::_internal_mutable_card_uid() {
  
  return card_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::release_card_uid() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardRequest.card_uid)
  return card_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardRequest::set_allocated_card_uid(std::string* card_uid) {
  if (card_uid != nullptr) {
    
  } else {
    
  }
  card_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardRequest.card_uid)
}

// string merchant_uid = 2;
inline void PayByRegisteredCardRequest::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardRequest::merchant_uid() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardRequest.merchant_uid)
  return _internal_merchant_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardRequest::set_merchant_uid(ArgT0&& arg0, ArgT... args) {
 
 merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardRequest.merchant_uid)
}
inline std::string* PayByRegisteredCardRequest::mutable_merchant_uid() {
  std::string* _s = _internal_mutable_merchant_uid();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardRequest.merchant_uid)
  return _s;
}
inline const std::string& PayByRegisteredCardRequest::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void PayByRegisteredCardRequest::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardRequest.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardRequest::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardRequest.merchant_uid)
}

// string amount = 3;
inline void PayByRegisteredCardRequest::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardRequest::amount() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardRequest.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardRequest::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardRequest.amount)
}
inline std::string* PayByRegisteredCardRequest::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardRequest.amount)
  return _s;
}
inline const std::string& PayByRegisteredCardRequest::_internal_amount() const {
  return amount_.Get();
}
inline void PayByRegisteredCardRequest::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::release_amount() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardRequest.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardRequest::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardRequest.amount)
}

// string tax_free_amount = 4;
inline void PayByRegisteredCardRequest::clear_tax_free_amount() {
  tax_free_amount_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardRequest::tax_free_amount() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardRequest.tax_free_amount)
  return _internal_tax_free_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardRequest::set_tax_free_amount(ArgT0&& arg0, ArgT... args) {
 
 tax_free_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardRequest.tax_free_amount)
}
inline std::string* PayByRegisteredCardRequest::mutable_tax_free_amount() {
  std::string* _s = _internal_mutable_tax_free_amount();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardRequest.tax_free_amount)
  return _s;
}
inline const std::string& PayByRegisteredCardRequest::_internal_tax_free_amount() const {
  return tax_free_amount_.Get();
}
inline void PayByRegisteredCardRequest::_internal_set_tax_free_amount(const std::string& value) {
  
  tax_free_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::_internal_mutable_tax_free_amount() {
  
  return tax_free_amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::release_tax_free_amount() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardRequest.tax_free_amount)
  return tax_free_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardRequest::set_allocated_tax_free_amount(std::string* tax_free_amount) {
  if (tax_free_amount != nullptr) {
    
  } else {
    
  }
  tax_free_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tax_free_amount,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardRequest.tax_free_amount)
}

// string order_name = 5;
inline void PayByRegisteredCardRequest::clear_order_name() {
  order_name_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardRequest::order_name() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardRequest.order_name)
  return _internal_order_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardRequest::set_order_name(ArgT0&& arg0, ArgT... args) {
 
 order_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardRequest.order_name)
}
inline std::string* PayByRegisteredCardRequest::mutable_order_name() {
  std::string* _s = _internal_mutable_order_name();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardRequest.order_name)
  return _s;
}
inline const std::string& PayByRegisteredCardRequest::_internal_order_name() const {
  return order_name_.Get();
}
inline void PayByRegisteredCardRequest::_internal_set_order_name(const std::string& value) {
  
  order_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::_internal_mutable_order_name() {
  
  return order_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::release_order_name() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardRequest.order_name)
  return order_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardRequest::set_allocated_order_name(std::string* order_name) {
  if (order_name != nullptr) {
    
  } else {
    
  }
  order_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardRequest.order_name)
}

// int32 card_installment = 6;
inline void PayByRegisteredCardRequest::clear_card_installment() {
  card_installment_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardRequest::_internal_card_installment() const {
  return card_installment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardRequest::card_installment() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardRequest.card_installment)
  return _internal_card_installment();
}
inline void PayByRegisteredCardRequest::_internal_set_card_installment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_installment_ = value;
}
inline void PayByRegisteredCardRequest::set_card_installment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_installment(value);
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardRequest.card_installment)
}

// bool interest_free_by_merchant = 7;
inline void PayByRegisteredCardRequest::clear_interest_free_by_merchant() {
  interest_free_by_merchant_ = false;
}
inline bool PayByRegisteredCardRequest::_internal_interest_free_by_merchant() const {
  return interest_free_by_merchant_;
}
inline bool PayByRegisteredCardRequest::interest_free_by_merchant() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardRequest.interest_free_by_merchant)
  return _internal_interest_free_by_merchant();
}
inline void PayByRegisteredCardRequest::_internal_set_interest_free_by_merchant(bool value) {
  
  interest_free_by_merchant_ = value;
}
inline void PayByRegisteredCardRequest::set_interest_free_by_merchant(bool value) {
  _internal_set_interest_free_by_merchant(value);
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardRequest.interest_free_by_merchant)
}

// string custom_data = 8;
inline void PayByRegisteredCardRequest::clear_custom_data() {
  custom_data_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardRequest::custom_data() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardRequest.custom_data)
  return _internal_custom_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardRequest::set_custom_data(ArgT0&& arg0, ArgT... args) {
 
 custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardRequest.custom_data)
}
inline std::string* PayByRegisteredCardRequest::mutable_custom_data() {
  std::string* _s = _internal_mutable_custom_data();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardRequest.custom_data)
  return _s;
}
inline const std::string& PayByRegisteredCardRequest::_internal_custom_data() const {
  return custom_data_.Get();
}
inline void PayByRegisteredCardRequest::_internal_set_custom_data(const std::string& value) {
  
  custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::_internal_mutable_custom_data() {
  
  return custom_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::release_custom_data() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardRequest.custom_data)
  return custom_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardRequest::set_allocated_custom_data(std::string* custom_data) {
  if (custom_data != nullptr) {
    
  } else {
    
  }
  custom_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardRequest.custom_data)
}

// string callback_url = 9;
inline void PayByRegisteredCardRequest::clear_callback_url() {
  callback_url_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardRequest::callback_url() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardRequest.callback_url)
  return _internal_callback_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardRequest::set_callback_url(ArgT0&& arg0, ArgT... args) {
 
 callback_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardRequest.callback_url)
}
inline std::string* PayByRegisteredCardRequest::mutable_callback_url() {
  std::string* _s = _internal_mutable_callback_url();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardRequest.callback_url)
  return _s;
}
inline const std::string& PayByRegisteredCardRequest::_internal_callback_url() const {
  return callback_url_.Get();
}
inline void PayByRegisteredCardRequest::_internal_set_callback_url(const std::string& value) {
  
  callback_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::_internal_mutable_callback_url() {
  
  return callback_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::release_callback_url() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardRequest.callback_url)
  return callback_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardRequest::set_allocated_callback_url(std::string* callback_url) {
  if (callback_url != nullptr) {
    
  } else {
    
  }
  callback_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callback_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardRequest.callback_url)
}

// string buyer_addr = 10;
inline void PayByRegisteredCardRequest::clear_buyer_addr() {
  buyer_addr_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardRequest::buyer_addr() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardRequest.buyer_addr)
  return _internal_buyer_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardRequest::set_buyer_addr(ArgT0&& arg0, ArgT... args) {
 
 buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardRequest.buyer_addr)
}
inline std::string* PayByRegisteredCardRequest::mutable_buyer_addr() {
  std::string* _s = _internal_mutable_buyer_addr();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardRequest.buyer_addr)
  return _s;
}
inline const std::string& PayByRegisteredCardRequest::_internal_buyer_addr() const {
  return buyer_addr_.Get();
}
inline void PayByRegisteredCardRequest::_internal_set_buyer_addr(const std::string& value) {
  
  buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::_internal_mutable_buyer_addr() {
  
  return buyer_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::release_buyer_addr() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardRequest.buyer_addr)
  return buyer_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardRequest::set_allocated_buyer_addr(std::string* buyer_addr) {
  if (buyer_addr != nullptr) {
    
  } else {
    
  }
  buyer_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_addr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardRequest.buyer_addr)
}

// string buyer_email = 11;
inline void PayByRegisteredCardRequest::clear_buyer_email() {
  buyer_email_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardRequest::buyer_email() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardRequest.buyer_email)
  return _internal_buyer_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardRequest::set_buyer_email(ArgT0&& arg0, ArgT... args) {
 
 buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardRequest.buyer_email)
}
inline std::string* PayByRegisteredCardRequest::mutable_buyer_email() {
  std::string* _s = _internal_mutable_buyer_email();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardRequest.buyer_email)
  return _s;
}
inline const std::string& PayByRegisteredCardRequest::_internal_buyer_email() const {
  return buyer_email_.Get();
}
inline void PayByRegisteredCardRequest::_internal_set_buyer_email(const std::string& value) {
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::_internal_mutable_buyer_email() {
  
  return buyer_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::release_buyer_email() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardRequest.buyer_email)
  return buyer_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardRequest::set_allocated_buyer_email(std::string* buyer_email) {
  if (buyer_email != nullptr) {
    
  } else {
    
  }
  buyer_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardRequest.buyer_email)
}

// string buyer_name = 12;
inline void PayByRegisteredCardRequest::clear_buyer_name() {
  buyer_name_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardRequest::buyer_name() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardRequest.buyer_name)
  return _internal_buyer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardRequest::set_buyer_name(ArgT0&& arg0, ArgT... args) {
 
 buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardRequest.buyer_name)
}
inline std::string* PayByRegisteredCardRequest::mutable_buyer_name() {
  std::string* _s = _internal_mutable_buyer_name();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardRequest.buyer_name)
  return _s;
}
inline const std::string& PayByRegisteredCardRequest::_internal_buyer_name() const {
  return buyer_name_.Get();
}
inline void PayByRegisteredCardRequest::_internal_set_buyer_name(const std::string& value) {
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::_internal_mutable_buyer_name() {
  
  return buyer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::release_buyer_name() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardRequest.buyer_name)
  return buyer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardRequest::set_allocated_buyer_name(std::string* buyer_name) {
  if (buyer_name != nullptr) {
    
  } else {
    
  }
  buyer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardRequest.buyer_name)
}

// string buyer_postcode = 13;
inline void PayByRegisteredCardRequest::clear_buyer_postcode() {
  buyer_postcode_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardRequest::buyer_postcode() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardRequest.buyer_postcode)
  return _internal_buyer_postcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardRequest::set_buyer_postcode(ArgT0&& arg0, ArgT... args) {
 
 buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardRequest.buyer_postcode)
}
inline std::string* PayByRegisteredCardRequest::mutable_buyer_postcode() {
  std::string* _s = _internal_mutable_buyer_postcode();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardRequest.buyer_postcode)
  return _s;
}
inline const std::string& PayByRegisteredCardRequest::_internal_buyer_postcode() const {
  return buyer_postcode_.Get();
}
inline void PayByRegisteredCardRequest::_internal_set_buyer_postcode(const std::string& value) {
  
  buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::_internal_mutable_buyer_postcode() {
  
  return buyer_postcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::release_buyer_postcode() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardRequest.buyer_postcode)
  return buyer_postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardRequest::set_allocated_buyer_postcode(std::string* buyer_postcode) {
  if (buyer_postcode != nullptr) {
    
  } else {
    
  }
  buyer_postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_postcode,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardRequest.buyer_postcode)
}

// string buyer_tel = 14;
inline void PayByRegisteredCardRequest::clear_buyer_tel() {
  buyer_tel_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardRequest::buyer_tel() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardRequest.buyer_tel)
  return _internal_buyer_tel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardRequest::set_buyer_tel(ArgT0&& arg0, ArgT... args) {
 
 buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardRequest.buyer_tel)
}
inline std::string* PayByRegisteredCardRequest::mutable_buyer_tel() {
  std::string* _s = _internal_mutable_buyer_tel();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardRequest.buyer_tel)
  return _s;
}
inline const std::string& PayByRegisteredCardRequest::_internal_buyer_tel() const {
  return buyer_tel_.Get();
}
inline void PayByRegisteredCardRequest::_internal_set_buyer_tel(const std::string& value) {
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::_internal_mutable_buyer_tel() {
  
  return buyer_tel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardRequest::release_buyer_tel() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardRequest.buyer_tel)
  return buyer_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardRequest::set_allocated_buyer_tel(std::string* buyer_tel) {
  if (buyer_tel != nullptr) {
    
  } else {
    
  }
  buyer_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_tel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardRequest.buyer_tel)
}

// -------------------------------------------------------------------

// PayByRegisteredCardData

// string amount = 1;
inline void PayByRegisteredCardData::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::amount() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.amount)
}
inline std::string* PayByRegisteredCardData::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.amount)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_amount() const {
  return amount_.Get();
}
inline void PayByRegisteredCardData::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_amount() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.amount)
}

// string apply_num = 2;
inline void PayByRegisteredCardData::clear_apply_num() {
  apply_num_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::apply_num() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.apply_num)
  return _internal_apply_num();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_apply_num(ArgT0&& arg0, ArgT... args) {
 
 apply_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.apply_num)
}
inline std::string* PayByRegisteredCardData::mutable_apply_num() {
  std::string* _s = _internal_mutable_apply_num();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.apply_num)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_apply_num() const {
  return apply_num_.Get();
}
inline void PayByRegisteredCardData::_internal_set_apply_num(const std::string& value) {
  
  apply_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_apply_num() {
  
  return apply_num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_apply_num() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.apply_num)
  return apply_num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_apply_num(std::string* apply_num) {
  if (apply_num != nullptr) {
    
  } else {
    
  }
  apply_num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apply_num,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.apply_num)
}

// string buyer_addr = 3;
inline void PayByRegisteredCardData::clear_buyer_addr() {
  buyer_addr_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::buyer_addr() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.buyer_addr)
  return _internal_buyer_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_buyer_addr(ArgT0&& arg0, ArgT... args) {
 
 buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.buyer_addr)
}
inline std::string* PayByRegisteredCardData::mutable_buyer_addr() {
  std::string* _s = _internal_mutable_buyer_addr();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.buyer_addr)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_buyer_addr() const {
  return buyer_addr_.Get();
}
inline void PayByRegisteredCardData::_internal_set_buyer_addr(const std::string& value) {
  
  buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_buyer_addr() {
  
  return buyer_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_buyer_addr() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.buyer_addr)
  return buyer_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_buyer_addr(std::string* buyer_addr) {
  if (buyer_addr != nullptr) {
    
  } else {
    
  }
  buyer_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_addr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.buyer_addr)
}

// string buyer_email = 4;
inline void PayByRegisteredCardData::clear_buyer_email() {
  buyer_email_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::buyer_email() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.buyer_email)
  return _internal_buyer_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_buyer_email(ArgT0&& arg0, ArgT... args) {
 
 buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.buyer_email)
}
inline std::string* PayByRegisteredCardData::mutable_buyer_email() {
  std::string* _s = _internal_mutable_buyer_email();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.buyer_email)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_buyer_email() const {
  return buyer_email_.Get();
}
inline void PayByRegisteredCardData::_internal_set_buyer_email(const std::string& value) {
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_buyer_email() {
  
  return buyer_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_buyer_email() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.buyer_email)
  return buyer_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_buyer_email(std::string* buyer_email) {
  if (buyer_email != nullptr) {
    
  } else {
    
  }
  buyer_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.buyer_email)
}

// string buyer_name = 5;
inline void PayByRegisteredCardData::clear_buyer_name() {
  buyer_name_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::buyer_name() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.buyer_name)
  return _internal_buyer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_buyer_name(ArgT0&& arg0, ArgT... args) {
 
 buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.buyer_name)
}
inline std::string* PayByRegisteredCardData::mutable_buyer_name() {
  std::string* _s = _internal_mutable_buyer_name();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.buyer_name)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_buyer_name() const {
  return buyer_name_.Get();
}
inline void PayByRegisteredCardData::_internal_set_buyer_name(const std::string& value) {
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_buyer_name() {
  
  return buyer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_buyer_name() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.buyer_name)
  return buyer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_buyer_name(std::string* buyer_name) {
  if (buyer_name != nullptr) {
    
  } else {
    
  }
  buyer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.buyer_name)
}

// string buyer_postcode = 6;
inline void PayByRegisteredCardData::clear_buyer_postcode() {
  buyer_postcode_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::buyer_postcode() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.buyer_postcode)
  return _internal_buyer_postcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_buyer_postcode(ArgT0&& arg0, ArgT... args) {
 
 buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.buyer_postcode)
}
inline std::string* PayByRegisteredCardData::mutable_buyer_postcode() {
  std::string* _s = _internal_mutable_buyer_postcode();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.buyer_postcode)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_buyer_postcode() const {
  return buyer_postcode_.Get();
}
inline void PayByRegisteredCardData::_internal_set_buyer_postcode(const std::string& value) {
  
  buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_buyer_postcode() {
  
  return buyer_postcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_buyer_postcode() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.buyer_postcode)
  return buyer_postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_buyer_postcode(std::string* buyer_postcode) {
  if (buyer_postcode != nullptr) {
    
  } else {
    
  }
  buyer_postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_postcode,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.buyer_postcode)
}

// string buyer_tel = 7;
inline void PayByRegisteredCardData::clear_buyer_tel() {
  buyer_tel_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::buyer_tel() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.buyer_tel)
  return _internal_buyer_tel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_buyer_tel(ArgT0&& arg0, ArgT... args) {
 
 buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.buyer_tel)
}
inline std::string* PayByRegisteredCardData::mutable_buyer_tel() {
  std::string* _s = _internal_mutable_buyer_tel();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.buyer_tel)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_buyer_tel() const {
  return buyer_tel_.Get();
}
inline void PayByRegisteredCardData::_internal_set_buyer_tel(const std::string& value) {
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_buyer_tel() {
  
  return buyer_tel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_buyer_tel() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.buyer_tel)
  return buyer_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_buyer_tel(std::string* buyer_tel) {
  if (buyer_tel != nullptr) {
    
  } else {
    
  }
  buyer_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_tel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.buyer_tel)
}

// string cancel_amount = 8;
inline void PayByRegisteredCardData::clear_cancel_amount() {
  cancel_amount_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::cancel_amount() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.cancel_amount)
  return _internal_cancel_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_cancel_amount(ArgT0&& arg0, ArgT... args) {
 
 cancel_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.cancel_amount)
}
inline std::string* PayByRegisteredCardData::mutable_cancel_amount() {
  std::string* _s = _internal_mutable_cancel_amount();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.cancel_amount)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_cancel_amount() const {
  return cancel_amount_.Get();
}
inline void PayByRegisteredCardData::_internal_set_cancel_amount(const std::string& value) {
  
  cancel_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_cancel_amount() {
  
  return cancel_amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_cancel_amount() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.cancel_amount)
  return cancel_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_cancel_amount(std::string* cancel_amount) {
  if (cancel_amount != nullptr) {
    
  } else {
    
  }
  cancel_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cancel_amount,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.cancel_amount)
}

// repeated .card_v2.CancelHistory cancel_history = 9;
inline int PayByRegisteredCardData::_internal_cancel_history_size() const {
  return cancel_history_.size();
}
inline int PayByRegisteredCardData::cancel_history_size() const {
  return _internal_cancel_history_size();
}
inline void PayByRegisteredCardData::clear_cancel_history() {
  cancel_history_.Clear();
}
inline ::card_v2::CancelHistory* PayByRegisteredCardData::mutable_cancel_history(int index) {
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.cancel_history)
  return cancel_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::card_v2::CancelHistory >*
PayByRegisteredCardData::mutable_cancel_history() {
  // @@protoc_insertion_point(field_mutable_list:card_v2.PayByRegisteredCardData.cancel_history)
  return &cancel_history_;
}
inline const ::card_v2::CancelHistory& PayByRegisteredCardData::_internal_cancel_history(int index) const {
  return cancel_history_.Get(index);
}
inline const ::card_v2::CancelHistory& PayByRegisteredCardData::cancel_history(int index) const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.cancel_history)
  return _internal_cancel_history(index);
}
inline ::card_v2::CancelHistory* PayByRegisteredCardData::_internal_add_cancel_history() {
  return cancel_history_.Add();
}
inline ::card_v2::CancelHistory* PayByRegisteredCardData::add_cancel_history() {
  ::card_v2::CancelHistory* _add = _internal_add_cancel_history();
  // @@protoc_insertion_point(field_add:card_v2.PayByRegisteredCardData.cancel_history)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::card_v2::CancelHistory >&
PayByRegisteredCardData::cancel_history() const {
  // @@protoc_insertion_point(field_list:card_v2.PayByRegisteredCardData.cancel_history)
  return cancel_history_;
}

// string cancel_reason = 10;
inline void PayByRegisteredCardData::clear_cancel_reason() {
  cancel_reason_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::cancel_reason() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.cancel_reason)
  return _internal_cancel_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_cancel_reason(ArgT0&& arg0, ArgT... args) {
 
 cancel_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.cancel_reason)
}
inline std::string* PayByRegisteredCardData::mutable_cancel_reason() {
  std::string* _s = _internal_mutable_cancel_reason();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.cancel_reason)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_cancel_reason() const {
  return cancel_reason_.Get();
}
inline void PayByRegisteredCardData::_internal_set_cancel_reason(const std::string& value) {
  
  cancel_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_cancel_reason() {
  
  return cancel_reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_cancel_reason() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.cancel_reason)
  return cancel_reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_cancel_reason(std::string* cancel_reason) {
  if (cancel_reason != nullptr) {
    
  } else {
    
  }
  cancel_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cancel_reason,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.cancel_reason)
}

// repeated string cancel_receipt_urls = 11;
inline int PayByRegisteredCardData::_internal_cancel_receipt_urls_size() const {
  return cancel_receipt_urls_.size();
}
inline int PayByRegisteredCardData::cancel_receipt_urls_size() const {
  return _internal_cancel_receipt_urls_size();
}
inline void PayByRegisteredCardData::clear_cancel_receipt_urls() {
  cancel_receipt_urls_.Clear();
}
inline std::string* PayByRegisteredCardData::add_cancel_receipt_urls() {
  std::string* _s = _internal_add_cancel_receipt_urls();
  // @@protoc_insertion_point(field_add_mutable:card_v2.PayByRegisteredCardData.cancel_receipt_urls)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_cancel_receipt_urls(int index) const {
  return cancel_receipt_urls_.Get(index);
}
inline const std::string& PayByRegisteredCardData::cancel_receipt_urls(int index) const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.cancel_receipt_urls)
  return _internal_cancel_receipt_urls(index);
}
inline std::string* PayByRegisteredCardData::mutable_cancel_receipt_urls(int index) {
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.cancel_receipt_urls)
  return cancel_receipt_urls_.Mutable(index);
}
inline void PayByRegisteredCardData::set_cancel_receipt_urls(int index, const std::string& value) {
  cancel_receipt_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.cancel_receipt_urls)
}
inline void PayByRegisteredCardData::set_cancel_receipt_urls(int index, std::string&& value) {
  cancel_receipt_urls_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.cancel_receipt_urls)
}
inline void PayByRegisteredCardData::set_cancel_receipt_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cancel_receipt_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:card_v2.PayByRegisteredCardData.cancel_receipt_urls)
}
inline void PayByRegisteredCardData::set_cancel_receipt_urls(int index, const char* value, size_t size) {
  cancel_receipt_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:card_v2.PayByRegisteredCardData.cancel_receipt_urls)
}
inline std::string* PayByRegisteredCardData::_internal_add_cancel_receipt_urls() {
  return cancel_receipt_urls_.Add();
}
inline void PayByRegisteredCardData::add_cancel_receipt_urls(const std::string& value) {
  cancel_receipt_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:card_v2.PayByRegisteredCardData.cancel_receipt_urls)
}
inline void PayByRegisteredCardData::add_cancel_receipt_urls(std::string&& value) {
  cancel_receipt_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:card_v2.PayByRegisteredCardData.cancel_receipt_urls)
}
inline void PayByRegisteredCardData::add_cancel_receipt_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cancel_receipt_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:card_v2.PayByRegisteredCardData.cancel_receipt_urls)
}
inline void PayByRegisteredCardData::add_cancel_receipt_urls(const char* value, size_t size) {
  cancel_receipt_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:card_v2.PayByRegisteredCardData.cancel_receipt_urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PayByRegisteredCardData::cancel_receipt_urls() const {
  // @@protoc_insertion_point(field_list:card_v2.PayByRegisteredCardData.cancel_receipt_urls)
  return cancel_receipt_urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PayByRegisteredCardData::mutable_cancel_receipt_urls() {
  // @@protoc_insertion_point(field_mutable_list:card_v2.PayByRegisteredCardData.cancel_receipt_urls)
  return &cancel_receipt_urls_;
}

// int32 cancelled_at = 12;
inline void PayByRegisteredCardData::clear_cancelled_at() {
  cancelled_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardData::_internal_cancelled_at() const {
  return cancelled_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardData::cancelled_at() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.cancelled_at)
  return _internal_cancelled_at();
}
inline void PayByRegisteredCardData::_internal_set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cancelled_at_ = value;
}
inline void PayByRegisteredCardData::set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cancelled_at(value);
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.cancelled_at)
}

// string card_code = 13;
inline void PayByRegisteredCardData::clear_card_code() {
  card_code_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::card_code() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.card_code)
  return _internal_card_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_card_code(ArgT0&& arg0, ArgT... args) {
 
 card_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.card_code)
}
inline std::string* PayByRegisteredCardData::mutable_card_code() {
  std::string* _s = _internal_mutable_card_code();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.card_code)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_card_code() const {
  return card_code_.Get();
}
inline void PayByRegisteredCardData::_internal_set_card_code(const std::string& value) {
  
  card_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_card_code() {
  
  return card_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_card_code() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.card_code)
  return card_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_card_code(std::string* card_code) {
  if (card_code != nullptr) {
    
  } else {
    
  }
  card_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.card_code)
}

// string card_name = 14;
inline void PayByRegisteredCardData::clear_card_name() {
  card_name_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::card_name() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.card_name)
  return _internal_card_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_card_name(ArgT0&& arg0, ArgT... args) {
 
 card_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.card_name)
}
inline std::string* PayByRegisteredCardData::mutable_card_name() {
  std::string* _s = _internal_mutable_card_name();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.card_name)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_card_name() const {
  return card_name_.Get();
}
inline void PayByRegisteredCardData::_internal_set_card_name(const std::string& value) {
  
  card_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_card_name() {
  
  return card_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_card_name() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.card_name)
  return card_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_card_name(std::string* card_name) {
  if (card_name != nullptr) {
    
  } else {
    
  }
  card_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.card_name)
}

// string bin_number = 15;
inline void PayByRegisteredCardData::clear_bin_number() {
  bin_number_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::bin_number() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.bin_number)
  return _internal_bin_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_bin_number(ArgT0&& arg0, ArgT... args) {
 
 bin_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.bin_number)
}
inline std::string* PayByRegisteredCardData::mutable_bin_number() {
  std::string* _s = _internal_mutable_bin_number();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.bin_number)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_bin_number() const {
  return bin_number_.Get();
}
inline void PayByRegisteredCardData::_internal_set_bin_number(const std::string& value) {
  
  bin_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_bin_number() {
  
  return bin_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_bin_number() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.bin_number)
  return bin_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_bin_number(std::string* bin_number) {
  if (bin_number != nullptr) {
    
  } else {
    
  }
  bin_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bin_number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.bin_number)
}

// int32 card_installment = 16;
inline void PayByRegisteredCardData::clear_card_installment() {
  card_installment_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardData::_internal_card_installment() const {
  return card_installment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardData::card_installment() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.card_installment)
  return _internal_card_installment();
}
inline void PayByRegisteredCardData::_internal_set_card_installment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_installment_ = value;
}
inline void PayByRegisteredCardData::set_card_installment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_installment(value);
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.card_installment)
}

// int32 card_type = 17;
inline void PayByRegisteredCardData::clear_card_type() {
  card_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardData::_internal_card_type() const {
  return card_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardData::card_type() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.card_type)
  return _internal_card_type();
}
inline void PayByRegisteredCardData::_internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_type_ = value;
}
inline void PayByRegisteredCardData::set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_type(value);
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.card_type)
}

// bool cash_receipt_issued = 18;
inline void PayByRegisteredCardData::clear_cash_receipt_issued() {
  cash_receipt_issued_ = false;
}
inline bool PayByRegisteredCardData::_internal_cash_receipt_issued() const {
  return cash_receipt_issued_;
}
inline bool PayByRegisteredCardData::cash_receipt_issued() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.cash_receipt_issued)
  return _internal_cash_receipt_issued();
}
inline void PayByRegisteredCardData::_internal_set_cash_receipt_issued(bool value) {
  
  cash_receipt_issued_ = value;
}
inline void PayByRegisteredCardData::set_cash_receipt_issued(bool value) {
  _internal_set_cash_receipt_issued(value);
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.cash_receipt_issued)
}

// string channel = 19;
inline void PayByRegisteredCardData::clear_channel() {
  channel_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::channel() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.channel)
  return _internal_channel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_channel(ArgT0&& arg0, ArgT... args) {
 
 channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.channel)
}
inline std::string* PayByRegisteredCardData::mutable_channel() {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.channel)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_channel() const {
  return channel_.Get();
}
inline void PayByRegisteredCardData::_internal_set_channel(const std::string& value) {
  
  channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_channel() {
  
  return channel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_channel() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.channel)
  return channel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.channel)
}

// string currency = 20;
inline void PayByRegisteredCardData::clear_currency() {
  currency_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::currency() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_currency(ArgT0&& arg0, ArgT... args) {
 
 currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.currency)
}
inline std::string* PayByRegisteredCardData::mutable_currency() {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.currency)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_currency() const {
  return currency_.Get();
}
inline void PayByRegisteredCardData::_internal_set_currency(const std::string& value) {
  
  currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_currency() {
  
  return currency_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_currency() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.currency)
  return currency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.currency)
}

// string custom_data = 21;
inline void PayByRegisteredCardData::clear_custom_data() {
  custom_data_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::custom_data() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.custom_data)
  return _internal_custom_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_custom_data(ArgT0&& arg0, ArgT... args) {
 
 custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.custom_data)
}
inline std::string* PayByRegisteredCardData::mutable_custom_data() {
  std::string* _s = _internal_mutable_custom_data();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.custom_data)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_custom_data() const {
  return custom_data_.Get();
}
inline void PayByRegisteredCardData::_internal_set_custom_data(const std::string& value) {
  
  custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_custom_data() {
  
  return custom_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_custom_data() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.custom_data)
  return custom_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_custom_data(std::string* custom_data) {
  if (custom_data != nullptr) {
    
  } else {
    
  }
  custom_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.custom_data)
}

// string card_uid = 22;
inline void PayByRegisteredCardData::clear_card_uid() {
  card_uid_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::card_uid() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.card_uid)
  return _internal_card_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_card_uid(ArgT0&& arg0, ArgT... args) {
 
 card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.card_uid)
}
inline std::string* PayByRegisteredCardData::mutable_card_uid() {
  std::string* _s = _internal_mutable_card_uid();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.card_uid)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_card_uid() const {
  return card_uid_.Get();
}
inline void PayByRegisteredCardData::_internal_set_card_uid(const std::string& value) {
  
  card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_card_uid() {
  
  return card_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_card_uid() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.card_uid)
  return card_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_card_uid(std::string* card_uid) {
  if (card_uid != nullptr) {
    
  } else {
    
  }
  card_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.card_uid)
}

// string customer_uid_usage = 23;
inline void PayByRegisteredCardData::clear_customer_uid_usage() {
  customer_uid_usage_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::customer_uid_usage() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.customer_uid_usage)
  return _internal_customer_uid_usage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_customer_uid_usage(ArgT0&& arg0, ArgT... args) {
 
 customer_uid_usage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.customer_uid_usage)
}
inline std::string* PayByRegisteredCardData::mutable_customer_uid_usage() {
  std::string* _s = _internal_mutable_customer_uid_usage();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.customer_uid_usage)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_customer_uid_usage() const {
  return customer_uid_usage_.Get();
}
inline void PayByRegisteredCardData::_internal_set_customer_uid_usage(const std::string& value) {
  
  customer_uid_usage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_customer_uid_usage() {
  
  return customer_uid_usage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_customer_uid_usage() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.customer_uid_usage)
  return customer_uid_usage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_customer_uid_usage(std::string* customer_uid_usage) {
  if (customer_uid_usage != nullptr) {
    
  } else {
    
  }
  customer_uid_usage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_uid_usage,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.customer_uid_usage)
}

// string fail_reason = 24;
inline void PayByRegisteredCardData::clear_fail_reason() {
  fail_reason_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::fail_reason() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.fail_reason)
  return _internal_fail_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_fail_reason(ArgT0&& arg0, ArgT... args) {
 
 fail_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.fail_reason)
}
inline std::string* PayByRegisteredCardData::mutable_fail_reason() {
  std::string* _s = _internal_mutable_fail_reason();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.fail_reason)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_fail_reason() const {
  return fail_reason_.Get();
}
inline void PayByRegisteredCardData::_internal_set_fail_reason(const std::string& value) {
  
  fail_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_fail_reason() {
  
  return fail_reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_fail_reason() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.fail_reason)
  return fail_reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_fail_reason(std::string* fail_reason) {
  if (fail_reason != nullptr) {
    
  } else {
    
  }
  fail_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fail_reason,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.fail_reason)
}

// int32 failed_at = 25;
inline void PayByRegisteredCardData::clear_failed_at() {
  failed_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardData::_internal_failed_at() const {
  return failed_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardData::failed_at() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.failed_at)
  return _internal_failed_at();
}
inline void PayByRegisteredCardData::_internal_set_failed_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  failed_at_ = value;
}
inline void PayByRegisteredCardData::set_failed_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_failed_at(value);
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.failed_at)
}

// string imp_uid = 26;
inline void PayByRegisteredCardData::clear_imp_uid() {
  imp_uid_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::imp_uid() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.imp_uid)
  return _internal_imp_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_imp_uid(ArgT0&& arg0, ArgT... args) {
 
 imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.imp_uid)
}
inline std::string* PayByRegisteredCardData::mutable_imp_uid() {
  std::string* _s = _internal_mutable_imp_uid();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.imp_uid)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_imp_uid() const {
  return imp_uid_.Get();
}
inline void PayByRegisteredCardData::_internal_set_imp_uid(const std::string& value) {
  
  imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_imp_uid() {
  
  return imp_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_imp_uid() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.imp_uid)
  return imp_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_imp_uid(std::string* imp_uid) {
  if (imp_uid != nullptr) {
    
  } else {
    
  }
  imp_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imp_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.imp_uid)
}

// string merchant_uid = 27;
inline void PayByRegisteredCardData::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::merchant_uid() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.merchant_uid)
  return _internal_merchant_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_merchant_uid(ArgT0&& arg0, ArgT... args) {
 
 merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.merchant_uid)
}
inline std::string* PayByRegisteredCardData::mutable_merchant_uid() {
  std::string* _s = _internal_mutable_merchant_uid();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.merchant_uid)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void PayByRegisteredCardData::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.merchant_uid)
}

// string order_name = 28;
inline void PayByRegisteredCardData::clear_order_name() {
  order_name_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::order_name() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.order_name)
  return _internal_order_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_order_name(ArgT0&& arg0, ArgT... args) {
 
 order_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.order_name)
}
inline std::string* PayByRegisteredCardData::mutable_order_name() {
  std::string* _s = _internal_mutable_order_name();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.order_name)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_order_name() const {
  return order_name_.Get();
}
inline void PayByRegisteredCardData::_internal_set_order_name(const std::string& value) {
  
  order_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_order_name() {
  
  return order_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_order_name() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.order_name)
  return order_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_order_name(std::string* order_name) {
  if (order_name != nullptr) {
    
  } else {
    
  }
  order_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.order_name)
}

// int32 paid_at = 29;
inline void PayByRegisteredCardData::clear_paid_at() {
  paid_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardData::_internal_paid_at() const {
  return paid_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardData::paid_at() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.paid_at)
  return _internal_paid_at();
}
inline void PayByRegisteredCardData::_internal_set_paid_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  paid_at_ = value;
}
inline void PayByRegisteredCardData::set_paid_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_paid_at(value);
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.paid_at)
}

// string pay_method = 30;
inline void PayByRegisteredCardData::clear_pay_method() {
  pay_method_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::pay_method() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.pay_method)
  return _internal_pay_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_pay_method(ArgT0&& arg0, ArgT... args) {
 
 pay_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.pay_method)
}
inline std::string* PayByRegisteredCardData::mutable_pay_method() {
  std::string* _s = _internal_mutable_pay_method();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.pay_method)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_pay_method() const {
  return pay_method_.Get();
}
inline void PayByRegisteredCardData::_internal_set_pay_method(const std::string& value) {
  
  pay_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_pay_method() {
  
  return pay_method_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_pay_method() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.pay_method)
  return pay_method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_pay_method(std::string* pay_method) {
  if (pay_method != nullptr) {
    
  } else {
    
  }
  pay_method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pay_method,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.pay_method)
}

// string pg_id = 31;
inline void PayByRegisteredCardData::clear_pg_id() {
  pg_id_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::pg_id() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.pg_id)
  return _internal_pg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_pg_id(ArgT0&& arg0, ArgT... args) {
 
 pg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.pg_id)
}
inline std::string* PayByRegisteredCardData::mutable_pg_id() {
  std::string* _s = _internal_mutable_pg_id();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.pg_id)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_pg_id() const {
  return pg_id_.Get();
}
inline void PayByRegisteredCardData::_internal_set_pg_id(const std::string& value) {
  
  pg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_pg_id() {
  
  return pg_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_pg_id() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.pg_id)
  return pg_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_pg_id(std::string* pg_id) {
  if (pg_id != nullptr) {
    
  } else {
    
  }
  pg_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.pg_id)
}

// string pg_provider = 32;
inline void PayByRegisteredCardData::clear_pg_provider() {
  pg_provider_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::pg_provider() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.pg_provider)
  return _internal_pg_provider();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_pg_provider(ArgT0&& arg0, ArgT... args) {
 
 pg_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.pg_provider)
}
inline std::string* PayByRegisteredCardData::mutable_pg_provider() {
  std::string* _s = _internal_mutable_pg_provider();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.pg_provider)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_pg_provider() const {
  return pg_provider_.Get();
}
inline void PayByRegisteredCardData::_internal_set_pg_provider(const std::string& value) {
  
  pg_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_pg_provider() {
  
  return pg_provider_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_pg_provider() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.pg_provider)
  return pg_provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_pg_provider(std::string* pg_provider) {
  if (pg_provider != nullptr) {
    
  } else {
    
  }
  pg_provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg_provider,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.pg_provider)
}

// string pg_tid = 33;
inline void PayByRegisteredCardData::clear_pg_tid() {
  pg_tid_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::pg_tid() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.pg_tid)
  return _internal_pg_tid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_pg_tid(ArgT0&& arg0, ArgT... args) {
 
 pg_tid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.pg_tid)
}
inline std::string* PayByRegisteredCardData::mutable_pg_tid() {
  std::string* _s = _internal_mutable_pg_tid();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.pg_tid)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_pg_tid() const {
  return pg_tid_.Get();
}
inline void PayByRegisteredCardData::_internal_set_pg_tid(const std::string& value) {
  
  pg_tid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_pg_tid() {
  
  return pg_tid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_pg_tid() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.pg_tid)
  return pg_tid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_pg_tid(std::string* pg_tid) {
  if (pg_tid != nullptr) {
    
  } else {
    
  }
  pg_tid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg_tid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.pg_tid)
}

// string receipt_url = 34;
inline void PayByRegisteredCardData::clear_receipt_url() {
  receipt_url_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::receipt_url() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.receipt_url)
  return _internal_receipt_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_receipt_url(ArgT0&& arg0, ArgT... args) {
 
 receipt_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.receipt_url)
}
inline std::string* PayByRegisteredCardData::mutable_receipt_url() {
  std::string* _s = _internal_mutable_receipt_url();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.receipt_url)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_receipt_url() const {
  return receipt_url_.Get();
}
inline void PayByRegisteredCardData::_internal_set_receipt_url(const std::string& value) {
  
  receipt_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_receipt_url() {
  
  return receipt_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_receipt_url() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.receipt_url)
  return receipt_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_receipt_url(std::string* receipt_url) {
  if (receipt_url != nullptr) {
    
  } else {
    
  }
  receipt_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receipt_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.receipt_url)
}

// int32 started_at = 35;
inline void PayByRegisteredCardData::clear_started_at() {
  started_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardData::_internal_started_at() const {
  return started_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardData::started_at() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.started_at)
  return _internal_started_at();
}
inline void PayByRegisteredCardData::_internal_set_started_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  started_at_ = value;
}
inline void PayByRegisteredCardData::set_started_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_started_at(value);
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.started_at)
}

// string status = 36;
inline void PayByRegisteredCardData::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::status() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.status)
}
inline std::string* PayByRegisteredCardData::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.status)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_status() const {
  return status_.Get();
}
inline void PayByRegisteredCardData::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_status() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.status)
}

// string user_agent = 37;
inline void PayByRegisteredCardData::clear_user_agent() {
  user_agent_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardData::user_agent() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardData.user_agent)
  return _internal_user_agent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardData::set_user_agent(ArgT0&& arg0, ArgT... args) {
 
 user_agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardData.user_agent)
}
inline std::string* PayByRegisteredCardData::mutable_user_agent() {
  std::string* _s = _internal_mutable_user_agent();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardData.user_agent)
  return _s;
}
inline const std::string& PayByRegisteredCardData::_internal_user_agent() const {
  return user_agent_.Get();
}
inline void PayByRegisteredCardData::_internal_set_user_agent(const std::string& value) {
  
  user_agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::_internal_mutable_user_agent() {
  
  return user_agent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardData::release_user_agent() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardData.user_agent)
  return user_agent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardData::set_allocated_user_agent(std::string* user_agent) {
  if (user_agent != nullptr) {
    
  } else {
    
  }
  user_agent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_agent,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardData.user_agent)
}

// -------------------------------------------------------------------

// PayByRegisteredCardResponse

// int32 code = 1;
inline void PayByRegisteredCardResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayByRegisteredCardResponse::code() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardResponse.code)
  return _internal_code();
}
inline void PayByRegisteredCardResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PayByRegisteredCardResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardResponse.code)
}

// string message = 2;
inline void PayByRegisteredCardResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& PayByRegisteredCardResponse::message() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayByRegisteredCardResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.PayByRegisteredCardResponse.message)
}
inline std::string* PayByRegisteredCardResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardResponse.message)
  return _s;
}
inline const std::string& PayByRegisteredCardResponse::_internal_message() const {
  return message_.Get();
}
inline void PayByRegisteredCardResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayByRegisteredCardResponse::release_message() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayByRegisteredCardResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardResponse.message)
}

// .card_v2.PayByRegisteredCardData response = 3;
inline bool PayByRegisteredCardResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool PayByRegisteredCardResponse::has_response() const {
  return _internal_has_response();
}
inline void PayByRegisteredCardResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::card_v2::PayByRegisteredCardData& PayByRegisteredCardResponse::_internal_response() const {
  const ::card_v2::PayByRegisteredCardData* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::card_v2::PayByRegisteredCardData&>(
      ::card_v2::_PayByRegisteredCardData_default_instance_);
}
inline const ::card_v2::PayByRegisteredCardData& PayByRegisteredCardResponse::response() const {
  // @@protoc_insertion_point(field_get:card_v2.PayByRegisteredCardResponse.response)
  return _internal_response();
}
inline void PayByRegisteredCardResponse::unsafe_arena_set_allocated_response(
    ::card_v2::PayByRegisteredCardData* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:card_v2.PayByRegisteredCardResponse.response)
}
inline ::card_v2::PayByRegisteredCardData* PayByRegisteredCardResponse::release_response() {
  
  ::card_v2::PayByRegisteredCardData* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::card_v2::PayByRegisteredCardData* PayByRegisteredCardResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:card_v2.PayByRegisteredCardResponse.response)
  
  ::card_v2::PayByRegisteredCardData* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::card_v2::PayByRegisteredCardData* PayByRegisteredCardResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::card_v2::PayByRegisteredCardData>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::card_v2::PayByRegisteredCardData* PayByRegisteredCardResponse::mutable_response() {
  ::card_v2::PayByRegisteredCardData* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:card_v2.PayByRegisteredCardResponse.response)
  return _msg;
}
inline void PayByRegisteredCardResponse::set_allocated_response(::card_v2::PayByRegisteredCardData* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::card_v2::PayByRegisteredCardData>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:card_v2.PayByRegisteredCardResponse.response)
}

// -------------------------------------------------------------------

// CancelHistory

// string pg_tid = 1;
inline void CancelHistory::clear_pg_tid() {
  pg_tid_.ClearToEmpty();
}
inline const std::string& CancelHistory::pg_tid() const {
  // @@protoc_insertion_point(field_get:card_v2.CancelHistory.pg_tid)
  return _internal_pg_tid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelHistory::set_pg_tid(ArgT0&& arg0, ArgT... args) {
 
 pg_tid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CancelHistory.pg_tid)
}
inline std::string* CancelHistory::mutable_pg_tid() {
  std::string* _s = _internal_mutable_pg_tid();
  // @@protoc_insertion_point(field_mutable:card_v2.CancelHistory.pg_tid)
  return _s;
}
inline const std::string& CancelHistory::_internal_pg_tid() const {
  return pg_tid_.Get();
}
inline void CancelHistory::_internal_set_pg_tid(const std::string& value) {
  
  pg_tid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelHistory::_internal_mutable_pg_tid() {
  
  return pg_tid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelHistory::release_pg_tid() {
  // @@protoc_insertion_point(field_release:card_v2.CancelHistory.pg_tid)
  return pg_tid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelHistory::set_allocated_pg_tid(std::string* pg_tid) {
  if (pg_tid != nullptr) {
    
  } else {
    
  }
  pg_tid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg_tid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CancelHistory.pg_tid)
}

// string amount = 2;
inline void CancelHistory::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& CancelHistory::amount() const {
  // @@protoc_insertion_point(field_get:card_v2.CancelHistory.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelHistory::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CancelHistory.amount)
}
inline std::string* CancelHistory::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:card_v2.CancelHistory.amount)
  return _s;
}
inline const std::string& CancelHistory::_internal_amount() const {
  return amount_.Get();
}
inline void CancelHistory::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelHistory::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelHistory::release_amount() {
  // @@protoc_insertion_point(field_release:card_v2.CancelHistory.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelHistory::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CancelHistory.amount)
}

// int32 cancelled_at = 3;
inline void CancelHistory::clear_cancelled_at() {
  cancelled_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CancelHistory::_internal_cancelled_at() const {
  return cancelled_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CancelHistory::cancelled_at() const {
  // @@protoc_insertion_point(field_get:card_v2.CancelHistory.cancelled_at)
  return _internal_cancelled_at();
}
inline void CancelHistory::_internal_set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cancelled_at_ = value;
}
inline void CancelHistory::set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cancelled_at(value);
  // @@protoc_insertion_point(field_set:card_v2.CancelHistory.cancelled_at)
}

// string reason = 4;
inline void CancelHistory::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& CancelHistory::reason() const {
  // @@protoc_insertion_point(field_get:card_v2.CancelHistory.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelHistory::set_reason(ArgT0&& arg0, ArgT... args) {
 
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CancelHistory.reason)
}
inline std::string* CancelHistory::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:card_v2.CancelHistory.reason)
  return _s;
}
inline const std::string& CancelHistory::_internal_reason() const {
  return reason_.Get();
}
inline void CancelHistory::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelHistory::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelHistory::release_reason() {
  // @@protoc_insertion_point(field_release:card_v2.CancelHistory.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelHistory::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CancelHistory.reason)
}

// string receipt_url = 5;
inline void CancelHistory::clear_receipt_url() {
  receipt_url_.ClearToEmpty();
}
inline const std::string& CancelHistory::receipt_url() const {
  // @@protoc_insertion_point(field_get:card_v2.CancelHistory.receipt_url)
  return _internal_receipt_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelHistory::set_receipt_url(ArgT0&& arg0, ArgT... args) {
 
 receipt_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CancelHistory.receipt_url)
}
inline std::string* CancelHistory::mutable_receipt_url() {
  std::string* _s = _internal_mutable_receipt_url();
  // @@protoc_insertion_point(field_mutable:card_v2.CancelHistory.receipt_url)
  return _s;
}
inline const std::string& CancelHistory::_internal_receipt_url() const {
  return receipt_url_.Get();
}
inline void CancelHistory::_internal_set_receipt_url(const std::string& value) {
  
  receipt_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelHistory::_internal_mutable_receipt_url() {
  
  return receipt_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelHistory::release_receipt_url() {
  // @@protoc_insertion_point(field_release:card_v2.CancelHistory.receipt_url)
  return receipt_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelHistory::set_allocated_receipt_url(std::string* receipt_url) {
  if (receipt_url != nullptr) {
    
  } else {
    
  }
  receipt_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receipt_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CancelHistory.receipt_url)
}

// -------------------------------------------------------------------

// CancelCardPaymentRequest

// string imp_uid = 1;
inline void CancelCardPaymentRequest::clear_imp_uid() {
  imp_uid_.ClearToEmpty();
}
inline const std::string& CancelCardPaymentRequest::imp_uid() const {
  // @@protoc_insertion_point(field_get:card_v2.CancelCardPaymentRequest.imp_uid)
  return _internal_imp_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelCardPaymentRequest::set_imp_uid(ArgT0&& arg0, ArgT... args) {
 
 imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CancelCardPaymentRequest.imp_uid)
}
inline std::string* CancelCardPaymentRequest::mutable_imp_uid() {
  std::string* _s = _internal_mutable_imp_uid();
  // @@protoc_insertion_point(field_mutable:card_v2.CancelCardPaymentRequest.imp_uid)
  return _s;
}
inline const std::string& CancelCardPaymentRequest::_internal_imp_uid() const {
  return imp_uid_.Get();
}
inline void CancelCardPaymentRequest::_internal_set_imp_uid(const std::string& value) {
  
  imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelCardPaymentRequest::_internal_mutable_imp_uid() {
  
  return imp_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelCardPaymentRequest::release_imp_uid() {
  // @@protoc_insertion_point(field_release:card_v2.CancelCardPaymentRequest.imp_uid)
  return imp_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelCardPaymentRequest::set_allocated_imp_uid(std::string* imp_uid) {
  if (imp_uid != nullptr) {
    
  } else {
    
  }
  imp_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imp_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CancelCardPaymentRequest.imp_uid)
}

// string amount = 2;
inline void CancelCardPaymentRequest::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& CancelCardPaymentRequest::amount() const {
  // @@protoc_insertion_point(field_get:card_v2.CancelCardPaymentRequest.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelCardPaymentRequest::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CancelCardPaymentRequest.amount)
}
inline std::string* CancelCardPaymentRequest::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:card_v2.CancelCardPaymentRequest.amount)
  return _s;
}
inline const std::string& CancelCardPaymentRequest::_internal_amount() const {
  return amount_.Get();
}
inline void CancelCardPaymentRequest::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelCardPaymentRequest::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelCardPaymentRequest::release_amount() {
  // @@protoc_insertion_point(field_release:card_v2.CancelCardPaymentRequest.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelCardPaymentRequest::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CancelCardPaymentRequest.amount)
}

// string merchant_uid = 3;
inline void CancelCardPaymentRequest::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& CancelCardPaymentRequest::merchant_uid() const {
  // @@protoc_insertion_point(field_get:card_v2.CancelCardPaymentRequest.merchant_uid)
  return _internal_merchant_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelCardPaymentRequest::set_merchant_uid(ArgT0&& arg0, ArgT... args) {
 
 merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CancelCardPaymentRequest.merchant_uid)
}
inline std::string* CancelCardPaymentRequest::mutable_merchant_uid() {
  std::string* _s = _internal_mutable_merchant_uid();
  // @@protoc_insertion_point(field_mutable:card_v2.CancelCardPaymentRequest.merchant_uid)
  return _s;
}
inline const std::string& CancelCardPaymentRequest::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void CancelCardPaymentRequest::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelCardPaymentRequest::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelCardPaymentRequest::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:card_v2.CancelCardPaymentRequest.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelCardPaymentRequest::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CancelCardPaymentRequest.merchant_uid)
}

// string tax_free_amount = 4;
inline void CancelCardPaymentRequest::clear_tax_free_amount() {
  tax_free_amount_.ClearToEmpty();
}
inline const std::string& CancelCardPaymentRequest::tax_free_amount() const {
  // @@protoc_insertion_point(field_get:card_v2.CancelCardPaymentRequest.tax_free_amount)
  return _internal_tax_free_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelCardPaymentRequest::set_tax_free_amount(ArgT0&& arg0, ArgT... args) {
 
 tax_free_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CancelCardPaymentRequest.tax_free_amount)
}
inline std::string* CancelCardPaymentRequest::mutable_tax_free_amount() {
  std::string* _s = _internal_mutable_tax_free_amount();
  // @@protoc_insertion_point(field_mutable:card_v2.CancelCardPaymentRequest.tax_free_amount)
  return _s;
}
inline const std::string& CancelCardPaymentRequest::_internal_tax_free_amount() const {
  return tax_free_amount_.Get();
}
inline void CancelCardPaymentRequest::_internal_set_tax_free_amount(const std::string& value) {
  
  tax_free_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelCardPaymentRequest::_internal_mutable_tax_free_amount() {
  
  return tax_free_amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelCardPaymentRequest::release_tax_free_amount() {
  // @@protoc_insertion_point(field_release:card_v2.CancelCardPaymentRequest.tax_free_amount)
  return tax_free_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelCardPaymentRequest::set_allocated_tax_free_amount(std::string* tax_free_amount) {
  if (tax_free_amount != nullptr) {
    
  } else {
    
  }
  tax_free_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tax_free_amount,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CancelCardPaymentRequest.tax_free_amount)
}

// string reason = 5;
inline void CancelCardPaymentRequest::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& CancelCardPaymentRequest::reason() const {
  // @@protoc_insertion_point(field_get:card_v2.CancelCardPaymentRequest.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelCardPaymentRequest::set_reason(ArgT0&& arg0, ArgT... args) {
 
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CancelCardPaymentRequest.reason)
}
inline std::string* CancelCardPaymentRequest::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:card_v2.CancelCardPaymentRequest.reason)
  return _s;
}
inline const std::string& CancelCardPaymentRequest::_internal_reason() const {
  return reason_.Get();
}
inline void CancelCardPaymentRequest::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelCardPaymentRequest::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelCardPaymentRequest::release_reason() {
  // @@protoc_insertion_point(field_release:card_v2.CancelCardPaymentRequest.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelCardPaymentRequest::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CancelCardPaymentRequest.reason)
}

// -------------------------------------------------------------------

// CancelCardPaymenttResponse

// int32 code = 1;
inline void CancelCardPaymenttResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CancelCardPaymenttResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CancelCardPaymenttResponse::code() const {
  // @@protoc_insertion_point(field_get:card_v2.CancelCardPaymenttResponse.code)
  return _internal_code();
}
inline void CancelCardPaymenttResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CancelCardPaymenttResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:card_v2.CancelCardPaymenttResponse.code)
}

// string message = 2;
inline void CancelCardPaymenttResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CancelCardPaymenttResponse::message() const {
  // @@protoc_insertion_point(field_get:card_v2.CancelCardPaymenttResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelCardPaymenttResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:card_v2.CancelCardPaymenttResponse.message)
}
inline std::string* CancelCardPaymenttResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:card_v2.CancelCardPaymenttResponse.message)
  return _s;
}
inline const std::string& CancelCardPaymenttResponse::_internal_message() const {
  return message_.Get();
}
inline void CancelCardPaymenttResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelCardPaymenttResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelCardPaymenttResponse::release_message() {
  // @@protoc_insertion_point(field_release:card_v2.CancelCardPaymenttResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelCardPaymenttResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:card_v2.CancelCardPaymenttResponse.message)
}

// .card_v2.PayByRegisteredCardData response = 3;
inline bool CancelCardPaymenttResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool CancelCardPaymenttResponse::has_response() const {
  return _internal_has_response();
}
inline void CancelCardPaymenttResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::card_v2::PayByRegisteredCardData& CancelCardPaymenttResponse::_internal_response() const {
  const ::card_v2::PayByRegisteredCardData* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::card_v2::PayByRegisteredCardData&>(
      ::card_v2::_PayByRegisteredCardData_default_instance_);
}
inline const ::card_v2::PayByRegisteredCardData& CancelCardPaymenttResponse::response() const {
  // @@protoc_insertion_point(field_get:card_v2.CancelCardPaymenttResponse.response)
  return _internal_response();
}
inline void CancelCardPaymenttResponse::unsafe_arena_set_allocated_response(
    ::card_v2::PayByRegisteredCardData* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:card_v2.CancelCardPaymenttResponse.response)
}
inline ::card_v2::PayByRegisteredCardData* CancelCardPaymenttResponse::release_response() {
  
  ::card_v2::PayByRegisteredCardData* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::card_v2::PayByRegisteredCardData* CancelCardPaymenttResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:card_v2.CancelCardPaymenttResponse.response)
  
  ::card_v2::PayByRegisteredCardData* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::card_v2::PayByRegisteredCardData* CancelCardPaymenttResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::card_v2::PayByRegisteredCardData>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::card_v2::PayByRegisteredCardData* CancelCardPaymenttResponse::mutable_response() {
  ::card_v2::PayByRegisteredCardData* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:card_v2.CancelCardPaymenttResponse.response)
  return _msg;
}
inline void CancelCardPaymenttResponse::set_allocated_response(::card_v2::PayByRegisteredCardData* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::card_v2::PayByRegisteredCardData>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:card_v2.CancelCardPaymenttResponse.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace card_v2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_v2_2fpayments_2fcard_2fcard_2eproto
