// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v2/txs/txs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_v2_2ftxs_2ftxs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_v2_2ftxs_2ftxs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "v2/basis/basis.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_v2_2ftxs_2ftxs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_v2_2ftxs_2ftxs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v2_2ftxs_2ftxs_2eproto;
namespace txs_v2 {
class GetTxsRecordsReponse;
class GetTxsRecordsReponseDefaultTypeInternal;
extern GetTxsRecordsReponseDefaultTypeInternal _GetTxsRecordsReponse_default_instance_;
class GetTxsRecordsRequest;
class GetTxsRecordsRequestDefaultTypeInternal;
extern GetTxsRecordsRequestDefaultTypeInternal _GetTxsRecordsRequest_default_instance_;
}  // namespace txs_v2
PROTOBUF_NAMESPACE_OPEN
template<> ::txs_v2::GetTxsRecordsReponse* Arena::CreateMaybeMessage<::txs_v2::GetTxsRecordsReponse>(Arena*);
template<> ::txs_v2::GetTxsRecordsRequest* Arena::CreateMaybeMessage<::txs_v2::GetTxsRecordsRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace txs_v2 {

// ===================================================================

class GetTxsRecordsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txs_v2.GetTxsRecordsRequest) */ {
 public:
  inline GetTxsRecordsRequest() : GetTxsRecordsRequest(nullptr) {}
  virtual ~GetTxsRecordsRequest();

  GetTxsRecordsRequest(const GetTxsRecordsRequest& from);
  GetTxsRecordsRequest(GetTxsRecordsRequest&& from) noexcept
    : GetTxsRecordsRequest() {
    *this = ::std::move(from);
  }

  inline GetTxsRecordsRequest& operator=(const GetTxsRecordsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxsRecordsRequest& operator=(GetTxsRecordsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTxsRecordsRequest& default_instance();

  static inline const GetTxsRecordsRequest* internal_default_instance() {
    return reinterpret_cast<const GetTxsRecordsRequest*>(
               &_GetTxsRecordsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetTxsRecordsRequest& a, GetTxsRecordsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxsRecordsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTxsRecordsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTxsRecordsRequest* New() const final {
    return CreateMaybeMessage<GetTxsRecordsRequest>(nullptr);
  }

  GetTxsRecordsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTxsRecordsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTxsRecordsRequest& from);
  void MergeFrom(const GetTxsRecordsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxsRecordsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txs_v2.GetTxsRecordsRequest";
  }
  protected:
  explicit GetTxsRecordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v2_2ftxs_2ftxs_2eproto);
    return ::descriptor_table_v2_2ftxs_2ftxs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 4,
    kPgProviderFieldNumber = 8,
    kPayMethodFieldNumber = 9,
    kOutputFormatFieldNumber = 16,
    kImpUidFieldNumber = 1,
    kMerchantUidFieldNumber = 2,
    kPaidByFieldNumber = 3,
    kSortingFieldNumber = 6,
    kBuyerNameFieldNumber = 10,
    kBuyerTelFieldNumber = 11,
    kBuyerEmailFieldNumber = 12,
    kStartFieldNumber = 13,
    kEndFieldNumber = 14,
    kPageFieldNumber = 5,
    kLimitFieldNumber = 7,
    kSandboxFieldNumber = 15,
  };
  // repeated string status = 4;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  const std::string& status(int index) const;
  std::string* mutable_status(int index);
  void set_status(int index, const std::string& value);
  void set_status(int index, std::string&& value);
  void set_status(int index, const char* value);
  void set_status(int index, const char* value, size_t size);
  std::string* add_status();
  void add_status(const std::string& value);
  void add_status(std::string&& value);
  void add_status(const char* value);
  void add_status(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_status();
  private:
  const std::string& _internal_status(int index) const;
  std::string* _internal_add_status();
  public:

  // repeated string pg_provider = 8;
  int pg_provider_size() const;
  private:
  int _internal_pg_provider_size() const;
  public:
  void clear_pg_provider();
  const std::string& pg_provider(int index) const;
  std::string* mutable_pg_provider(int index);
  void set_pg_provider(int index, const std::string& value);
  void set_pg_provider(int index, std::string&& value);
  void set_pg_provider(int index, const char* value);
  void set_pg_provider(int index, const char* value, size_t size);
  std::string* add_pg_provider();
  void add_pg_provider(const std::string& value);
  void add_pg_provider(std::string&& value);
  void add_pg_provider(const char* value);
  void add_pg_provider(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pg_provider() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pg_provider();
  private:
  const std::string& _internal_pg_provider(int index) const;
  std::string* _internal_add_pg_provider();
  public:

  // repeated string pay_method = 9;
  int pay_method_size() const;
  private:
  int _internal_pay_method_size() const;
  public:
  void clear_pay_method();
  const std::string& pay_method(int index) const;
  std::string* mutable_pay_method(int index);
  void set_pay_method(int index, const std::string& value);
  void set_pay_method(int index, std::string&& value);
  void set_pay_method(int index, const char* value);
  void set_pay_method(int index, const char* value, size_t size);
  std::string* add_pay_method();
  void add_pay_method(const std::string& value);
  void add_pay_method(std::string&& value);
  void add_pay_method(const char* value);
  void add_pay_method(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pay_method() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pay_method();
  private:
  const std::string& _internal_pay_method(int index) const;
  std::string* _internal_add_pay_method();
  public:

  // repeated string output_format = 16;
  int output_format_size() const;
  private:
  int _internal_output_format_size() const;
  public:
  void clear_output_format();
  const std::string& output_format(int index) const;
  std::string* mutable_output_format(int index);
  void set_output_format(int index, const std::string& value);
  void set_output_format(int index, std::string&& value);
  void set_output_format(int index, const char* value);
  void set_output_format(int index, const char* value, size_t size);
  std::string* add_output_format();
  void add_output_format(const std::string& value);
  void add_output_format(std::string&& value);
  void add_output_format(const char* value);
  void add_output_format(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_format() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_format();
  private:
  const std::string& _internal_output_format(int index) const;
  std::string* _internal_add_output_format();
  public:

  // string imp_uid = 1;
  void clear_imp_uid();
  const std::string& imp_uid() const;
  void set_imp_uid(const std::string& value);
  void set_imp_uid(std::string&& value);
  void set_imp_uid(const char* value);
  void set_imp_uid(const char* value, size_t size);
  std::string* mutable_imp_uid();
  std::string* release_imp_uid();
  void set_allocated_imp_uid(std::string* imp_uid);
  private:
  const std::string& _internal_imp_uid() const;
  void _internal_set_imp_uid(const std::string& value);
  std::string* _internal_mutable_imp_uid();
  public:

  // string merchant_uid = 2;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  void set_merchant_uid(const std::string& value);
  void set_merchant_uid(std::string&& value);
  void set_merchant_uid(const char* value);
  void set_merchant_uid(const char* value, size_t size);
  std::string* mutable_merchant_uid();
  std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // string paid_by = 3;
  void clear_paid_by();
  const std::string& paid_by() const;
  void set_paid_by(const std::string& value);
  void set_paid_by(std::string&& value);
  void set_paid_by(const char* value);
  void set_paid_by(const char* value, size_t size);
  std::string* mutable_paid_by();
  std::string* release_paid_by();
  void set_allocated_paid_by(std::string* paid_by);
  private:
  const std::string& _internal_paid_by() const;
  void _internal_set_paid_by(const std::string& value);
  std::string* _internal_mutable_paid_by();
  public:

  // string sorting = 6;
  void clear_sorting();
  const std::string& sorting() const;
  void set_sorting(const std::string& value);
  void set_sorting(std::string&& value);
  void set_sorting(const char* value);
  void set_sorting(const char* value, size_t size);
  std::string* mutable_sorting();
  std::string* release_sorting();
  void set_allocated_sorting(std::string* sorting);
  private:
  const std::string& _internal_sorting() const;
  void _internal_set_sorting(const std::string& value);
  std::string* _internal_mutable_sorting();
  public:

  // string buyer_name = 10;
  void clear_buyer_name();
  const std::string& buyer_name() const;
  void set_buyer_name(const std::string& value);
  void set_buyer_name(std::string&& value);
  void set_buyer_name(const char* value);
  void set_buyer_name(const char* value, size_t size);
  std::string* mutable_buyer_name();
  std::string* release_buyer_name();
  void set_allocated_buyer_name(std::string* buyer_name);
  private:
  const std::string& _internal_buyer_name() const;
  void _internal_set_buyer_name(const std::string& value);
  std::string* _internal_mutable_buyer_name();
  public:

  // string buyer_tel = 11;
  void clear_buyer_tel();
  const std::string& buyer_tel() const;
  void set_buyer_tel(const std::string& value);
  void set_buyer_tel(std::string&& value);
  void set_buyer_tel(const char* value);
  void set_buyer_tel(const char* value, size_t size);
  std::string* mutable_buyer_tel();
  std::string* release_buyer_tel();
  void set_allocated_buyer_tel(std::string* buyer_tel);
  private:
  const std::string& _internal_buyer_tel() const;
  void _internal_set_buyer_tel(const std::string& value);
  std::string* _internal_mutable_buyer_tel();
  public:

  // string buyer_email = 12;
  void clear_buyer_email();
  const std::string& buyer_email() const;
  void set_buyer_email(const std::string& value);
  void set_buyer_email(std::string&& value);
  void set_buyer_email(const char* value);
  void set_buyer_email(const char* value, size_t size);
  std::string* mutable_buyer_email();
  std::string* release_buyer_email();
  void set_allocated_buyer_email(std::string* buyer_email);
  private:
  const std::string& _internal_buyer_email() const;
  void _internal_set_buyer_email(const std::string& value);
  std::string* _internal_mutable_buyer_email();
  public:

  // string start = 13;
  void clear_start();
  const std::string& start() const;
  void set_start(const std::string& value);
  void set_start(std::string&& value);
  void set_start(const char* value);
  void set_start(const char* value, size_t size);
  std::string* mutable_start();
  std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // string end = 14;
  void clear_end();
  const std::string& end() const;
  void set_end(const std::string& value);
  void set_end(std::string&& value);
  void set_end(const char* value);
  void set_end(const char* value, size_t size);
  std::string* mutable_end();
  std::string* release_end();
  void set_allocated_end(std::string* end);
  private:
  const std::string& _internal_end() const;
  void _internal_set_end(const std::string& value);
  std::string* _internal_mutable_end();
  public:

  // int32 page = 5;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 limit = 7;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool sandbox = 15;
  void clear_sandbox();
  bool sandbox() const;
  void set_sandbox(bool value);
  private:
  bool _internal_sandbox() const;
  void _internal_set_sandbox(bool value);
  public:

  // @@protoc_insertion_point(class_scope:txs_v2.GetTxsRecordsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pg_provider_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pay_method_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imp_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paid_by_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sorting_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  bool sandbox_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2ftxs_2ftxs_2eproto;
};
// -------------------------------------------------------------------

class GetTxsRecordsReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txs_v2.GetTxsRecordsReponse) */ {
 public:
  inline GetTxsRecordsReponse() : GetTxsRecordsReponse(nullptr) {}
  virtual ~GetTxsRecordsReponse();

  GetTxsRecordsReponse(const GetTxsRecordsReponse& from);
  GetTxsRecordsReponse(GetTxsRecordsReponse&& from) noexcept
    : GetTxsRecordsReponse() {
    *this = ::std::move(from);
  }

  inline GetTxsRecordsReponse& operator=(const GetTxsRecordsReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxsRecordsReponse& operator=(GetTxsRecordsReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTxsRecordsReponse& default_instance();

  static inline const GetTxsRecordsReponse* internal_default_instance() {
    return reinterpret_cast<const GetTxsRecordsReponse*>(
               &_GetTxsRecordsReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetTxsRecordsReponse& a, GetTxsRecordsReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxsRecordsReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTxsRecordsReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTxsRecordsReponse* New() const final {
    return CreateMaybeMessage<GetTxsRecordsReponse>(nullptr);
  }

  GetTxsRecordsReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTxsRecordsReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTxsRecordsReponse& from);
  void MergeFrom(const GetTxsRecordsReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxsRecordsReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txs_v2.GetTxsRecordsReponse";
  }
  protected:
  explicit GetTxsRecordsReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v2_2ftxs_2ftxs_2eproto);
    return ::descriptor_table_v2_2ftxs_2ftxs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .basis_v2.UnitTx response = 3;
  int response_size() const;
  private:
  int _internal_response_size() const;
  public:
  void clear_response();
  ::basis_v2::UnitTx* mutable_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::basis_v2::UnitTx >*
      mutable_response();
  private:
  const ::basis_v2::UnitTx& _internal_response(int index) const;
  ::basis_v2::UnitTx* _internal_add_response();
  public:
  const ::basis_v2::UnitTx& response(int index) const;
  ::basis_v2::UnitTx* add_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::basis_v2::UnitTx >&
      response() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:txs_v2.GetTxsRecordsReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::basis_v2::UnitTx > response_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v2_2ftxs_2ftxs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetTxsRecordsRequest

// string imp_uid = 1;
inline void GetTxsRecordsRequest::clear_imp_uid() {
  imp_uid_.ClearToEmpty();
}
inline const std::string& GetTxsRecordsRequest::imp_uid() const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.imp_uid)
  return _internal_imp_uid();
}
inline void GetTxsRecordsRequest::set_imp_uid(const std::string& value) {
  _internal_set_imp_uid(value);
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.imp_uid)
}
inline std::string* GetTxsRecordsRequest::mutable_imp_uid() {
  // @@protoc_insertion_point(field_mutable:txs_v2.GetTxsRecordsRequest.imp_uid)
  return _internal_mutable_imp_uid();
}
inline const std::string& GetTxsRecordsRequest::_internal_imp_uid() const {
  return imp_uid_.Get();
}
inline void GetTxsRecordsRequest::_internal_set_imp_uid(const std::string& value) {
  
  imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTxsRecordsRequest::set_imp_uid(std::string&& value) {
  
  imp_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txs_v2.GetTxsRecordsRequest.imp_uid)
}
inline void GetTxsRecordsRequest::set_imp_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txs_v2.GetTxsRecordsRequest.imp_uid)
}
inline void GetTxsRecordsRequest::set_imp_uid(const char* value,
    size_t size) {
  
  imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txs_v2.GetTxsRecordsRequest.imp_uid)
}
inline std::string* GetTxsRecordsRequest::_internal_mutable_imp_uid() {
  
  return imp_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTxsRecordsRequest::release_imp_uid() {
  // @@protoc_insertion_point(field_release:txs_v2.GetTxsRecordsRequest.imp_uid)
  return imp_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTxsRecordsRequest::set_allocated_imp_uid(std::string* imp_uid) {
  if (imp_uid != nullptr) {
    
  } else {
    
  }
  imp_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imp_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txs_v2.GetTxsRecordsRequest.imp_uid)
}

// string merchant_uid = 2;
inline void GetTxsRecordsRequest::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& GetTxsRecordsRequest::merchant_uid() const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.merchant_uid)
  return _internal_merchant_uid();
}
inline void GetTxsRecordsRequest::set_merchant_uid(const std::string& value) {
  _internal_set_merchant_uid(value);
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.merchant_uid)
}
inline std::string* GetTxsRecordsRequest::mutable_merchant_uid() {
  // @@protoc_insertion_point(field_mutable:txs_v2.GetTxsRecordsRequest.merchant_uid)
  return _internal_mutable_merchant_uid();
}
inline const std::string& GetTxsRecordsRequest::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void GetTxsRecordsRequest::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTxsRecordsRequest::set_merchant_uid(std::string&& value) {
  
  merchant_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txs_v2.GetTxsRecordsRequest.merchant_uid)
}
inline void GetTxsRecordsRequest::set_merchant_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txs_v2.GetTxsRecordsRequest.merchant_uid)
}
inline void GetTxsRecordsRequest::set_merchant_uid(const char* value,
    size_t size) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txs_v2.GetTxsRecordsRequest.merchant_uid)
}
inline std::string* GetTxsRecordsRequest::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTxsRecordsRequest::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:txs_v2.GetTxsRecordsRequest.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTxsRecordsRequest::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txs_v2.GetTxsRecordsRequest.merchant_uid)
}

// string paid_by = 3;
inline void GetTxsRecordsRequest::clear_paid_by() {
  paid_by_.ClearToEmpty();
}
inline const std::string& GetTxsRecordsRequest::paid_by() const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.paid_by)
  return _internal_paid_by();
}
inline void GetTxsRecordsRequest::set_paid_by(const std::string& value) {
  _internal_set_paid_by(value);
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.paid_by)
}
inline std::string* GetTxsRecordsRequest::mutable_paid_by() {
  // @@protoc_insertion_point(field_mutable:txs_v2.GetTxsRecordsRequest.paid_by)
  return _internal_mutable_paid_by();
}
inline const std::string& GetTxsRecordsRequest::_internal_paid_by() const {
  return paid_by_.Get();
}
inline void GetTxsRecordsRequest::_internal_set_paid_by(const std::string& value) {
  
  paid_by_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTxsRecordsRequest::set_paid_by(std::string&& value) {
  
  paid_by_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txs_v2.GetTxsRecordsRequest.paid_by)
}
inline void GetTxsRecordsRequest::set_paid_by(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paid_by_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txs_v2.GetTxsRecordsRequest.paid_by)
}
inline void GetTxsRecordsRequest::set_paid_by(const char* value,
    size_t size) {
  
  paid_by_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txs_v2.GetTxsRecordsRequest.paid_by)
}
inline std::string* GetTxsRecordsRequest::_internal_mutable_paid_by() {
  
  return paid_by_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTxsRecordsRequest::release_paid_by() {
  // @@protoc_insertion_point(field_release:txs_v2.GetTxsRecordsRequest.paid_by)
  return paid_by_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTxsRecordsRequest::set_allocated_paid_by(std::string* paid_by) {
  if (paid_by != nullptr) {
    
  } else {
    
  }
  paid_by_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paid_by,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txs_v2.GetTxsRecordsRequest.paid_by)
}

// repeated string status = 4;
inline int GetTxsRecordsRequest::_internal_status_size() const {
  return status_.size();
}
inline int GetTxsRecordsRequest::status_size() const {
  return _internal_status_size();
}
inline void GetTxsRecordsRequest::clear_status() {
  status_.Clear();
}
inline std::string* GetTxsRecordsRequest::add_status() {
  // @@protoc_insertion_point(field_add_mutable:txs_v2.GetTxsRecordsRequest.status)
  return _internal_add_status();
}
inline const std::string& GetTxsRecordsRequest::_internal_status(int index) const {
  return status_.Get(index);
}
inline const std::string& GetTxsRecordsRequest::status(int index) const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.status)
  return _internal_status(index);
}
inline std::string* GetTxsRecordsRequest::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:txs_v2.GetTxsRecordsRequest.status)
  return status_.Mutable(index);
}
inline void GetTxsRecordsRequest::set_status(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.status)
  status_.Mutable(index)->assign(value);
}
inline void GetTxsRecordsRequest::set_status(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.status)
  status_.Mutable(index)->assign(std::move(value));
}
inline void GetTxsRecordsRequest::set_status(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  status_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txs_v2.GetTxsRecordsRequest.status)
}
inline void GetTxsRecordsRequest::set_status(int index, const char* value, size_t size) {
  status_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txs_v2.GetTxsRecordsRequest.status)
}
inline std::string* GetTxsRecordsRequest::_internal_add_status() {
  return status_.Add();
}
inline void GetTxsRecordsRequest::add_status(const std::string& value) {
  status_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txs_v2.GetTxsRecordsRequest.status)
}
inline void GetTxsRecordsRequest::add_status(std::string&& value) {
  status_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txs_v2.GetTxsRecordsRequest.status)
}
inline void GetTxsRecordsRequest::add_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  status_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txs_v2.GetTxsRecordsRequest.status)
}
inline void GetTxsRecordsRequest::add_status(const char* value, size_t size) {
  status_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txs_v2.GetTxsRecordsRequest.status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTxsRecordsRequest::status() const {
  // @@protoc_insertion_point(field_list:txs_v2.GetTxsRecordsRequest.status)
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTxsRecordsRequest::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:txs_v2.GetTxsRecordsRequest.status)
  return &status_;
}

// int32 page = 5;
inline void GetTxsRecordsRequest::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTxsRecordsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTxsRecordsRequest::page() const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.page)
  return _internal_page();
}
inline void GetTxsRecordsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void GetTxsRecordsRequest::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.page)
}

// string sorting = 6;
inline void GetTxsRecordsRequest::clear_sorting() {
  sorting_.ClearToEmpty();
}
inline const std::string& GetTxsRecordsRequest::sorting() const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.sorting)
  return _internal_sorting();
}
inline void GetTxsRecordsRequest::set_sorting(const std::string& value) {
  _internal_set_sorting(value);
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.sorting)
}
inline std::string* GetTxsRecordsRequest::mutable_sorting() {
  // @@protoc_insertion_point(field_mutable:txs_v2.GetTxsRecordsRequest.sorting)
  return _internal_mutable_sorting();
}
inline const std::string& GetTxsRecordsRequest::_internal_sorting() const {
  return sorting_.Get();
}
inline void GetTxsRecordsRequest::_internal_set_sorting(const std::string& value) {
  
  sorting_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTxsRecordsRequest::set_sorting(std::string&& value) {
  
  sorting_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txs_v2.GetTxsRecordsRequest.sorting)
}
inline void GetTxsRecordsRequest::set_sorting(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sorting_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txs_v2.GetTxsRecordsRequest.sorting)
}
inline void GetTxsRecordsRequest::set_sorting(const char* value,
    size_t size) {
  
  sorting_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txs_v2.GetTxsRecordsRequest.sorting)
}
inline std::string* GetTxsRecordsRequest::_internal_mutable_sorting() {
  
  return sorting_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTxsRecordsRequest::release_sorting() {
  // @@protoc_insertion_point(field_release:txs_v2.GetTxsRecordsRequest.sorting)
  return sorting_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTxsRecordsRequest::set_allocated_sorting(std::string* sorting) {
  if (sorting != nullptr) {
    
  } else {
    
  }
  sorting_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sorting,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txs_v2.GetTxsRecordsRequest.sorting)
}

// int32 limit = 7;
inline void GetTxsRecordsRequest::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTxsRecordsRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTxsRecordsRequest::limit() const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.limit)
  return _internal_limit();
}
inline void GetTxsRecordsRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void GetTxsRecordsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.limit)
}

// repeated string pg_provider = 8;
inline int GetTxsRecordsRequest::_internal_pg_provider_size() const {
  return pg_provider_.size();
}
inline int GetTxsRecordsRequest::pg_provider_size() const {
  return _internal_pg_provider_size();
}
inline void GetTxsRecordsRequest::clear_pg_provider() {
  pg_provider_.Clear();
}
inline std::string* GetTxsRecordsRequest::add_pg_provider() {
  // @@protoc_insertion_point(field_add_mutable:txs_v2.GetTxsRecordsRequest.pg_provider)
  return _internal_add_pg_provider();
}
inline const std::string& GetTxsRecordsRequest::_internal_pg_provider(int index) const {
  return pg_provider_.Get(index);
}
inline const std::string& GetTxsRecordsRequest::pg_provider(int index) const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.pg_provider)
  return _internal_pg_provider(index);
}
inline std::string* GetTxsRecordsRequest::mutable_pg_provider(int index) {
  // @@protoc_insertion_point(field_mutable:txs_v2.GetTxsRecordsRequest.pg_provider)
  return pg_provider_.Mutable(index);
}
inline void GetTxsRecordsRequest::set_pg_provider(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.pg_provider)
  pg_provider_.Mutable(index)->assign(value);
}
inline void GetTxsRecordsRequest::set_pg_provider(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.pg_provider)
  pg_provider_.Mutable(index)->assign(std::move(value));
}
inline void GetTxsRecordsRequest::set_pg_provider(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pg_provider_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txs_v2.GetTxsRecordsRequest.pg_provider)
}
inline void GetTxsRecordsRequest::set_pg_provider(int index, const char* value, size_t size) {
  pg_provider_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txs_v2.GetTxsRecordsRequest.pg_provider)
}
inline std::string* GetTxsRecordsRequest::_internal_add_pg_provider() {
  return pg_provider_.Add();
}
inline void GetTxsRecordsRequest::add_pg_provider(const std::string& value) {
  pg_provider_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txs_v2.GetTxsRecordsRequest.pg_provider)
}
inline void GetTxsRecordsRequest::add_pg_provider(std::string&& value) {
  pg_provider_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txs_v2.GetTxsRecordsRequest.pg_provider)
}
inline void GetTxsRecordsRequest::add_pg_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pg_provider_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txs_v2.GetTxsRecordsRequest.pg_provider)
}
inline void GetTxsRecordsRequest::add_pg_provider(const char* value, size_t size) {
  pg_provider_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txs_v2.GetTxsRecordsRequest.pg_provider)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTxsRecordsRequest::pg_provider() const {
  // @@protoc_insertion_point(field_list:txs_v2.GetTxsRecordsRequest.pg_provider)
  return pg_provider_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTxsRecordsRequest::mutable_pg_provider() {
  // @@protoc_insertion_point(field_mutable_list:txs_v2.GetTxsRecordsRequest.pg_provider)
  return &pg_provider_;
}

// repeated string pay_method = 9;
inline int GetTxsRecordsRequest::_internal_pay_method_size() const {
  return pay_method_.size();
}
inline int GetTxsRecordsRequest::pay_method_size() const {
  return _internal_pay_method_size();
}
inline void GetTxsRecordsRequest::clear_pay_method() {
  pay_method_.Clear();
}
inline std::string* GetTxsRecordsRequest::add_pay_method() {
  // @@protoc_insertion_point(field_add_mutable:txs_v2.GetTxsRecordsRequest.pay_method)
  return _internal_add_pay_method();
}
inline const std::string& GetTxsRecordsRequest::_internal_pay_method(int index) const {
  return pay_method_.Get(index);
}
inline const std::string& GetTxsRecordsRequest::pay_method(int index) const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.pay_method)
  return _internal_pay_method(index);
}
inline std::string* GetTxsRecordsRequest::mutable_pay_method(int index) {
  // @@protoc_insertion_point(field_mutable:txs_v2.GetTxsRecordsRequest.pay_method)
  return pay_method_.Mutable(index);
}
inline void GetTxsRecordsRequest::set_pay_method(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.pay_method)
  pay_method_.Mutable(index)->assign(value);
}
inline void GetTxsRecordsRequest::set_pay_method(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.pay_method)
  pay_method_.Mutable(index)->assign(std::move(value));
}
inline void GetTxsRecordsRequest::set_pay_method(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pay_method_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txs_v2.GetTxsRecordsRequest.pay_method)
}
inline void GetTxsRecordsRequest::set_pay_method(int index, const char* value, size_t size) {
  pay_method_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txs_v2.GetTxsRecordsRequest.pay_method)
}
inline std::string* GetTxsRecordsRequest::_internal_add_pay_method() {
  return pay_method_.Add();
}
inline void GetTxsRecordsRequest::add_pay_method(const std::string& value) {
  pay_method_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txs_v2.GetTxsRecordsRequest.pay_method)
}
inline void GetTxsRecordsRequest::add_pay_method(std::string&& value) {
  pay_method_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txs_v2.GetTxsRecordsRequest.pay_method)
}
inline void GetTxsRecordsRequest::add_pay_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pay_method_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txs_v2.GetTxsRecordsRequest.pay_method)
}
inline void GetTxsRecordsRequest::add_pay_method(const char* value, size_t size) {
  pay_method_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txs_v2.GetTxsRecordsRequest.pay_method)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTxsRecordsRequest::pay_method() const {
  // @@protoc_insertion_point(field_list:txs_v2.GetTxsRecordsRequest.pay_method)
  return pay_method_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTxsRecordsRequest::mutable_pay_method() {
  // @@protoc_insertion_point(field_mutable_list:txs_v2.GetTxsRecordsRequest.pay_method)
  return &pay_method_;
}

// string buyer_name = 10;
inline void GetTxsRecordsRequest::clear_buyer_name() {
  buyer_name_.ClearToEmpty();
}
inline const std::string& GetTxsRecordsRequest::buyer_name() const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.buyer_name)
  return _internal_buyer_name();
}
inline void GetTxsRecordsRequest::set_buyer_name(const std::string& value) {
  _internal_set_buyer_name(value);
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.buyer_name)
}
inline std::string* GetTxsRecordsRequest::mutable_buyer_name() {
  // @@protoc_insertion_point(field_mutable:txs_v2.GetTxsRecordsRequest.buyer_name)
  return _internal_mutable_buyer_name();
}
inline const std::string& GetTxsRecordsRequest::_internal_buyer_name() const {
  return buyer_name_.Get();
}
inline void GetTxsRecordsRequest::_internal_set_buyer_name(const std::string& value) {
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTxsRecordsRequest::set_buyer_name(std::string&& value) {
  
  buyer_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txs_v2.GetTxsRecordsRequest.buyer_name)
}
inline void GetTxsRecordsRequest::set_buyer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txs_v2.GetTxsRecordsRequest.buyer_name)
}
inline void GetTxsRecordsRequest::set_buyer_name(const char* value,
    size_t size) {
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txs_v2.GetTxsRecordsRequest.buyer_name)
}
inline std::string* GetTxsRecordsRequest::_internal_mutable_buyer_name() {
  
  return buyer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTxsRecordsRequest::release_buyer_name() {
  // @@protoc_insertion_point(field_release:txs_v2.GetTxsRecordsRequest.buyer_name)
  return buyer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTxsRecordsRequest::set_allocated_buyer_name(std::string* buyer_name) {
  if (buyer_name != nullptr) {
    
  } else {
    
  }
  buyer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txs_v2.GetTxsRecordsRequest.buyer_name)
}

// string buyer_tel = 11;
inline void GetTxsRecordsRequest::clear_buyer_tel() {
  buyer_tel_.ClearToEmpty();
}
inline const std::string& GetTxsRecordsRequest::buyer_tel() const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.buyer_tel)
  return _internal_buyer_tel();
}
inline void GetTxsRecordsRequest::set_buyer_tel(const std::string& value) {
  _internal_set_buyer_tel(value);
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.buyer_tel)
}
inline std::string* GetTxsRecordsRequest::mutable_buyer_tel() {
  // @@protoc_insertion_point(field_mutable:txs_v2.GetTxsRecordsRequest.buyer_tel)
  return _internal_mutable_buyer_tel();
}
inline const std::string& GetTxsRecordsRequest::_internal_buyer_tel() const {
  return buyer_tel_.Get();
}
inline void GetTxsRecordsRequest::_internal_set_buyer_tel(const std::string& value) {
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTxsRecordsRequest::set_buyer_tel(std::string&& value) {
  
  buyer_tel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txs_v2.GetTxsRecordsRequest.buyer_tel)
}
inline void GetTxsRecordsRequest::set_buyer_tel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txs_v2.GetTxsRecordsRequest.buyer_tel)
}
inline void GetTxsRecordsRequest::set_buyer_tel(const char* value,
    size_t size) {
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txs_v2.GetTxsRecordsRequest.buyer_tel)
}
inline std::string* GetTxsRecordsRequest::_internal_mutable_buyer_tel() {
  
  return buyer_tel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTxsRecordsRequest::release_buyer_tel() {
  // @@protoc_insertion_point(field_release:txs_v2.GetTxsRecordsRequest.buyer_tel)
  return buyer_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTxsRecordsRequest::set_allocated_buyer_tel(std::string* buyer_tel) {
  if (buyer_tel != nullptr) {
    
  } else {
    
  }
  buyer_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_tel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txs_v2.GetTxsRecordsRequest.buyer_tel)
}

// string buyer_email = 12;
inline void GetTxsRecordsRequest::clear_buyer_email() {
  buyer_email_.ClearToEmpty();
}
inline const std::string& GetTxsRecordsRequest::buyer_email() const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.buyer_email)
  return _internal_buyer_email();
}
inline void GetTxsRecordsRequest::set_buyer_email(const std::string& value) {
  _internal_set_buyer_email(value);
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.buyer_email)
}
inline std::string* GetTxsRecordsRequest::mutable_buyer_email() {
  // @@protoc_insertion_point(field_mutable:txs_v2.GetTxsRecordsRequest.buyer_email)
  return _internal_mutable_buyer_email();
}
inline const std::string& GetTxsRecordsRequest::_internal_buyer_email() const {
  return buyer_email_.Get();
}
inline void GetTxsRecordsRequest::_internal_set_buyer_email(const std::string& value) {
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTxsRecordsRequest::set_buyer_email(std::string&& value) {
  
  buyer_email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txs_v2.GetTxsRecordsRequest.buyer_email)
}
inline void GetTxsRecordsRequest::set_buyer_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txs_v2.GetTxsRecordsRequest.buyer_email)
}
inline void GetTxsRecordsRequest::set_buyer_email(const char* value,
    size_t size) {
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txs_v2.GetTxsRecordsRequest.buyer_email)
}
inline std::string* GetTxsRecordsRequest::_internal_mutable_buyer_email() {
  
  return buyer_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTxsRecordsRequest::release_buyer_email() {
  // @@protoc_insertion_point(field_release:txs_v2.GetTxsRecordsRequest.buyer_email)
  return buyer_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTxsRecordsRequest::set_allocated_buyer_email(std::string* buyer_email) {
  if (buyer_email != nullptr) {
    
  } else {
    
  }
  buyer_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txs_v2.GetTxsRecordsRequest.buyer_email)
}

// string start = 13;
inline void GetTxsRecordsRequest::clear_start() {
  start_.ClearToEmpty();
}
inline const std::string& GetTxsRecordsRequest::start() const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.start)
  return _internal_start();
}
inline void GetTxsRecordsRequest::set_start(const std::string& value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.start)
}
inline std::string* GetTxsRecordsRequest::mutable_start() {
  // @@protoc_insertion_point(field_mutable:txs_v2.GetTxsRecordsRequest.start)
  return _internal_mutable_start();
}
inline const std::string& GetTxsRecordsRequest::_internal_start() const {
  return start_.Get();
}
inline void GetTxsRecordsRequest::_internal_set_start(const std::string& value) {
  
  start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTxsRecordsRequest::set_start(std::string&& value) {
  
  start_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txs_v2.GetTxsRecordsRequest.start)
}
inline void GetTxsRecordsRequest::set_start(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txs_v2.GetTxsRecordsRequest.start)
}
inline void GetTxsRecordsRequest::set_start(const char* value,
    size_t size) {
  
  start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txs_v2.GetTxsRecordsRequest.start)
}
inline std::string* GetTxsRecordsRequest::_internal_mutable_start() {
  
  return start_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTxsRecordsRequest::release_start() {
  // @@protoc_insertion_point(field_release:txs_v2.GetTxsRecordsRequest.start)
  return start_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTxsRecordsRequest::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txs_v2.GetTxsRecordsRequest.start)
}

// string end = 14;
inline void GetTxsRecordsRequest::clear_end() {
  end_.ClearToEmpty();
}
inline const std::string& GetTxsRecordsRequest::end() const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.end)
  return _internal_end();
}
inline void GetTxsRecordsRequest::set_end(const std::string& value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.end)
}
inline std::string* GetTxsRecordsRequest::mutable_end() {
  // @@protoc_insertion_point(field_mutable:txs_v2.GetTxsRecordsRequest.end)
  return _internal_mutable_end();
}
inline const std::string& GetTxsRecordsRequest::_internal_end() const {
  return end_.Get();
}
inline void GetTxsRecordsRequest::_internal_set_end(const std::string& value) {
  
  end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTxsRecordsRequest::set_end(std::string&& value) {
  
  end_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txs_v2.GetTxsRecordsRequest.end)
}
inline void GetTxsRecordsRequest::set_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txs_v2.GetTxsRecordsRequest.end)
}
inline void GetTxsRecordsRequest::set_end(const char* value,
    size_t size) {
  
  end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txs_v2.GetTxsRecordsRequest.end)
}
inline std::string* GetTxsRecordsRequest::_internal_mutable_end() {
  
  return end_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTxsRecordsRequest::release_end() {
  // @@protoc_insertion_point(field_release:txs_v2.GetTxsRecordsRequest.end)
  return end_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTxsRecordsRequest::set_allocated_end(std::string* end) {
  if (end != nullptr) {
    
  } else {
    
  }
  end_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txs_v2.GetTxsRecordsRequest.end)
}

// bool sandbox = 15;
inline void GetTxsRecordsRequest::clear_sandbox() {
  sandbox_ = false;
}
inline bool GetTxsRecordsRequest::_internal_sandbox() const {
  return sandbox_;
}
inline bool GetTxsRecordsRequest::sandbox() const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.sandbox)
  return _internal_sandbox();
}
inline void GetTxsRecordsRequest::_internal_set_sandbox(bool value) {
  
  sandbox_ = value;
}
inline void GetTxsRecordsRequest::set_sandbox(bool value) {
  _internal_set_sandbox(value);
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.sandbox)
}

// repeated string output_format = 16;
inline int GetTxsRecordsRequest::_internal_output_format_size() const {
  return output_format_.size();
}
inline int GetTxsRecordsRequest::output_format_size() const {
  return _internal_output_format_size();
}
inline void GetTxsRecordsRequest::clear_output_format() {
  output_format_.Clear();
}
inline std::string* GetTxsRecordsRequest::add_output_format() {
  // @@protoc_insertion_point(field_add_mutable:txs_v2.GetTxsRecordsRequest.output_format)
  return _internal_add_output_format();
}
inline const std::string& GetTxsRecordsRequest::_internal_output_format(int index) const {
  return output_format_.Get(index);
}
inline const std::string& GetTxsRecordsRequest::output_format(int index) const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsRequest.output_format)
  return _internal_output_format(index);
}
inline std::string* GetTxsRecordsRequest::mutable_output_format(int index) {
  // @@protoc_insertion_point(field_mutable:txs_v2.GetTxsRecordsRequest.output_format)
  return output_format_.Mutable(index);
}
inline void GetTxsRecordsRequest::set_output_format(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.output_format)
  output_format_.Mutable(index)->assign(value);
}
inline void GetTxsRecordsRequest::set_output_format(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsRequest.output_format)
  output_format_.Mutable(index)->assign(std::move(value));
}
inline void GetTxsRecordsRequest::set_output_format(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_format_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txs_v2.GetTxsRecordsRequest.output_format)
}
inline void GetTxsRecordsRequest::set_output_format(int index, const char* value, size_t size) {
  output_format_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txs_v2.GetTxsRecordsRequest.output_format)
}
inline std::string* GetTxsRecordsRequest::_internal_add_output_format() {
  return output_format_.Add();
}
inline void GetTxsRecordsRequest::add_output_format(const std::string& value) {
  output_format_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txs_v2.GetTxsRecordsRequest.output_format)
}
inline void GetTxsRecordsRequest::add_output_format(std::string&& value) {
  output_format_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txs_v2.GetTxsRecordsRequest.output_format)
}
inline void GetTxsRecordsRequest::add_output_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_format_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txs_v2.GetTxsRecordsRequest.output_format)
}
inline void GetTxsRecordsRequest::add_output_format(const char* value, size_t size) {
  output_format_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txs_v2.GetTxsRecordsRequest.output_format)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTxsRecordsRequest::output_format() const {
  // @@protoc_insertion_point(field_list:txs_v2.GetTxsRecordsRequest.output_format)
  return output_format_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTxsRecordsRequest::mutable_output_format() {
  // @@protoc_insertion_point(field_mutable_list:txs_v2.GetTxsRecordsRequest.output_format)
  return &output_format_;
}

// -------------------------------------------------------------------

// GetTxsRecordsReponse

// int32 code = 1;
inline void GetTxsRecordsReponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTxsRecordsReponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTxsRecordsReponse::code() const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsReponse.code)
  return _internal_code();
}
inline void GetTxsRecordsReponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetTxsRecordsReponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsReponse.code)
}

// string message = 2;
inline void GetTxsRecordsReponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& GetTxsRecordsReponse::message() const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsReponse.message)
  return _internal_message();
}
inline void GetTxsRecordsReponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:txs_v2.GetTxsRecordsReponse.message)
}
inline std::string* GetTxsRecordsReponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:txs_v2.GetTxsRecordsReponse.message)
  return _internal_mutable_message();
}
inline const std::string& GetTxsRecordsReponse::_internal_message() const {
  return message_.Get();
}
inline void GetTxsRecordsReponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTxsRecordsReponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txs_v2.GetTxsRecordsReponse.message)
}
inline void GetTxsRecordsReponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txs_v2.GetTxsRecordsReponse.message)
}
inline void GetTxsRecordsReponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txs_v2.GetTxsRecordsReponse.message)
}
inline std::string* GetTxsRecordsReponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTxsRecordsReponse::release_message() {
  // @@protoc_insertion_point(field_release:txs_v2.GetTxsRecordsReponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTxsRecordsReponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txs_v2.GetTxsRecordsReponse.message)
}

// repeated .basis_v2.UnitTx response = 3;
inline int GetTxsRecordsReponse::_internal_response_size() const {
  return response_.size();
}
inline int GetTxsRecordsReponse::response_size() const {
  return _internal_response_size();
}
inline ::basis_v2::UnitTx* GetTxsRecordsReponse::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:txs_v2.GetTxsRecordsReponse.response)
  return response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::basis_v2::UnitTx >*
GetTxsRecordsReponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:txs_v2.GetTxsRecordsReponse.response)
  return &response_;
}
inline const ::basis_v2::UnitTx& GetTxsRecordsReponse::_internal_response(int index) const {
  return response_.Get(index);
}
inline const ::basis_v2::UnitTx& GetTxsRecordsReponse::response(int index) const {
  // @@protoc_insertion_point(field_get:txs_v2.GetTxsRecordsReponse.response)
  return _internal_response(index);
}
inline ::basis_v2::UnitTx* GetTxsRecordsReponse::_internal_add_response() {
  return response_.Add();
}
inline ::basis_v2::UnitTx* GetTxsRecordsReponse::add_response() {
  // @@protoc_insertion_point(field_add:txs_v2.GetTxsRecordsReponse.response)
  return _internal_add_response();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::basis_v2::UnitTx >&
GetTxsRecordsReponse::response() const {
  // @@protoc_insertion_point(field_list:txs_v2.GetTxsRecordsReponse.response)
  return response_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace txs_v2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_v2_2ftxs_2ftxs_2eproto
