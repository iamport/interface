// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: custompay/v1/user/user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_custompay_2fv1_2fuser_2fuser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_custompay_2fv1_2fuser_2fuser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_custompay_2fv1_2fuser_2fuser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_custompay_2fv1_2fuser_2fuser_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_custompay_2fv1_2fuser_2fuser_2eproto;
namespace user_custompay {
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserEditRequest;
class UserEditRequestDefaultTypeInternal;
extern UserEditRequestDefaultTypeInternal _UserEditRequest_default_instance_;
class UserEditResponse;
class UserEditResponseDefaultTypeInternal;
extern UserEditResponseDefaultTypeInternal _UserEditResponse_default_instance_;
class UserRegisterRequest;
class UserRegisterRequestDefaultTypeInternal;
extern UserRegisterRequestDefaultTypeInternal _UserRegisterRequest_default_instance_;
class UserRegisterResponse;
class UserRegisterResponseDefaultTypeInternal;
extern UserRegisterResponseDefaultTypeInternal _UserRegisterResponse_default_instance_;
class UserRequest;
class UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
class UserResponse;
class UserResponseDefaultTypeInternal;
extern UserResponseDefaultTypeInternal _UserResponse_default_instance_;
}  // namespace user_custompay
PROTOBUF_NAMESPACE_OPEN
template<> ::user_custompay::User* Arena::CreateMaybeMessage<::user_custompay::User>(Arena*);
template<> ::user_custompay::UserEditRequest* Arena::CreateMaybeMessage<::user_custompay::UserEditRequest>(Arena*);
template<> ::user_custompay::UserEditResponse* Arena::CreateMaybeMessage<::user_custompay::UserEditResponse>(Arena*);
template<> ::user_custompay::UserRegisterRequest* Arena::CreateMaybeMessage<::user_custompay::UserRegisterRequest>(Arena*);
template<> ::user_custompay::UserRegisterResponse* Arena::CreateMaybeMessage<::user_custompay::UserRegisterResponse>(Arena*);
template<> ::user_custompay::UserRequest* Arena::CreateMaybeMessage<::user_custompay::UserRequest>(Arena*);
template<> ::user_custompay::UserResponse* Arena::CreateMaybeMessage<::user_custompay::UserResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace user_custompay {

// ===================================================================

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user_custompay.User) */ {
 public:
  inline User() : User(nullptr) {}
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user_custompay.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fuser_2fuser_2eproto);
    return ::descriptor_table_custompay_2fv1_2fuser_2fuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kTelFieldNumber = 4,
    kAddressFieldNumber = 5,
    kPostcodeFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string tel = 4;
  void clear_tel();
  const std::string& tel() const;
  void set_tel(const std::string& value);
  void set_tel(std::string&& value);
  void set_tel(const char* value);
  void set_tel(const char* value, size_t size);
  std::string* mutable_tel();
  std::string* release_tel();
  void set_allocated_tel(std::string* tel);
  private:
  const std::string& _internal_tel() const;
  void _internal_set_tel(const std::string& value);
  std::string* _internal_mutable_tel();
  public:

  // string address = 5;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string postcode = 6;
  void clear_postcode();
  const std::string& postcode() const;
  void set_postcode(const std::string& value);
  void set_postcode(std::string&& value);
  void set_postcode(const char* value);
  void set_postcode(const char* value, size_t size);
  std::string* mutable_postcode();
  std::string* release_postcode();
  void set_allocated_postcode(std::string* postcode);
  private:
  const std::string& _internal_postcode() const;
  void _internal_set_postcode(const std::string& value);
  std::string* _internal_mutable_postcode();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user_custompay.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fuser_2fuser_2eproto;
};
// -------------------------------------------------------------------

class UserRegisterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user_custompay.UserRegisterRequest) */ {
 public:
  inline UserRegisterRequest() : UserRegisterRequest(nullptr) {}
  virtual ~UserRegisterRequest();

  UserRegisterRequest(const UserRegisterRequest& from);
  UserRegisterRequest(UserRegisterRequest&& from) noexcept
    : UserRegisterRequest() {
    *this = ::std::move(from);
  }

  inline UserRegisterRequest& operator=(const UserRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegisterRequest& operator=(UserRegisterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const UserRegisterRequest*>(
               &_UserRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRegisterRequest& a, UserRegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegisterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRegisterRequest* New() const final {
    return CreateMaybeMessage<UserRegisterRequest>(nullptr);
  }

  UserRegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRegisterRequest& from);
  void MergeFrom(const UserRegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user_custompay.UserRegisterRequest";
  }
  protected:
  explicit UserRegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fuser_2fuser_2eproto);
    return ::descriptor_table_custompay_2fv1_2fuser_2fuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEmailFieldNumber = 2,
    kTelFieldNumber = 3,
    kAddressFieldNumber = 4,
    kPostcodeFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string tel = 3;
  void clear_tel();
  const std::string& tel() const;
  void set_tel(const std::string& value);
  void set_tel(std::string&& value);
  void set_tel(const char* value);
  void set_tel(const char* value, size_t size);
  std::string* mutable_tel();
  std::string* release_tel();
  void set_allocated_tel(std::string* tel);
  private:
  const std::string& _internal_tel() const;
  void _internal_set_tel(const std::string& value);
  std::string* _internal_mutable_tel();
  public:

  // string address = 4;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string postcode = 5;
  void clear_postcode();
  const std::string& postcode() const;
  void set_postcode(const std::string& value);
  void set_postcode(std::string&& value);
  void set_postcode(const char* value);
  void set_postcode(const char* value, size_t size);
  std::string* mutable_postcode();
  std::string* release_postcode();
  void set_allocated_postcode(std::string* postcode);
  private:
  const std::string& _internal_postcode() const;
  void _internal_set_postcode(const std::string& value);
  std::string* _internal_mutable_postcode();
  public:

  // @@protoc_insertion_point(class_scope:user_custompay.UserRegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fuser_2fuser_2eproto;
};
// -------------------------------------------------------------------

class UserRegisterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user_custompay.UserRegisterResponse) */ {
 public:
  inline UserRegisterResponse() : UserRegisterResponse(nullptr) {}
  virtual ~UserRegisterResponse();

  UserRegisterResponse(const UserRegisterResponse& from);
  UserRegisterResponse(UserRegisterResponse&& from) noexcept
    : UserRegisterResponse() {
    *this = ::std::move(from);
  }

  inline UserRegisterResponse& operator=(const UserRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegisterResponse& operator=(UserRegisterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const UserRegisterResponse*>(
               &_UserRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserRegisterResponse& a, UserRegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegisterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRegisterResponse* New() const final {
    return CreateMaybeMessage<UserRegisterResponse>(nullptr);
  }

  UserRegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRegisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRegisterResponse& from);
  void MergeFrom(const UserRegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user_custompay.UserRegisterResponse";
  }
  protected:
  explicit UserRegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fuser_2fuser_2eproto);
    return ::descriptor_table_custompay_2fv1_2fuser_2fuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .user_custompay.User response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::user_custompay::User& response() const;
  ::user_custompay::User* release_response();
  ::user_custompay::User* mutable_response();
  void set_allocated_response(::user_custompay::User* response);
  private:
  const ::user_custompay::User& _internal_response() const;
  ::user_custompay::User* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::user_custompay::User* response);
  ::user_custompay::User* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user_custompay.UserRegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::user_custompay::User* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fuser_2fuser_2eproto;
};
// -------------------------------------------------------------------

class UserEditRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user_custompay.UserEditRequest) */ {
 public:
  inline UserEditRequest() : UserEditRequest(nullptr) {}
  virtual ~UserEditRequest();

  UserEditRequest(const UserEditRequest& from);
  UserEditRequest(UserEditRequest&& from) noexcept
    : UserEditRequest() {
    *this = ::std::move(from);
  }

  inline UserEditRequest& operator=(const UserEditRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEditRequest& operator=(UserEditRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserEditRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEditRequest* internal_default_instance() {
    return reinterpret_cast<const UserEditRequest*>(
               &_UserEditRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserEditRequest& a, UserEditRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEditRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEditRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserEditRequest* New() const final {
    return CreateMaybeMessage<UserEditRequest>(nullptr);
  }

  UserEditRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserEditRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserEditRequest& from);
  void MergeFrom(const UserEditRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserEditRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user_custompay.UserEditRequest";
  }
  protected:
  explicit UserEditRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fuser_2fuser_2eproto);
    return ::descriptor_table_custompay_2fv1_2fuser_2fuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kTelFieldNumber = 4,
    kAddressFieldNumber = 5,
    kPostcodeFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string tel = 4;
  void clear_tel();
  const std::string& tel() const;
  void set_tel(const std::string& value);
  void set_tel(std::string&& value);
  void set_tel(const char* value);
  void set_tel(const char* value, size_t size);
  std::string* mutable_tel();
  std::string* release_tel();
  void set_allocated_tel(std::string* tel);
  private:
  const std::string& _internal_tel() const;
  void _internal_set_tel(const std::string& value);
  std::string* _internal_mutable_tel();
  public:

  // string address = 5;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string postcode = 6;
  void clear_postcode();
  const std::string& postcode() const;
  void set_postcode(const std::string& value);
  void set_postcode(std::string&& value);
  void set_postcode(const char* value);
  void set_postcode(const char* value, size_t size);
  std::string* mutable_postcode();
  std::string* release_postcode();
  void set_allocated_postcode(std::string* postcode);
  private:
  const std::string& _internal_postcode() const;
  void _internal_set_postcode(const std::string& value);
  std::string* _internal_mutable_postcode();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user_custompay.UserEditRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fuser_2fuser_2eproto;
};
// -------------------------------------------------------------------

class UserEditResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user_custompay.UserEditResponse) */ {
 public:
  inline UserEditResponse() : UserEditResponse(nullptr) {}
  virtual ~UserEditResponse();

  UserEditResponse(const UserEditResponse& from);
  UserEditResponse(UserEditResponse&& from) noexcept
    : UserEditResponse() {
    *this = ::std::move(from);
  }

  inline UserEditResponse& operator=(const UserEditResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEditResponse& operator=(UserEditResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserEditResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEditResponse* internal_default_instance() {
    return reinterpret_cast<const UserEditResponse*>(
               &_UserEditResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserEditResponse& a, UserEditResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEditResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEditResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserEditResponse* New() const final {
    return CreateMaybeMessage<UserEditResponse>(nullptr);
  }

  UserEditResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserEditResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserEditResponse& from);
  void MergeFrom(const UserEditResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserEditResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user_custompay.UserEditResponse";
  }
  protected:
  explicit UserEditResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fuser_2fuser_2eproto);
    return ::descriptor_table_custompay_2fv1_2fuser_2fuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .user_custompay.User response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::user_custompay::User& response() const;
  ::user_custompay::User* release_response();
  ::user_custompay::User* mutable_response();
  void set_allocated_response(::user_custompay::User* response);
  private:
  const ::user_custompay::User& _internal_response() const;
  ::user_custompay::User* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::user_custompay::User* response);
  ::user_custompay::User* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user_custompay.UserEditResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::user_custompay::User* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fuser_2fuser_2eproto;
};
// -------------------------------------------------------------------

class UserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user_custompay.UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {}
  virtual ~UserRequest();

  UserRequest(const UserRequest& from);
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRequest* New() const final {
    return CreateMaybeMessage<UserRequest>(nullptr);
  }

  UserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRequest& from);
  void MergeFrom(const UserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user_custompay.UserRequest";
  }
  protected:
  explicit UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fuser_2fuser_2eproto);
    return ::descriptor_table_custompay_2fv1_2fuser_2fuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user_custompay.UserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fuser_2fuser_2eproto;
};
// -------------------------------------------------------------------

class UserResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user_custompay.UserResponse) */ {
 public:
  inline UserResponse() : UserResponse(nullptr) {}
  virtual ~UserResponse();

  UserResponse(const UserResponse& from);
  UserResponse(UserResponse&& from) noexcept
    : UserResponse() {
    *this = ::std::move(from);
  }

  inline UserResponse& operator=(const UserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserResponse& operator=(UserResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserResponse* internal_default_instance() {
    return reinterpret_cast<const UserResponse*>(
               &_UserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserResponse& a, UserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserResponse* New() const final {
    return CreateMaybeMessage<UserResponse>(nullptr);
  }

  UserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserResponse& from);
  void MergeFrom(const UserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user_custompay.UserResponse";
  }
  protected:
  explicit UserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fuser_2fuser_2eproto);
    return ::descriptor_table_custompay_2fv1_2fuser_2fuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .user_custompay.User response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::user_custompay::User& response() const;
  ::user_custompay::User* release_response();
  ::user_custompay::User* mutable_response();
  void set_allocated_response(::user_custompay::User* response);
  private:
  const ::user_custompay::User& _internal_response() const;
  ::user_custompay::User* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::user_custompay::User* response);
  ::user_custompay::User* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user_custompay.UserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::user_custompay::User* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fuser_2fuser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// int32 id = 1;
inline void User::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::id() const {
  // @@protoc_insertion_point(field_get:user_custompay.User.id)
  return _internal_id();
}
inline void User::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void User::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:user_custompay.User.id)
}

// string name = 2;
inline void User::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:user_custompay.User.name)
  return _internal_name();
}
inline void User::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:user_custompay.User.name)
}
inline std::string* User::mutable_name() {
  // @@protoc_insertion_point(field_mutable:user_custompay.User.name)
  return _internal_mutable_name();
}
inline const std::string& User::_internal_name() const {
  return name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.User.name)
}
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.User.name)
}
inline void User::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.User.name)
}
inline std::string* User::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:user_custompay.User.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.User.name)
}

// string email = 3;
inline void User::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::email() const {
  // @@protoc_insertion_point(field_get:user_custompay.User.email)
  return _internal_email();
}
inline void User::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:user_custompay.User.email)
}
inline std::string* User::mutable_email() {
  // @@protoc_insertion_point(field_mutable:user_custompay.User.email)
  return _internal_mutable_email();
}
inline const std::string& User::_internal_email() const {
  return email_.Get();
}
inline void User::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.User.email)
}
inline void User::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.User.email)
}
inline void User::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.User.email)
}
inline std::string* User::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_email() {
  // @@protoc_insertion_point(field_release:user_custompay.User.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.User.email)
}

// string tel = 4;
inline void User::clear_tel() {
  tel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::tel() const {
  // @@protoc_insertion_point(field_get:user_custompay.User.tel)
  return _internal_tel();
}
inline void User::set_tel(const std::string& value) {
  _internal_set_tel(value);
  // @@protoc_insertion_point(field_set:user_custompay.User.tel)
}
inline std::string* User::mutable_tel() {
  // @@protoc_insertion_point(field_mutable:user_custompay.User.tel)
  return _internal_mutable_tel();
}
inline const std::string& User::_internal_tel() const {
  return tel_.Get();
}
inline void User::_internal_set_tel(const std::string& value) {
  
  tel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_tel(std::string&& value) {
  
  tel_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.User.tel)
}
inline void User::set_tel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.User.tel)
}
inline void User::set_tel(const char* value,
    size_t size) {
  
  tel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.User.tel)
}
inline std::string* User::_internal_mutable_tel() {
  
  return tel_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_tel() {
  // @@protoc_insertion_point(field_release:user_custompay.User.tel)
  return tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_tel(std::string* tel) {
  if (tel != nullptr) {
    
  } else {
    
  }
  tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.User.tel)
}

// string address = 5;
inline void User::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::address() const {
  // @@protoc_insertion_point(field_get:user_custompay.User.address)
  return _internal_address();
}
inline void User::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:user_custompay.User.address)
}
inline std::string* User::mutable_address() {
  // @@protoc_insertion_point(field_mutable:user_custompay.User.address)
  return _internal_mutable_address();
}
inline const std::string& User::_internal_address() const {
  return address_.Get();
}
inline void User::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.User.address)
}
inline void User::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.User.address)
}
inline void User::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.User.address)
}
inline std::string* User::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_address() {
  // @@protoc_insertion_point(field_release:user_custompay.User.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.User.address)
}

// string postcode = 6;
inline void User::clear_postcode() {
  postcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::postcode() const {
  // @@protoc_insertion_point(field_get:user_custompay.User.postcode)
  return _internal_postcode();
}
inline void User::set_postcode(const std::string& value) {
  _internal_set_postcode(value);
  // @@protoc_insertion_point(field_set:user_custompay.User.postcode)
}
inline std::string* User::mutable_postcode() {
  // @@protoc_insertion_point(field_mutable:user_custompay.User.postcode)
  return _internal_mutable_postcode();
}
inline const std::string& User::_internal_postcode() const {
  return postcode_.Get();
}
inline void User::_internal_set_postcode(const std::string& value) {
  
  postcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_postcode(std::string&& value) {
  
  postcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.User.postcode)
}
inline void User::set_postcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  postcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.User.postcode)
}
inline void User::set_postcode(const char* value,
    size_t size) {
  
  postcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.User.postcode)
}
inline std::string* User::_internal_mutable_postcode() {
  
  return postcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_postcode() {
  // @@protoc_insertion_point(field_release:user_custompay.User.postcode)
  return postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_postcode(std::string* postcode) {
  if (postcode != nullptr) {
    
  } else {
    
  }
  postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.User.postcode)
}

// -------------------------------------------------------------------

// UserRegisterRequest

// string name = 1;
inline void UserRegisterRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserRegisterRequest::name() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserRegisterRequest.name)
  return _internal_name();
}
inline void UserRegisterRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserRegisterRequest.name)
}
inline std::string* UserRegisterRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserRegisterRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UserRegisterRequest::_internal_name() const {
  return name_.Get();
}
inline void UserRegisterRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRegisterRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.UserRegisterRequest.name)
}
inline void UserRegisterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.UserRegisterRequest.name)
}
inline void UserRegisterRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.UserRegisterRequest.name)
}
inline std::string* UserRegisterRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRegisterRequest::release_name() {
  // @@protoc_insertion_point(field_release:user_custompay.UserRegisterRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRegisterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserRegisterRequest.name)
}

// string email = 2;
inline void UserRegisterRequest::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserRegisterRequest::email() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserRegisterRequest.email)
  return _internal_email();
}
inline void UserRegisterRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserRegisterRequest.email)
}
inline std::string* UserRegisterRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserRegisterRequest.email)
  return _internal_mutable_email();
}
inline const std::string& UserRegisterRequest::_internal_email() const {
  return email_.Get();
}
inline void UserRegisterRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRegisterRequest::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.UserRegisterRequest.email)
}
inline void UserRegisterRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.UserRegisterRequest.email)
}
inline void UserRegisterRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.UserRegisterRequest.email)
}
inline std::string* UserRegisterRequest::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRegisterRequest::release_email() {
  // @@protoc_insertion_point(field_release:user_custompay.UserRegisterRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRegisterRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserRegisterRequest.email)
}

// string tel = 3;
inline void UserRegisterRequest::clear_tel() {
  tel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserRegisterRequest::tel() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserRegisterRequest.tel)
  return _internal_tel();
}
inline void UserRegisterRequest::set_tel(const std::string& value) {
  _internal_set_tel(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserRegisterRequest.tel)
}
inline std::string* UserRegisterRequest::mutable_tel() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserRegisterRequest.tel)
  return _internal_mutable_tel();
}
inline const std::string& UserRegisterRequest::_internal_tel() const {
  return tel_.Get();
}
inline void UserRegisterRequest::_internal_set_tel(const std::string& value) {
  
  tel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRegisterRequest::set_tel(std::string&& value) {
  
  tel_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.UserRegisterRequest.tel)
}
inline void UserRegisterRequest::set_tel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.UserRegisterRequest.tel)
}
inline void UserRegisterRequest::set_tel(const char* value,
    size_t size) {
  
  tel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.UserRegisterRequest.tel)
}
inline std::string* UserRegisterRequest::_internal_mutable_tel() {
  
  return tel_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRegisterRequest::release_tel() {
  // @@protoc_insertion_point(field_release:user_custompay.UserRegisterRequest.tel)
  return tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRegisterRequest::set_allocated_tel(std::string* tel) {
  if (tel != nullptr) {
    
  } else {
    
  }
  tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserRegisterRequest.tel)
}

// string address = 4;
inline void UserRegisterRequest::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserRegisterRequest::address() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserRegisterRequest.address)
  return _internal_address();
}
inline void UserRegisterRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserRegisterRequest.address)
}
inline std::string* UserRegisterRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserRegisterRequest.address)
  return _internal_mutable_address();
}
inline const std::string& UserRegisterRequest::_internal_address() const {
  return address_.Get();
}
inline void UserRegisterRequest::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRegisterRequest::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.UserRegisterRequest.address)
}
inline void UserRegisterRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.UserRegisterRequest.address)
}
inline void UserRegisterRequest::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.UserRegisterRequest.address)
}
inline std::string* UserRegisterRequest::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRegisterRequest::release_address() {
  // @@protoc_insertion_point(field_release:user_custompay.UserRegisterRequest.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRegisterRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserRegisterRequest.address)
}

// string postcode = 5;
inline void UserRegisterRequest::clear_postcode() {
  postcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserRegisterRequest::postcode() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserRegisterRequest.postcode)
  return _internal_postcode();
}
inline void UserRegisterRequest::set_postcode(const std::string& value) {
  _internal_set_postcode(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserRegisterRequest.postcode)
}
inline std::string* UserRegisterRequest::mutable_postcode() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserRegisterRequest.postcode)
  return _internal_mutable_postcode();
}
inline const std::string& UserRegisterRequest::_internal_postcode() const {
  return postcode_.Get();
}
inline void UserRegisterRequest::_internal_set_postcode(const std::string& value) {
  
  postcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRegisterRequest::set_postcode(std::string&& value) {
  
  postcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.UserRegisterRequest.postcode)
}
inline void UserRegisterRequest::set_postcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  postcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.UserRegisterRequest.postcode)
}
inline void UserRegisterRequest::set_postcode(const char* value,
    size_t size) {
  
  postcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.UserRegisterRequest.postcode)
}
inline std::string* UserRegisterRequest::_internal_mutable_postcode() {
  
  return postcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRegisterRequest::release_postcode() {
  // @@protoc_insertion_point(field_release:user_custompay.UserRegisterRequest.postcode)
  return postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRegisterRequest::set_allocated_postcode(std::string* postcode) {
  if (postcode != nullptr) {
    
  } else {
    
  }
  postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserRegisterRequest.postcode)
}

// -------------------------------------------------------------------

// UserRegisterResponse

// int32 code = 1;
inline void UserRegisterResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserRegisterResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserRegisterResponse::code() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserRegisterResponse.code)
  return _internal_code();
}
inline void UserRegisterResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void UserRegisterResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserRegisterResponse.code)
}

// string message = 2;
inline void UserRegisterResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserRegisterResponse::message() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserRegisterResponse.message)
  return _internal_message();
}
inline void UserRegisterResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserRegisterResponse.message)
}
inline std::string* UserRegisterResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserRegisterResponse.message)
  return _internal_mutable_message();
}
inline const std::string& UserRegisterResponse::_internal_message() const {
  return message_.Get();
}
inline void UserRegisterResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRegisterResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.UserRegisterResponse.message)
}
inline void UserRegisterResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.UserRegisterResponse.message)
}
inline void UserRegisterResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.UserRegisterResponse.message)
}
inline std::string* UserRegisterResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRegisterResponse::release_message() {
  // @@protoc_insertion_point(field_release:user_custompay.UserRegisterResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRegisterResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserRegisterResponse.message)
}

// .user_custompay.User response = 3;
inline bool UserRegisterResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool UserRegisterResponse::has_response() const {
  return _internal_has_response();
}
inline void UserRegisterResponse::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::user_custompay::User& UserRegisterResponse::_internal_response() const {
  const ::user_custompay::User* p = response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::user_custompay::User*>(
      &::user_custompay::_User_default_instance_);
}
inline const ::user_custompay::User& UserRegisterResponse::response() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserRegisterResponse.response)
  return _internal_response();
}
inline void UserRegisterResponse::unsafe_arena_set_allocated_response(
    ::user_custompay::User* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:user_custompay.UserRegisterResponse.response)
}
inline ::user_custompay::User* UserRegisterResponse::release_response() {
  
  ::user_custompay::User* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::user_custompay::User* UserRegisterResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:user_custompay.UserRegisterResponse.response)
  
  ::user_custompay::User* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::user_custompay::User* UserRegisterResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::user_custompay::User>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::user_custompay::User* UserRegisterResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserRegisterResponse.response)
  return _internal_mutable_response();
}
inline void UserRegisterResponse::set_allocated_response(::user_custompay::User* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserRegisterResponse.response)
}

// -------------------------------------------------------------------

// UserEditRequest

// int32 id = 1;
inline void UserEditRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEditRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEditRequest::id() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserEditRequest.id)
  return _internal_id();
}
inline void UserEditRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UserEditRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserEditRequest.id)
}

// string name = 2;
inline void UserEditRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserEditRequest::name() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserEditRequest.name)
  return _internal_name();
}
inline void UserEditRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserEditRequest.name)
}
inline std::string* UserEditRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserEditRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UserEditRequest::_internal_name() const {
  return name_.Get();
}
inline void UserEditRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserEditRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.UserEditRequest.name)
}
inline void UserEditRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.UserEditRequest.name)
}
inline void UserEditRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.UserEditRequest.name)
}
inline std::string* UserEditRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserEditRequest::release_name() {
  // @@protoc_insertion_point(field_release:user_custompay.UserEditRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserEditRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserEditRequest.name)
}

// string email = 3;
inline void UserEditRequest::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserEditRequest::email() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserEditRequest.email)
  return _internal_email();
}
inline void UserEditRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserEditRequest.email)
}
inline std::string* UserEditRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserEditRequest.email)
  return _internal_mutable_email();
}
inline const std::string& UserEditRequest::_internal_email() const {
  return email_.Get();
}
inline void UserEditRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserEditRequest::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.UserEditRequest.email)
}
inline void UserEditRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.UserEditRequest.email)
}
inline void UserEditRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.UserEditRequest.email)
}
inline std::string* UserEditRequest::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserEditRequest::release_email() {
  // @@protoc_insertion_point(field_release:user_custompay.UserEditRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserEditRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserEditRequest.email)
}

// string tel = 4;
inline void UserEditRequest::clear_tel() {
  tel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserEditRequest::tel() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserEditRequest.tel)
  return _internal_tel();
}
inline void UserEditRequest::set_tel(const std::string& value) {
  _internal_set_tel(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserEditRequest.tel)
}
inline std::string* UserEditRequest::mutable_tel() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserEditRequest.tel)
  return _internal_mutable_tel();
}
inline const std::string& UserEditRequest::_internal_tel() const {
  return tel_.Get();
}
inline void UserEditRequest::_internal_set_tel(const std::string& value) {
  
  tel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserEditRequest::set_tel(std::string&& value) {
  
  tel_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.UserEditRequest.tel)
}
inline void UserEditRequest::set_tel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.UserEditRequest.tel)
}
inline void UserEditRequest::set_tel(const char* value,
    size_t size) {
  
  tel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.UserEditRequest.tel)
}
inline std::string* UserEditRequest::_internal_mutable_tel() {
  
  return tel_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserEditRequest::release_tel() {
  // @@protoc_insertion_point(field_release:user_custompay.UserEditRequest.tel)
  return tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserEditRequest::set_allocated_tel(std::string* tel) {
  if (tel != nullptr) {
    
  } else {
    
  }
  tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserEditRequest.tel)
}

// string address = 5;
inline void UserEditRequest::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserEditRequest::address() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserEditRequest.address)
  return _internal_address();
}
inline void UserEditRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserEditRequest.address)
}
inline std::string* UserEditRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserEditRequest.address)
  return _internal_mutable_address();
}
inline const std::string& UserEditRequest::_internal_address() const {
  return address_.Get();
}
inline void UserEditRequest::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserEditRequest::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.UserEditRequest.address)
}
inline void UserEditRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.UserEditRequest.address)
}
inline void UserEditRequest::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.UserEditRequest.address)
}
inline std::string* UserEditRequest::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserEditRequest::release_address() {
  // @@protoc_insertion_point(field_release:user_custompay.UserEditRequest.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserEditRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserEditRequest.address)
}

// string postcode = 6;
inline void UserEditRequest::clear_postcode() {
  postcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserEditRequest::postcode() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserEditRequest.postcode)
  return _internal_postcode();
}
inline void UserEditRequest::set_postcode(const std::string& value) {
  _internal_set_postcode(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserEditRequest.postcode)
}
inline std::string* UserEditRequest::mutable_postcode() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserEditRequest.postcode)
  return _internal_mutable_postcode();
}
inline const std::string& UserEditRequest::_internal_postcode() const {
  return postcode_.Get();
}
inline void UserEditRequest::_internal_set_postcode(const std::string& value) {
  
  postcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserEditRequest::set_postcode(std::string&& value) {
  
  postcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.UserEditRequest.postcode)
}
inline void UserEditRequest::set_postcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  postcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.UserEditRequest.postcode)
}
inline void UserEditRequest::set_postcode(const char* value,
    size_t size) {
  
  postcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.UserEditRequest.postcode)
}
inline std::string* UserEditRequest::_internal_mutable_postcode() {
  
  return postcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserEditRequest::release_postcode() {
  // @@protoc_insertion_point(field_release:user_custompay.UserEditRequest.postcode)
  return postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserEditRequest::set_allocated_postcode(std::string* postcode) {
  if (postcode != nullptr) {
    
  } else {
    
  }
  postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserEditRequest.postcode)
}

// -------------------------------------------------------------------

// UserEditResponse

// int32 code = 1;
inline void UserEditResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEditResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEditResponse::code() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserEditResponse.code)
  return _internal_code();
}
inline void UserEditResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void UserEditResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserEditResponse.code)
}

// string message = 2;
inline void UserEditResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserEditResponse::message() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserEditResponse.message)
  return _internal_message();
}
inline void UserEditResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserEditResponse.message)
}
inline std::string* UserEditResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserEditResponse.message)
  return _internal_mutable_message();
}
inline const std::string& UserEditResponse::_internal_message() const {
  return message_.Get();
}
inline void UserEditResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserEditResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.UserEditResponse.message)
}
inline void UserEditResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.UserEditResponse.message)
}
inline void UserEditResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.UserEditResponse.message)
}
inline std::string* UserEditResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserEditResponse::release_message() {
  // @@protoc_insertion_point(field_release:user_custompay.UserEditResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserEditResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserEditResponse.message)
}

// .user_custompay.User response = 3;
inline bool UserEditResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool UserEditResponse::has_response() const {
  return _internal_has_response();
}
inline void UserEditResponse::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::user_custompay::User& UserEditResponse::_internal_response() const {
  const ::user_custompay::User* p = response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::user_custompay::User*>(
      &::user_custompay::_User_default_instance_);
}
inline const ::user_custompay::User& UserEditResponse::response() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserEditResponse.response)
  return _internal_response();
}
inline void UserEditResponse::unsafe_arena_set_allocated_response(
    ::user_custompay::User* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:user_custompay.UserEditResponse.response)
}
inline ::user_custompay::User* UserEditResponse::release_response() {
  
  ::user_custompay::User* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::user_custompay::User* UserEditResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:user_custompay.UserEditResponse.response)
  
  ::user_custompay::User* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::user_custompay::User* UserEditResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::user_custompay::User>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::user_custompay::User* UserEditResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserEditResponse.response)
  return _internal_mutable_response();
}
inline void UserEditResponse::set_allocated_response(::user_custompay::User* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserEditResponse.response)
}

// -------------------------------------------------------------------

// UserRequest

// int32 id = 1;
inline void UserRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserRequest::id() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserRequest.id)
  return _internal_id();
}
inline void UserRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UserRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserRequest.id)
}

// -------------------------------------------------------------------

// UserResponse

// int32 code = 1;
inline void UserResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserResponse::code() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserResponse.code)
  return _internal_code();
}
inline void UserResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void UserResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserResponse.code)
}

// string message = 2;
inline void UserResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserResponse::message() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserResponse.message)
  return _internal_message();
}
inline void UserResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:user_custompay.UserResponse.message)
}
inline std::string* UserResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserResponse.message)
  return _internal_mutable_message();
}
inline const std::string& UserResponse::_internal_message() const {
  return message_.Get();
}
inline void UserResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_custompay.UserResponse.message)
}
inline void UserResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_custompay.UserResponse.message)
}
inline void UserResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_custompay.UserResponse.message)
}
inline std::string* UserResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserResponse::release_message() {
  // @@protoc_insertion_point(field_release:user_custompay.UserResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserResponse.message)
}

// .user_custompay.User response = 3;
inline bool UserResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool UserResponse::has_response() const {
  return _internal_has_response();
}
inline void UserResponse::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::user_custompay::User& UserResponse::_internal_response() const {
  const ::user_custompay::User* p = response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::user_custompay::User*>(
      &::user_custompay::_User_default_instance_);
}
inline const ::user_custompay::User& UserResponse::response() const {
  // @@protoc_insertion_point(field_get:user_custompay.UserResponse.response)
  return _internal_response();
}
inline void UserResponse::unsafe_arena_set_allocated_response(
    ::user_custompay::User* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:user_custompay.UserResponse.response)
}
inline ::user_custompay::User* UserResponse::release_response() {
  
  ::user_custompay::User* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::user_custompay::User* UserResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:user_custompay.UserResponse.response)
  
  ::user_custompay::User* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::user_custompay::User* UserResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::user_custompay::User>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::user_custompay::User* UserResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:user_custompay.UserResponse.response)
  return _internal_mutable_response();
}
inline void UserResponse::set_allocated_response(::user_custompay::User* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:user_custompay.UserResponse.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace user_custompay

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_custompay_2fv1_2fuser_2fuser_2eproto
