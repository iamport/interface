// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: custompay/v1/card/card.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_custompay_2fv1_2fcard_2fcard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_custompay_2fv1_2fcard_2fcard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/empty.pb.h>
#include "custompay/v1/basic/basic.pb.h"
#include "v1/subscribe/subscribe.pb.h"
#include "v1/payment/payment.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_custompay_2fv1_2fcard_2fcard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_custompay_2fv1_2fcard_2fcard_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto;
namespace card_custompay {
class Card;
class CardDefaultTypeInternal;
extern CardDefaultTypeInternal _Card_default_instance_;
class CardAllInfoResponse;
class CardAllInfoResponseDefaultTypeInternal;
extern CardAllInfoResponseDefaultTypeInternal _CardAllInfoResponse_default_instance_;
class CardCancelRequest;
class CardCancelRequestDefaultTypeInternal;
extern CardCancelRequestDefaultTypeInternal _CardCancelRequest_default_instance_;
class CardEditRequest;
class CardEditRequestDefaultTypeInternal;
extern CardEditRequestDefaultTypeInternal _CardEditRequest_default_instance_;
class CardIdx;
class CardIdxDefaultTypeInternal;
extern CardIdxDefaultTypeInternal _CardIdx_default_instance_;
class CardPayRequest;
class CardPayRequestDefaultTypeInternal;
extern CardPayRequestDefaultTypeInternal _CardPayRequest_default_instance_;
class CardRegisterRequest;
class CardRegisterRequestDefaultTypeInternal;
extern CardRegisterRequestDefaultTypeInternal _CardRegisterRequest_default_instance_;
class CardRegisterResponse;
class CardRegisterResponseDefaultTypeInternal;
extern CardRegisterResponseDefaultTypeInternal _CardRegisterResponse_default_instance_;
class CardRequest;
class CardRequestDefaultTypeInternal;
extern CardRequestDefaultTypeInternal _CardRequest_default_instance_;
class CardResponse;
class CardResponseDefaultTypeInternal;
extern CardResponseDefaultTypeInternal _CardResponse_default_instance_;
}  // namespace card_custompay
PROTOBUF_NAMESPACE_OPEN
template<> ::card_custompay::Card* Arena::CreateMaybeMessage<::card_custompay::Card>(Arena*);
template<> ::card_custompay::CardAllInfoResponse* Arena::CreateMaybeMessage<::card_custompay::CardAllInfoResponse>(Arena*);
template<> ::card_custompay::CardCancelRequest* Arena::CreateMaybeMessage<::card_custompay::CardCancelRequest>(Arena*);
template<> ::card_custompay::CardEditRequest* Arena::CreateMaybeMessage<::card_custompay::CardEditRequest>(Arena*);
template<> ::card_custompay::CardIdx* Arena::CreateMaybeMessage<::card_custompay::CardIdx>(Arena*);
template<> ::card_custompay::CardPayRequest* Arena::CreateMaybeMessage<::card_custompay::CardPayRequest>(Arena*);
template<> ::card_custompay::CardRegisterRequest* Arena::CreateMaybeMessage<::card_custompay::CardRegisterRequest>(Arena*);
template<> ::card_custompay::CardRegisterResponse* Arena::CreateMaybeMessage<::card_custompay::CardRegisterResponse>(Arena*);
template<> ::card_custompay::CardRequest* Arena::CreateMaybeMessage<::card_custompay::CardRequest>(Arena*);
template<> ::card_custompay::CardResponse* Arena::CreateMaybeMessage<::card_custompay::CardResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace card_custompay {

// ===================================================================

class CardIdx PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_custompay.CardIdx) */ {
 public:
  inline CardIdx() : CardIdx(nullptr) {}
  virtual ~CardIdx();

  CardIdx(const CardIdx& from);
  CardIdx(CardIdx&& from) noexcept
    : CardIdx() {
    *this = ::std::move(from);
  }

  inline CardIdx& operator=(const CardIdx& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardIdx& operator=(CardIdx&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardIdx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardIdx* internal_default_instance() {
    return reinterpret_cast<const CardIdx*>(
               &_CardIdx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CardIdx& a, CardIdx& b) {
    a.Swap(&b);
  }
  inline void Swap(CardIdx* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardIdx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardIdx* New() const final {
    return CreateMaybeMessage<CardIdx>(nullptr);
  }

  CardIdx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardIdx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardIdx& from);
  void MergeFrom(const CardIdx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardIdx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_custompay.CardIdx";
  }
  protected:
  explicit CardIdx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto);
    return ::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdxFieldNumber = 1,
  };
  // int32 idx = 1;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_custompay.CardIdx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class Card PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_custompay.Card) */ {
 public:
  inline Card() : Card(nullptr) {}
  virtual ~Card();

  Card(const Card& from);
  Card(Card&& from) noexcept
    : Card() {
    *this = ::std::move(from);
  }

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }
  inline Card& operator=(Card&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Card& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Card* internal_default_instance() {
    return reinterpret_cast<const Card*>(
               &_Card_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Card& a, Card& b) {
    a.Swap(&b);
  }
  inline void Swap(Card* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Card* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Card* New() const final {
    return CreateMaybeMessage<Card>(nullptr);
  }

  Card* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Card>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Card* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_custompay.Card";
  }
  protected:
  explicit Card(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto);
    return ::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardUidFieldNumber = 2,
    kBinNumberFieldNumber = 3,
    kProviderFieldNumber = 4,
    kAliasFieldNumber = 5,
    kIdxFieldNumber = 1,
  };
  // string card_uid = 2;
  void clear_card_uid();
  const std::string& card_uid() const;
  void set_card_uid(const std::string& value);
  void set_card_uid(std::string&& value);
  void set_card_uid(const char* value);
  void set_card_uid(const char* value, size_t size);
  std::string* mutable_card_uid();
  std::string* release_card_uid();
  void set_allocated_card_uid(std::string* card_uid);
  private:
  const std::string& _internal_card_uid() const;
  void _internal_set_card_uid(const std::string& value);
  std::string* _internal_mutable_card_uid();
  public:

  // string bin_number = 3;
  void clear_bin_number();
  const std::string& bin_number() const;
  void set_bin_number(const std::string& value);
  void set_bin_number(std::string&& value);
  void set_bin_number(const char* value);
  void set_bin_number(const char* value, size_t size);
  std::string* mutable_bin_number();
  std::string* release_bin_number();
  void set_allocated_bin_number(std::string* bin_number);
  private:
  const std::string& _internal_bin_number() const;
  void _internal_set_bin_number(const std::string& value);
  std::string* _internal_mutable_bin_number();
  public:

  // string provider = 4;
  void clear_provider();
  const std::string& provider() const;
  void set_provider(const std::string& value);
  void set_provider(std::string&& value);
  void set_provider(const char* value);
  void set_provider(const char* value, size_t size);
  std::string* mutable_provider();
  std::string* release_provider();
  void set_allocated_provider(std::string* provider);
  private:
  const std::string& _internal_provider() const;
  void _internal_set_provider(const std::string& value);
  std::string* _internal_mutable_provider();
  public:

  // string alias = 5;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // int32 idx = 1;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_custompay.Card)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bin_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class CardRegisterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_custompay.CardRegisterRequest) */ {
 public:
  inline CardRegisterRequest() : CardRegisterRequest(nullptr) {}
  virtual ~CardRegisterRequest();

  CardRegisterRequest(const CardRegisterRequest& from);
  CardRegisterRequest(CardRegisterRequest&& from) noexcept
    : CardRegisterRequest() {
    *this = ::std::move(from);
  }

  inline CardRegisterRequest& operator=(const CardRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardRegisterRequest& operator=(CardRegisterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardRegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const CardRegisterRequest*>(
               &_CardRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CardRegisterRequest& a, CardRegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CardRegisterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardRegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardRegisterRequest* New() const final {
    return CreateMaybeMessage<CardRegisterRequest>(nullptr);
  }

  CardRegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardRegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardRegisterRequest& from);
  void MergeFrom(const CardRegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardRegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_custompay.CardRegisterRequest";
  }
  protected:
  explicit CardRegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto);
    return ::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardIdxFieldNumber = 1,
    kAliasFieldNumber = 2,
    kCustomerUidFieldNumber = 3,
    kPgFieldNumber = 4,
    kExpiryFieldNumber = 5,
    kBirthFieldNumber = 6,
    kPwd2DigitFieldNumber = 7,
    kCustomerNameFieldNumber = 8,
    kCustomerTelFieldNumber = 9,
    kCustomerEmailFieldNumber = 10,
    kCustomerAddrFieldNumber = 11,
    kCustomerPostcodeFieldNumber = 12,
  };
  // string card_idx = 1;
  void clear_card_idx();
  const std::string& card_idx() const;
  void set_card_idx(const std::string& value);
  void set_card_idx(std::string&& value);
  void set_card_idx(const char* value);
  void set_card_idx(const char* value, size_t size);
  std::string* mutable_card_idx();
  std::string* release_card_idx();
  void set_allocated_card_idx(std::string* card_idx);
  private:
  const std::string& _internal_card_idx() const;
  void _internal_set_card_idx(const std::string& value);
  std::string* _internal_mutable_card_idx();
  public:

  // string alias = 2;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // string customer_uid = 3;
  void clear_customer_uid();
  const std::string& customer_uid() const;
  void set_customer_uid(const std::string& value);
  void set_customer_uid(std::string&& value);
  void set_customer_uid(const char* value);
  void set_customer_uid(const char* value, size_t size);
  std::string* mutable_customer_uid();
  std::string* release_customer_uid();
  void set_allocated_customer_uid(std::string* customer_uid);
  private:
  const std::string& _internal_customer_uid() const;
  void _internal_set_customer_uid(const std::string& value);
  std::string* _internal_mutable_customer_uid();
  public:

  // string pg = 4;
  void clear_pg();
  const std::string& pg() const;
  void set_pg(const std::string& value);
  void set_pg(std::string&& value);
  void set_pg(const char* value);
  void set_pg(const char* value, size_t size);
  std::string* mutable_pg();
  std::string* release_pg();
  void set_allocated_pg(std::string* pg);
  private:
  const std::string& _internal_pg() const;
  void _internal_set_pg(const std::string& value);
  std::string* _internal_mutable_pg();
  public:

  // string expiry = 5;
  void clear_expiry();
  const std::string& expiry() const;
  void set_expiry(const std::string& value);
  void set_expiry(std::string&& value);
  void set_expiry(const char* value);
  void set_expiry(const char* value, size_t size);
  std::string* mutable_expiry();
  std::string* release_expiry();
  void set_allocated_expiry(std::string* expiry);
  private:
  const std::string& _internal_expiry() const;
  void _internal_set_expiry(const std::string& value);
  std::string* _internal_mutable_expiry();
  public:

  // string birth = 6;
  void clear_birth();
  const std::string& birth() const;
  void set_birth(const std::string& value);
  void set_birth(std::string&& value);
  void set_birth(const char* value);
  void set_birth(const char* value, size_t size);
  std::string* mutable_birth();
  std::string* release_birth();
  void set_allocated_birth(std::string* birth);
  private:
  const std::string& _internal_birth() const;
  void _internal_set_birth(const std::string& value);
  std::string* _internal_mutable_birth();
  public:

  // string pwd_2digit = 7;
  void clear_pwd_2digit();
  const std::string& pwd_2digit() const;
  void set_pwd_2digit(const std::string& value);
  void set_pwd_2digit(std::string&& value);
  void set_pwd_2digit(const char* value);
  void set_pwd_2digit(const char* value, size_t size);
  std::string* mutable_pwd_2digit();
  std::string* release_pwd_2digit();
  void set_allocated_pwd_2digit(std::string* pwd_2digit);
  private:
  const std::string& _internal_pwd_2digit() const;
  void _internal_set_pwd_2digit(const std::string& value);
  std::string* _internal_mutable_pwd_2digit();
  public:

  // string customer_name = 8;
  void clear_customer_name();
  const std::string& customer_name() const;
  void set_customer_name(const std::string& value);
  void set_customer_name(std::string&& value);
  void set_customer_name(const char* value);
  void set_customer_name(const char* value, size_t size);
  std::string* mutable_customer_name();
  std::string* release_customer_name();
  void set_allocated_customer_name(std::string* customer_name);
  private:
  const std::string& _internal_customer_name() const;
  void _internal_set_customer_name(const std::string& value);
  std::string* _internal_mutable_customer_name();
  public:

  // string customer_tel = 9;
  void clear_customer_tel();
  const std::string& customer_tel() const;
  void set_customer_tel(const std::string& value);
  void set_customer_tel(std::string&& value);
  void set_customer_tel(const char* value);
  void set_customer_tel(const char* value, size_t size);
  std::string* mutable_customer_tel();
  std::string* release_customer_tel();
  void set_allocated_customer_tel(std::string* customer_tel);
  private:
  const std::string& _internal_customer_tel() const;
  void _internal_set_customer_tel(const std::string& value);
  std::string* _internal_mutable_customer_tel();
  public:

  // string customer_email = 10;
  void clear_customer_email();
  const std::string& customer_email() const;
  void set_customer_email(const std::string& value);
  void set_customer_email(std::string&& value);
  void set_customer_email(const char* value);
  void set_customer_email(const char* value, size_t size);
  std::string* mutable_customer_email();
  std::string* release_customer_email();
  void set_allocated_customer_email(std::string* customer_email);
  private:
  const std::string& _internal_customer_email() const;
  void _internal_set_customer_email(const std::string& value);
  std::string* _internal_mutable_customer_email();
  public:

  // string customer_addr = 11;
  void clear_customer_addr();
  const std::string& customer_addr() const;
  void set_customer_addr(const std::string& value);
  void set_customer_addr(std::string&& value);
  void set_customer_addr(const char* value);
  void set_customer_addr(const char* value, size_t size);
  std::string* mutable_customer_addr();
  std::string* release_customer_addr();
  void set_allocated_customer_addr(std::string* customer_addr);
  private:
  const std::string& _internal_customer_addr() const;
  void _internal_set_customer_addr(const std::string& value);
  std::string* _internal_mutable_customer_addr();
  public:

  // string customer_postcode = 12;
  void clear_customer_postcode();
  const std::string& customer_postcode() const;
  void set_customer_postcode(const std::string& value);
  void set_customer_postcode(std::string&& value);
  void set_customer_postcode(const char* value);
  void set_customer_postcode(const char* value, size_t size);
  std::string* mutable_customer_postcode();
  std::string* release_customer_postcode();
  void set_allocated_customer_postcode(std::string* customer_postcode);
  private:
  const std::string& _internal_customer_postcode() const;
  void _internal_set_customer_postcode(const std::string& value);
  std::string* _internal_mutable_customer_postcode();
  public:

  // @@protoc_insertion_point(class_scope:card_custompay.CardRegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_idx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expiry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr birth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_2digit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_postcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class CardRegisterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_custompay.CardRegisterResponse) */ {
 public:
  inline CardRegisterResponse() : CardRegisterResponse(nullptr) {}
  virtual ~CardRegisterResponse();

  CardRegisterResponse(const CardRegisterResponse& from);
  CardRegisterResponse(CardRegisterResponse&& from) noexcept
    : CardRegisterResponse() {
    *this = ::std::move(from);
  }

  inline CardRegisterResponse& operator=(const CardRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardRegisterResponse& operator=(CardRegisterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardRegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const CardRegisterResponse*>(
               &_CardRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CardRegisterResponse& a, CardRegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CardRegisterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardRegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardRegisterResponse* New() const final {
    return CreateMaybeMessage<CardRegisterResponse>(nullptr);
  }

  CardRegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardRegisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardRegisterResponse& from);
  void MergeFrom(const CardRegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardRegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_custompay.CardRegisterResponse";
  }
  protected:
  explicit CardRegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto);
    return ::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .card_custompay.CardIdx response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::card_custompay::CardIdx& response() const;
  ::card_custompay::CardIdx* release_response();
  ::card_custompay::CardIdx* mutable_response();
  void set_allocated_response(::card_custompay::CardIdx* response);
  private:
  const ::card_custompay::CardIdx& _internal_response() const;
  ::card_custompay::CardIdx* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::card_custompay::CardIdx* response);
  ::card_custompay::CardIdx* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_custompay.CardRegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::card_custompay::CardIdx* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class CardResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_custompay.CardResponse) */ {
 public:
  inline CardResponse() : CardResponse(nullptr) {}
  virtual ~CardResponse();

  CardResponse(const CardResponse& from);
  CardResponse(CardResponse&& from) noexcept
    : CardResponse() {
    *this = ::std::move(from);
  }

  inline CardResponse& operator=(const CardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardResponse& operator=(CardResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardResponse* internal_default_instance() {
    return reinterpret_cast<const CardResponse*>(
               &_CardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CardResponse& a, CardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CardResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardResponse* New() const final {
    return CreateMaybeMessage<CardResponse>(nullptr);
  }

  CardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardResponse& from);
  void MergeFrom(const CardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_custompay.CardResponse";
  }
  protected:
  explicit CardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto);
    return ::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .card_custompay.Card response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::card_custompay::Card& response() const;
  ::card_custompay::Card* release_response();
  ::card_custompay::Card* mutable_response();
  void set_allocated_response(::card_custompay::Card* response);
  private:
  const ::card_custompay::Card& _internal_response() const;
  ::card_custompay::Card* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::card_custompay::Card* response);
  ::card_custompay::Card* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_custompay.CardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::card_custompay::Card* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class CardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_custompay.CardRequest) */ {
 public:
  inline CardRequest() : CardRequest(nullptr) {}
  virtual ~CardRequest();

  CardRequest(const CardRequest& from);
  CardRequest(CardRequest&& from) noexcept
    : CardRequest() {
    *this = ::std::move(from);
  }

  inline CardRequest& operator=(const CardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardRequest& operator=(CardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardRequest* internal_default_instance() {
    return reinterpret_cast<const CardRequest*>(
               &_CardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CardRequest& a, CardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardRequest* New() const final {
    return CreateMaybeMessage<CardRequest>(nullptr);
  }

  CardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardRequest& from);
  void MergeFrom(const CardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_custompay.CardRequest";
  }
  protected:
  explicit CardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto);
    return ::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardIdxFieldNumber = 1,
  };
  // int32 card_idx = 1;
  void clear_card_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 card_idx() const;
  void set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_idx() const;
  void _internal_set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_custompay.CardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class CardAllInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_custompay.CardAllInfoResponse) */ {
 public:
  inline CardAllInfoResponse() : CardAllInfoResponse(nullptr) {}
  virtual ~CardAllInfoResponse();

  CardAllInfoResponse(const CardAllInfoResponse& from);
  CardAllInfoResponse(CardAllInfoResponse&& from) noexcept
    : CardAllInfoResponse() {
    *this = ::std::move(from);
  }

  inline CardAllInfoResponse& operator=(const CardAllInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardAllInfoResponse& operator=(CardAllInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardAllInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardAllInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CardAllInfoResponse*>(
               &_CardAllInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CardAllInfoResponse& a, CardAllInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CardAllInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardAllInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardAllInfoResponse* New() const final {
    return CreateMaybeMessage<CardAllInfoResponse>(nullptr);
  }

  CardAllInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardAllInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardAllInfoResponse& from);
  void MergeFrom(const CardAllInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardAllInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_custompay.CardAllInfoResponse";
  }
  protected:
  explicit CardAllInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto);
    return ::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .card_custompay.Card response = 3;
  int response_size() const;
  private:
  int _internal_response_size() const;
  public:
  void clear_response();
  ::card_custompay::Card* mutable_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::card_custompay::Card >*
      mutable_response();
  private:
  const ::card_custompay::Card& _internal_response(int index) const;
  ::card_custompay::Card* _internal_add_response();
  public:
  const ::card_custompay::Card& response(int index) const;
  ::card_custompay::Card* add_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::card_custompay::Card >&
      response() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_custompay.CardAllInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::card_custompay::Card > response_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class CardEditRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_custompay.CardEditRequest) */ {
 public:
  inline CardEditRequest() : CardEditRequest(nullptr) {}
  virtual ~CardEditRequest();

  CardEditRequest(const CardEditRequest& from);
  CardEditRequest(CardEditRequest&& from) noexcept
    : CardEditRequest() {
    *this = ::std::move(from);
  }

  inline CardEditRequest& operator=(const CardEditRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardEditRequest& operator=(CardEditRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardEditRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardEditRequest* internal_default_instance() {
    return reinterpret_cast<const CardEditRequest*>(
               &_CardEditRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CardEditRequest& a, CardEditRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CardEditRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardEditRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardEditRequest* New() const final {
    return CreateMaybeMessage<CardEditRequest>(nullptr);
  }

  CardEditRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardEditRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardEditRequest& from);
  void MergeFrom(const CardEditRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardEditRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_custompay.CardEditRequest";
  }
  protected:
  explicit CardEditRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto);
    return ::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAliasFieldNumber = 2,
    kCardIdxFieldNumber = 1,
  };
  // string alias = 2;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // int32 card_idx = 1;
  void clear_card_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 card_idx() const;
  void set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_idx() const;
  void _internal_set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:card_custompay.CardEditRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class CardPayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_custompay.CardPayRequest) */ {
 public:
  inline CardPayRequest() : CardPayRequest(nullptr) {}
  virtual ~CardPayRequest();

  CardPayRequest(const CardPayRequest& from);
  CardPayRequest(CardPayRequest&& from) noexcept
    : CardPayRequest() {
    *this = ::std::move(from);
  }

  inline CardPayRequest& operator=(const CardPayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardPayRequest& operator=(CardPayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardPayRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardPayRequest* internal_default_instance() {
    return reinterpret_cast<const CardPayRequest*>(
               &_CardPayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CardPayRequest& a, CardPayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CardPayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardPayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardPayRequest* New() const final {
    return CreateMaybeMessage<CardPayRequest>(nullptr);
  }

  CardPayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardPayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardPayRequest& from);
  void MergeFrom(const CardPayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardPayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_custompay.CardPayRequest";
  }
  protected:
  explicit CardPayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto);
    return ::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardUidFieldNumber = 2,
    kMerchantUidFieldNumber = 3,
    kAmountFieldNumber = 4,
    kDutyFreeAmountFieldNumber = 5,
    kOrderNameFieldNumber = 6,
    kCustomDataFieldNumber = 9,
    kCallbackUrlFieldNumber = 10,
    kHashedPinFieldNumber = 11,
    kCardIdxFieldNumber = 1,
    kCardInstallmentFieldNumber = 7,
    kInterestFreeByMerchantFieldNumber = 8,
  };
  // string card_uid = 2;
  void clear_card_uid();
  const std::string& card_uid() const;
  void set_card_uid(const std::string& value);
  void set_card_uid(std::string&& value);
  void set_card_uid(const char* value);
  void set_card_uid(const char* value, size_t size);
  std::string* mutable_card_uid();
  std::string* release_card_uid();
  void set_allocated_card_uid(std::string* card_uid);
  private:
  const std::string& _internal_card_uid() const;
  void _internal_set_card_uid(const std::string& value);
  std::string* _internal_mutable_card_uid();
  public:

  // string merchant_uid = 3;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  void set_merchant_uid(const std::string& value);
  void set_merchant_uid(std::string&& value);
  void set_merchant_uid(const char* value);
  void set_merchant_uid(const char* value, size_t size);
  std::string* mutable_merchant_uid();
  std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // string amount = 4;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string duty_free_amount = 5;
  void clear_duty_free_amount();
  const std::string& duty_free_amount() const;
  void set_duty_free_amount(const std::string& value);
  void set_duty_free_amount(std::string&& value);
  void set_duty_free_amount(const char* value);
  void set_duty_free_amount(const char* value, size_t size);
  std::string* mutable_duty_free_amount();
  std::string* release_duty_free_amount();
  void set_allocated_duty_free_amount(std::string* duty_free_amount);
  private:
  const std::string& _internal_duty_free_amount() const;
  void _internal_set_duty_free_amount(const std::string& value);
  std::string* _internal_mutable_duty_free_amount();
  public:

  // string order_name = 6;
  void clear_order_name();
  const std::string& order_name() const;
  void set_order_name(const std::string& value);
  void set_order_name(std::string&& value);
  void set_order_name(const char* value);
  void set_order_name(const char* value, size_t size);
  std::string* mutable_order_name();
  std::string* release_order_name();
  void set_allocated_order_name(std::string* order_name);
  private:
  const std::string& _internal_order_name() const;
  void _internal_set_order_name(const std::string& value);
  std::string* _internal_mutable_order_name();
  public:

  // string custom_data = 9;
  void clear_custom_data();
  const std::string& custom_data() const;
  void set_custom_data(const std::string& value);
  void set_custom_data(std::string&& value);
  void set_custom_data(const char* value);
  void set_custom_data(const char* value, size_t size);
  std::string* mutable_custom_data();
  std::string* release_custom_data();
  void set_allocated_custom_data(std::string* custom_data);
  private:
  const std::string& _internal_custom_data() const;
  void _internal_set_custom_data(const std::string& value);
  std::string* _internal_mutable_custom_data();
  public:

  // string callback_url = 10;
  void clear_callback_url();
  const std::string& callback_url() const;
  void set_callback_url(const std::string& value);
  void set_callback_url(std::string&& value);
  void set_callback_url(const char* value);
  void set_callback_url(const char* value, size_t size);
  std::string* mutable_callback_url();
  std::string* release_callback_url();
  void set_allocated_callback_url(std::string* callback_url);
  private:
  const std::string& _internal_callback_url() const;
  void _internal_set_callback_url(const std::string& value);
  std::string* _internal_mutable_callback_url();
  public:

  // string hashed_pin = 11;
  void clear_hashed_pin();
  const std::string& hashed_pin() const;
  void set_hashed_pin(const std::string& value);
  void set_hashed_pin(std::string&& value);
  void set_hashed_pin(const char* value);
  void set_hashed_pin(const char* value, size_t size);
  std::string* mutable_hashed_pin();
  std::string* release_hashed_pin();
  void set_allocated_hashed_pin(std::string* hashed_pin);
  private:
  const std::string& _internal_hashed_pin() const;
  void _internal_set_hashed_pin(const std::string& value);
  std::string* _internal_mutable_hashed_pin();
  public:

  // int32 card_idx = 1;
  void clear_card_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 card_idx() const;
  void set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_idx() const;
  void _internal_set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 card_installment = 7;
  void clear_card_installment();
  ::PROTOBUF_NAMESPACE_ID::int32 card_installment() const;
  void set_card_installment(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_installment() const;
  void _internal_set_card_installment(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool interest_free_by_merchant = 8;
  void clear_interest_free_by_merchant();
  bool interest_free_by_merchant() const;
  void set_interest_free_by_merchant(bool value);
  private:
  bool _internal_interest_free_by_merchant() const;
  void _internal_set_interest_free_by_merchant(bool value);
  public:

  // @@protoc_insertion_point(class_scope:card_custompay.CardPayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duty_free_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callback_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashed_pin_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_installment_;
  bool interest_free_by_merchant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fcard_2fcard_2eproto;
};
// -------------------------------------------------------------------

class CardCancelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:card_custompay.CardCancelRequest) */ {
 public:
  inline CardCancelRequest() : CardCancelRequest(nullptr) {}
  virtual ~CardCancelRequest();

  CardCancelRequest(const CardCancelRequest& from);
  CardCancelRequest(CardCancelRequest&& from) noexcept
    : CardCancelRequest() {
    *this = ::std::move(from);
  }

  inline CardCancelRequest& operator=(const CardCancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardCancelRequest& operator=(CardCancelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardCancelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardCancelRequest* internal_default_instance() {
    return reinterpret_cast<const CardCancelRequest*>(
               &_CardCancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CardCancelRequest& a, CardCancelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CardCancelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardCancelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardCancelRequest* New() const final {
    return CreateMaybeMessage<CardCancelRequest>(nullptr);
  }

  CardCancelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardCancelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardCancelRequest& from);
  void MergeFrom(const CardCancelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardCancelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "card_custompay.CardCancelRequest";
  }
  protected:
  explicit CardCancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto);
    return ::descriptor_table_custompay_2fv1_2fcard_2fcard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpUidFieldNumber = 1,
    kAmountFieldNumber = 2,
    kMerchantUidFieldNumber = 3,
    kDutyFreeAmountFieldNumber = 4,
    kReasonFieldNumber = 5,
  };
  // string imp_uid = 1;
  void clear_imp_uid();
  const std::string& imp_uid() const;
  void set_imp_uid(const std::string& value);
  void set_imp_uid(std::string&& value);
  void set_imp_uid(const char* value);
  void set_imp_uid(const char* value, size_t size);
  std::string* mutable_imp_uid();
  std::string* release_imp_uid();
  void set_allocated_imp_uid(std::string* imp_uid);
  private:
  const std::string& _internal_imp_uid() const;
  void _internal_set_imp_uid(const std::string& value);
  std::string* _internal_mutable_imp_uid();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string merchant_uid = 3;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  void set_merchant_uid(const std::string& value);
  void set_merchant_uid(std::string&& value);
  void set_merchant_uid(const char* value);
  void set_merchant_uid(const char* value, size_t size);
  std::string* mutable_merchant_uid();
  std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // string duty_free_amount = 4;
  void clear_duty_free_amount();
  const std::string& duty_free_amount() const;
  void set_duty_free_amount(const std::string& value);
  void set_duty_free_amount(std::string&& value);
  void set_duty_free_amount(const char* value);
  void set_duty_free_amount(const char* value, size_t size);
  std::string* mutable_duty_free_amount();
  std::string* release_duty_free_amount();
  void set_allocated_duty_free_amount(std::string* duty_free_amount);
  private:
  const std::string& _internal_duty_free_amount() const;
  void _internal_set_duty_free_amount(const std::string& value);
  std::string* _internal_mutable_duty_free_amount();
  public:

  // string reason = 5;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // @@protoc_insertion_point(class_scope:card_custompay.CardCancelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imp_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duty_free_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custompay_2fv1_2fcard_2fcard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CardIdx

// int32 idx = 1;
inline void CardIdx::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardIdx::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardIdx::idx() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardIdx.idx)
  return _internal_idx();
}
inline void CardIdx::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
}
inline void CardIdx::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardIdx.idx)
}

// -------------------------------------------------------------------

// Card

// int32 idx = 1;
inline void Card::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Card::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Card::idx() const {
  // @@protoc_insertion_point(field_get:card_custompay.Card.idx)
  return _internal_idx();
}
inline void Card::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
}
inline void Card::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:card_custompay.Card.idx)
}

// string card_uid = 2;
inline void Card::clear_card_uid() {
  card_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Card::card_uid() const {
  // @@protoc_insertion_point(field_get:card_custompay.Card.card_uid)
  return _internal_card_uid();
}
inline void Card::set_card_uid(const std::string& value) {
  _internal_set_card_uid(value);
  // @@protoc_insertion_point(field_set:card_custompay.Card.card_uid)
}
inline std::string* Card::mutable_card_uid() {
  // @@protoc_insertion_point(field_mutable:card_custompay.Card.card_uid)
  return _internal_mutable_card_uid();
}
inline const std::string& Card::_internal_card_uid() const {
  return card_uid_.Get();
}
inline void Card::_internal_set_card_uid(const std::string& value) {
  
  card_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Card::set_card_uid(std::string&& value) {
  
  card_uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.Card.card_uid)
}
inline void Card::set_card_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  card_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.Card.card_uid)
}
inline void Card::set_card_uid(const char* value,
    size_t size) {
  
  card_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.Card.card_uid)
}
inline std::string* Card::_internal_mutable_card_uid() {
  
  return card_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Card::release_card_uid() {
  // @@protoc_insertion_point(field_release:card_custompay.Card.card_uid)
  return card_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Card::set_allocated_card_uid(std::string* card_uid) {
  if (card_uid != nullptr) {
    
  } else {
    
  }
  card_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.Card.card_uid)
}

// string bin_number = 3;
inline void Card::clear_bin_number() {
  bin_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Card::bin_number() const {
  // @@protoc_insertion_point(field_get:card_custompay.Card.bin_number)
  return _internal_bin_number();
}
inline void Card::set_bin_number(const std::string& value) {
  _internal_set_bin_number(value);
  // @@protoc_insertion_point(field_set:card_custompay.Card.bin_number)
}
inline std::string* Card::mutable_bin_number() {
  // @@protoc_insertion_point(field_mutable:card_custompay.Card.bin_number)
  return _internal_mutable_bin_number();
}
inline const std::string& Card::_internal_bin_number() const {
  return bin_number_.Get();
}
inline void Card::_internal_set_bin_number(const std::string& value) {
  
  bin_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Card::set_bin_number(std::string&& value) {
  
  bin_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.Card.bin_number)
}
inline void Card::set_bin_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bin_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.Card.bin_number)
}
inline void Card::set_bin_number(const char* value,
    size_t size) {
  
  bin_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.Card.bin_number)
}
inline std::string* Card::_internal_mutable_bin_number() {
  
  return bin_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Card::release_bin_number() {
  // @@protoc_insertion_point(field_release:card_custompay.Card.bin_number)
  return bin_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Card::set_allocated_bin_number(std::string* bin_number) {
  if (bin_number != nullptr) {
    
  } else {
    
  }
  bin_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bin_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.Card.bin_number)
}

// string provider = 4;
inline void Card::clear_provider() {
  provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Card::provider() const {
  // @@protoc_insertion_point(field_get:card_custompay.Card.provider)
  return _internal_provider();
}
inline void Card::set_provider(const std::string& value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:card_custompay.Card.provider)
}
inline std::string* Card::mutable_provider() {
  // @@protoc_insertion_point(field_mutable:card_custompay.Card.provider)
  return _internal_mutable_provider();
}
inline const std::string& Card::_internal_provider() const {
  return provider_.Get();
}
inline void Card::_internal_set_provider(const std::string& value) {
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Card::set_provider(std::string&& value) {
  
  provider_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.Card.provider)
}
inline void Card::set_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.Card.provider)
}
inline void Card::set_provider(const char* value,
    size_t size) {
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.Card.provider)
}
inline std::string* Card::_internal_mutable_provider() {
  
  return provider_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Card::release_provider() {
  // @@protoc_insertion_point(field_release:card_custompay.Card.provider)
  return provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Card::set_allocated_provider(std::string* provider) {
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.Card.provider)
}

// string alias = 5;
inline void Card::clear_alias() {
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Card::alias() const {
  // @@protoc_insertion_point(field_get:card_custompay.Card.alias)
  return _internal_alias();
}
inline void Card::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:card_custompay.Card.alias)
}
inline std::string* Card::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:card_custompay.Card.alias)
  return _internal_mutable_alias();
}
inline const std::string& Card::_internal_alias() const {
  return alias_.Get();
}
inline void Card::_internal_set_alias(const std::string& value) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Card::set_alias(std::string&& value) {
  
  alias_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.Card.alias)
}
inline void Card::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.Card.alias)
}
inline void Card::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.Card.alias)
}
inline std::string* Card::_internal_mutable_alias() {
  
  return alias_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Card::release_alias() {
  // @@protoc_insertion_point(field_release:card_custompay.Card.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Card::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.Card.alias)
}

// -------------------------------------------------------------------

// CardRegisterRequest

// string card_idx = 1;
inline void CardRegisterRequest::clear_card_idx() {
  card_idx_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardRegisterRequest::card_idx() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRegisterRequest.card_idx)
  return _internal_card_idx();
}
inline void CardRegisterRequest::set_card_idx(const std::string& value) {
  _internal_set_card_idx(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardRegisterRequest.card_idx)
}
inline std::string* CardRegisterRequest::mutable_card_idx() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardRegisterRequest.card_idx)
  return _internal_mutable_card_idx();
}
inline const std::string& CardRegisterRequest::_internal_card_idx() const {
  return card_idx_.Get();
}
inline void CardRegisterRequest::_internal_set_card_idx(const std::string& value) {
  
  card_idx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardRegisterRequest::set_card_idx(std::string&& value) {
  
  card_idx_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardRegisterRequest.card_idx)
}
inline void CardRegisterRequest::set_card_idx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  card_idx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardRegisterRequest.card_idx)
}
inline void CardRegisterRequest::set_card_idx(const char* value,
    size_t size) {
  
  card_idx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardRegisterRequest.card_idx)
}
inline std::string* CardRegisterRequest::_internal_mutable_card_idx() {
  
  return card_idx_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardRegisterRequest::release_card_idx() {
  // @@protoc_insertion_point(field_release:card_custompay.CardRegisterRequest.card_idx)
  return card_idx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardRegisterRequest::set_allocated_card_idx(std::string* card_idx) {
  if (card_idx != nullptr) {
    
  } else {
    
  }
  card_idx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_idx,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardRegisterRequest.card_idx)
}

// string alias = 2;
inline void CardRegisterRequest::clear_alias() {
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardRegisterRequest::alias() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRegisterRequest.alias)
  return _internal_alias();
}
inline void CardRegisterRequest::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardRegisterRequest.alias)
}
inline std::string* CardRegisterRequest::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardRegisterRequest.alias)
  return _internal_mutable_alias();
}
inline const std::string& CardRegisterRequest::_internal_alias() const {
  return alias_.Get();
}
inline void CardRegisterRequest::_internal_set_alias(const std::string& value) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardRegisterRequest::set_alias(std::string&& value) {
  
  alias_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardRegisterRequest.alias)
}
inline void CardRegisterRequest::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardRegisterRequest.alias)
}
inline void CardRegisterRequest::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardRegisterRequest.alias)
}
inline std::string* CardRegisterRequest::_internal_mutable_alias() {
  
  return alias_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardRegisterRequest::release_alias() {
  // @@protoc_insertion_point(field_release:card_custompay.CardRegisterRequest.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardRegisterRequest::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardRegisterRequest.alias)
}

// string customer_uid = 3;
inline void CardRegisterRequest::clear_customer_uid() {
  customer_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardRegisterRequest::customer_uid() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRegisterRequest.customer_uid)
  return _internal_customer_uid();
}
inline void CardRegisterRequest::set_customer_uid(const std::string& value) {
  _internal_set_customer_uid(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardRegisterRequest.customer_uid)
}
inline std::string* CardRegisterRequest::mutable_customer_uid() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardRegisterRequest.customer_uid)
  return _internal_mutable_customer_uid();
}
inline const std::string& CardRegisterRequest::_internal_customer_uid() const {
  return customer_uid_.Get();
}
inline void CardRegisterRequest::_internal_set_customer_uid(const std::string& value) {
  
  customer_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardRegisterRequest::set_customer_uid(std::string&& value) {
  
  customer_uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardRegisterRequest.customer_uid)
}
inline void CardRegisterRequest::set_customer_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardRegisterRequest.customer_uid)
}
inline void CardRegisterRequest::set_customer_uid(const char* value,
    size_t size) {
  
  customer_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardRegisterRequest.customer_uid)
}
inline std::string* CardRegisterRequest::_internal_mutable_customer_uid() {
  
  return customer_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardRegisterRequest::release_customer_uid() {
  // @@protoc_insertion_point(field_release:card_custompay.CardRegisterRequest.customer_uid)
  return customer_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardRegisterRequest::set_allocated_customer_uid(std::string* customer_uid) {
  if (customer_uid != nullptr) {
    
  } else {
    
  }
  customer_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardRegisterRequest.customer_uid)
}

// string pg = 4;
inline void CardRegisterRequest::clear_pg() {
  pg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardRegisterRequest::pg() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRegisterRequest.pg)
  return _internal_pg();
}
inline void CardRegisterRequest::set_pg(const std::string& value) {
  _internal_set_pg(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardRegisterRequest.pg)
}
inline std::string* CardRegisterRequest::mutable_pg() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardRegisterRequest.pg)
  return _internal_mutable_pg();
}
inline const std::string& CardRegisterRequest::_internal_pg() const {
  return pg_.Get();
}
inline void CardRegisterRequest::_internal_set_pg(const std::string& value) {
  
  pg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardRegisterRequest::set_pg(std::string&& value) {
  
  pg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardRegisterRequest.pg)
}
inline void CardRegisterRequest::set_pg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardRegisterRequest.pg)
}
inline void CardRegisterRequest::set_pg(const char* value,
    size_t size) {
  
  pg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardRegisterRequest.pg)
}
inline std::string* CardRegisterRequest::_internal_mutable_pg() {
  
  return pg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardRegisterRequest::release_pg() {
  // @@protoc_insertion_point(field_release:card_custompay.CardRegisterRequest.pg)
  return pg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardRegisterRequest::set_allocated_pg(std::string* pg) {
  if (pg != nullptr) {
    
  } else {
    
  }
  pg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardRegisterRequest.pg)
}

// string expiry = 5;
inline void CardRegisterRequest::clear_expiry() {
  expiry_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardRegisterRequest::expiry() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRegisterRequest.expiry)
  return _internal_expiry();
}
inline void CardRegisterRequest::set_expiry(const std::string& value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardRegisterRequest.expiry)
}
inline std::string* CardRegisterRequest::mutable_expiry() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardRegisterRequest.expiry)
  return _internal_mutable_expiry();
}
inline const std::string& CardRegisterRequest::_internal_expiry() const {
  return expiry_.Get();
}
inline void CardRegisterRequest::_internal_set_expiry(const std::string& value) {
  
  expiry_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardRegisterRequest::set_expiry(std::string&& value) {
  
  expiry_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardRegisterRequest.expiry)
}
inline void CardRegisterRequest::set_expiry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expiry_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardRegisterRequest.expiry)
}
inline void CardRegisterRequest::set_expiry(const char* value,
    size_t size) {
  
  expiry_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardRegisterRequest.expiry)
}
inline std::string* CardRegisterRequest::_internal_mutable_expiry() {
  
  return expiry_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardRegisterRequest::release_expiry() {
  // @@protoc_insertion_point(field_release:card_custompay.CardRegisterRequest.expiry)
  return expiry_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardRegisterRequest::set_allocated_expiry(std::string* expiry) {
  if (expiry != nullptr) {
    
  } else {
    
  }
  expiry_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expiry,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardRegisterRequest.expiry)
}

// string birth = 6;
inline void CardRegisterRequest::clear_birth() {
  birth_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardRegisterRequest::birth() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRegisterRequest.birth)
  return _internal_birth();
}
inline void CardRegisterRequest::set_birth(const std::string& value) {
  _internal_set_birth(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardRegisterRequest.birth)
}
inline std::string* CardRegisterRequest::mutable_birth() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardRegisterRequest.birth)
  return _internal_mutable_birth();
}
inline const std::string& CardRegisterRequest::_internal_birth() const {
  return birth_.Get();
}
inline void CardRegisterRequest::_internal_set_birth(const std::string& value) {
  
  birth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardRegisterRequest::set_birth(std::string&& value) {
  
  birth_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardRegisterRequest.birth)
}
inline void CardRegisterRequest::set_birth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  birth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardRegisterRequest.birth)
}
inline void CardRegisterRequest::set_birth(const char* value,
    size_t size) {
  
  birth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardRegisterRequest.birth)
}
inline std::string* CardRegisterRequest::_internal_mutable_birth() {
  
  return birth_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardRegisterRequest::release_birth() {
  // @@protoc_insertion_point(field_release:card_custompay.CardRegisterRequest.birth)
  return birth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardRegisterRequest::set_allocated_birth(std::string* birth) {
  if (birth != nullptr) {
    
  } else {
    
  }
  birth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), birth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardRegisterRequest.birth)
}

// string pwd_2digit = 7;
inline void CardRegisterRequest::clear_pwd_2digit() {
  pwd_2digit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardRegisterRequest::pwd_2digit() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRegisterRequest.pwd_2digit)
  return _internal_pwd_2digit();
}
inline void CardRegisterRequest::set_pwd_2digit(const std::string& value) {
  _internal_set_pwd_2digit(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardRegisterRequest.pwd_2digit)
}
inline std::string* CardRegisterRequest::mutable_pwd_2digit() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardRegisterRequest.pwd_2digit)
  return _internal_mutable_pwd_2digit();
}
inline const std::string& CardRegisterRequest::_internal_pwd_2digit() const {
  return pwd_2digit_.Get();
}
inline void CardRegisterRequest::_internal_set_pwd_2digit(const std::string& value) {
  
  pwd_2digit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardRegisterRequest::set_pwd_2digit(std::string&& value) {
  
  pwd_2digit_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardRegisterRequest.pwd_2digit)
}
inline void CardRegisterRequest::set_pwd_2digit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_2digit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardRegisterRequest.pwd_2digit)
}
inline void CardRegisterRequest::set_pwd_2digit(const char* value,
    size_t size) {
  
  pwd_2digit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardRegisterRequest.pwd_2digit)
}
inline std::string* CardRegisterRequest::_internal_mutable_pwd_2digit() {
  
  return pwd_2digit_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardRegisterRequest::release_pwd_2digit() {
  // @@protoc_insertion_point(field_release:card_custompay.CardRegisterRequest.pwd_2digit)
  return pwd_2digit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardRegisterRequest::set_allocated_pwd_2digit(std::string* pwd_2digit) {
  if (pwd_2digit != nullptr) {
    
  } else {
    
  }
  pwd_2digit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd_2digit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardRegisterRequest.pwd_2digit)
}

// string customer_name = 8;
inline void CardRegisterRequest::clear_customer_name() {
  customer_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardRegisterRequest::customer_name() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRegisterRequest.customer_name)
  return _internal_customer_name();
}
inline void CardRegisterRequest::set_customer_name(const std::string& value) {
  _internal_set_customer_name(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardRegisterRequest.customer_name)
}
inline std::string* CardRegisterRequest::mutable_customer_name() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardRegisterRequest.customer_name)
  return _internal_mutable_customer_name();
}
inline const std::string& CardRegisterRequest::_internal_customer_name() const {
  return customer_name_.Get();
}
inline void CardRegisterRequest::_internal_set_customer_name(const std::string& value) {
  
  customer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardRegisterRequest::set_customer_name(std::string&& value) {
  
  customer_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardRegisterRequest.customer_name)
}
inline void CardRegisterRequest::set_customer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardRegisterRequest.customer_name)
}
inline void CardRegisterRequest::set_customer_name(const char* value,
    size_t size) {
  
  customer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardRegisterRequest.customer_name)
}
inline std::string* CardRegisterRequest::_internal_mutable_customer_name() {
  
  return customer_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardRegisterRequest::release_customer_name() {
  // @@protoc_insertion_point(field_release:card_custompay.CardRegisterRequest.customer_name)
  return customer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardRegisterRequest::set_allocated_customer_name(std::string* customer_name) {
  if (customer_name != nullptr) {
    
  } else {
    
  }
  customer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardRegisterRequest.customer_name)
}

// string customer_tel = 9;
inline void CardRegisterRequest::clear_customer_tel() {
  customer_tel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardRegisterRequest::customer_tel() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRegisterRequest.customer_tel)
  return _internal_customer_tel();
}
inline void CardRegisterRequest::set_customer_tel(const std::string& value) {
  _internal_set_customer_tel(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardRegisterRequest.customer_tel)
}
inline std::string* CardRegisterRequest::mutable_customer_tel() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardRegisterRequest.customer_tel)
  return _internal_mutable_customer_tel();
}
inline const std::string& CardRegisterRequest::_internal_customer_tel() const {
  return customer_tel_.Get();
}
inline void CardRegisterRequest::_internal_set_customer_tel(const std::string& value) {
  
  customer_tel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardRegisterRequest::set_customer_tel(std::string&& value) {
  
  customer_tel_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardRegisterRequest.customer_tel)
}
inline void CardRegisterRequest::set_customer_tel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_tel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardRegisterRequest.customer_tel)
}
inline void CardRegisterRequest::set_customer_tel(const char* value,
    size_t size) {
  
  customer_tel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardRegisterRequest.customer_tel)
}
inline std::string* CardRegisterRequest::_internal_mutable_customer_tel() {
  
  return customer_tel_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardRegisterRequest::release_customer_tel() {
  // @@protoc_insertion_point(field_release:card_custompay.CardRegisterRequest.customer_tel)
  return customer_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardRegisterRequest::set_allocated_customer_tel(std::string* customer_tel) {
  if (customer_tel != nullptr) {
    
  } else {
    
  }
  customer_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_tel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardRegisterRequest.customer_tel)
}

// string customer_email = 10;
inline void CardRegisterRequest::clear_customer_email() {
  customer_email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardRegisterRequest::customer_email() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRegisterRequest.customer_email)
  return _internal_customer_email();
}
inline void CardRegisterRequest::set_customer_email(const std::string& value) {
  _internal_set_customer_email(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardRegisterRequest.customer_email)
}
inline std::string* CardRegisterRequest::mutable_customer_email() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardRegisterRequest.customer_email)
  return _internal_mutable_customer_email();
}
inline const std::string& CardRegisterRequest::_internal_customer_email() const {
  return customer_email_.Get();
}
inline void CardRegisterRequest::_internal_set_customer_email(const std::string& value) {
  
  customer_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardRegisterRequest::set_customer_email(std::string&& value) {
  
  customer_email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardRegisterRequest.customer_email)
}
inline void CardRegisterRequest::set_customer_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardRegisterRequest.customer_email)
}
inline void CardRegisterRequest::set_customer_email(const char* value,
    size_t size) {
  
  customer_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardRegisterRequest.customer_email)
}
inline std::string* CardRegisterRequest::_internal_mutable_customer_email() {
  
  return customer_email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardRegisterRequest::release_customer_email() {
  // @@protoc_insertion_point(field_release:card_custompay.CardRegisterRequest.customer_email)
  return customer_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardRegisterRequest::set_allocated_customer_email(std::string* customer_email) {
  if (customer_email != nullptr) {
    
  } else {
    
  }
  customer_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardRegisterRequest.customer_email)
}

// string customer_addr = 11;
inline void CardRegisterRequest::clear_customer_addr() {
  customer_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardRegisterRequest::customer_addr() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRegisterRequest.customer_addr)
  return _internal_customer_addr();
}
inline void CardRegisterRequest::set_customer_addr(const std::string& value) {
  _internal_set_customer_addr(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardRegisterRequest.customer_addr)
}
inline std::string* CardRegisterRequest::mutable_customer_addr() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardRegisterRequest.customer_addr)
  return _internal_mutable_customer_addr();
}
inline const std::string& CardRegisterRequest::_internal_customer_addr() const {
  return customer_addr_.Get();
}
inline void CardRegisterRequest::_internal_set_customer_addr(const std::string& value) {
  
  customer_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardRegisterRequest::set_customer_addr(std::string&& value) {
  
  customer_addr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardRegisterRequest.customer_addr)
}
inline void CardRegisterRequest::set_customer_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardRegisterRequest.customer_addr)
}
inline void CardRegisterRequest::set_customer_addr(const char* value,
    size_t size) {
  
  customer_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardRegisterRequest.customer_addr)
}
inline std::string* CardRegisterRequest::_internal_mutable_customer_addr() {
  
  return customer_addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardRegisterRequest::release_customer_addr() {
  // @@protoc_insertion_point(field_release:card_custompay.CardRegisterRequest.customer_addr)
  return customer_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardRegisterRequest::set_allocated_customer_addr(std::string* customer_addr) {
  if (customer_addr != nullptr) {
    
  } else {
    
  }
  customer_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardRegisterRequest.customer_addr)
}

// string customer_postcode = 12;
inline void CardRegisterRequest::clear_customer_postcode() {
  customer_postcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardRegisterRequest::customer_postcode() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRegisterRequest.customer_postcode)
  return _internal_customer_postcode();
}
inline void CardRegisterRequest::set_customer_postcode(const std::string& value) {
  _internal_set_customer_postcode(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardRegisterRequest.customer_postcode)
}
inline std::string* CardRegisterRequest::mutable_customer_postcode() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardRegisterRequest.customer_postcode)
  return _internal_mutable_customer_postcode();
}
inline const std::string& CardRegisterRequest::_internal_customer_postcode() const {
  return customer_postcode_.Get();
}
inline void CardRegisterRequest::_internal_set_customer_postcode(const std::string& value) {
  
  customer_postcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardRegisterRequest::set_customer_postcode(std::string&& value) {
  
  customer_postcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardRegisterRequest.customer_postcode)
}
inline void CardRegisterRequest::set_customer_postcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_postcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardRegisterRequest.customer_postcode)
}
inline void CardRegisterRequest::set_customer_postcode(const char* value,
    size_t size) {
  
  customer_postcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardRegisterRequest.customer_postcode)
}
inline std::string* CardRegisterRequest::_internal_mutable_customer_postcode() {
  
  return customer_postcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardRegisterRequest::release_customer_postcode() {
  // @@protoc_insertion_point(field_release:card_custompay.CardRegisterRequest.customer_postcode)
  return customer_postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardRegisterRequest::set_allocated_customer_postcode(std::string* customer_postcode) {
  if (customer_postcode != nullptr) {
    
  } else {
    
  }
  customer_postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_postcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardRegisterRequest.customer_postcode)
}

// -------------------------------------------------------------------

// CardRegisterResponse

// int32 code = 1;
inline void CardRegisterResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardRegisterResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardRegisterResponse::code() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRegisterResponse.code)
  return _internal_code();
}
inline void CardRegisterResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CardRegisterResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardRegisterResponse.code)
}

// string message = 2;
inline void CardRegisterResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardRegisterResponse::message() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRegisterResponse.message)
  return _internal_message();
}
inline void CardRegisterResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardRegisterResponse.message)
}
inline std::string* CardRegisterResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardRegisterResponse.message)
  return _internal_mutable_message();
}
inline const std::string& CardRegisterResponse::_internal_message() const {
  return message_.Get();
}
inline void CardRegisterResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardRegisterResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardRegisterResponse.message)
}
inline void CardRegisterResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardRegisterResponse.message)
}
inline void CardRegisterResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardRegisterResponse.message)
}
inline std::string* CardRegisterResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardRegisterResponse::release_message() {
  // @@protoc_insertion_point(field_release:card_custompay.CardRegisterResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardRegisterResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardRegisterResponse.message)
}

// .card_custompay.CardIdx response = 3;
inline bool CardRegisterResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool CardRegisterResponse::has_response() const {
  return _internal_has_response();
}
inline void CardRegisterResponse::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::card_custompay::CardIdx& CardRegisterResponse::_internal_response() const {
  const ::card_custompay::CardIdx* p = response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::card_custompay::CardIdx*>(
      &::card_custompay::_CardIdx_default_instance_);
}
inline const ::card_custompay::CardIdx& CardRegisterResponse::response() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRegisterResponse.response)
  return _internal_response();
}
inline void CardRegisterResponse::unsafe_arena_set_allocated_response(
    ::card_custompay::CardIdx* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:card_custompay.CardRegisterResponse.response)
}
inline ::card_custompay::CardIdx* CardRegisterResponse::release_response() {
  
  ::card_custompay::CardIdx* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::card_custompay::CardIdx* CardRegisterResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:card_custompay.CardRegisterResponse.response)
  
  ::card_custompay::CardIdx* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::card_custompay::CardIdx* CardRegisterResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::card_custompay::CardIdx>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::card_custompay::CardIdx* CardRegisterResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardRegisterResponse.response)
  return _internal_mutable_response();
}
inline void CardRegisterResponse::set_allocated_response(::card_custompay::CardIdx* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardRegisterResponse.response)
}

// -------------------------------------------------------------------

// CardResponse

// int32 code = 1;
inline void CardResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardResponse::code() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardResponse.code)
  return _internal_code();
}
inline void CardResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CardResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardResponse.code)
}

// string message = 2;
inline void CardResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardResponse::message() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardResponse.message)
  return _internal_message();
}
inline void CardResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardResponse.message)
}
inline std::string* CardResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardResponse.message)
  return _internal_mutable_message();
}
inline const std::string& CardResponse::_internal_message() const {
  return message_.Get();
}
inline void CardResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardResponse.message)
}
inline void CardResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardResponse.message)
}
inline void CardResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardResponse.message)
}
inline std::string* CardResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardResponse::release_message() {
  // @@protoc_insertion_point(field_release:card_custompay.CardResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardResponse.message)
}

// .card_custompay.Card response = 3;
inline bool CardResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool CardResponse::has_response() const {
  return _internal_has_response();
}
inline void CardResponse::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::card_custompay::Card& CardResponse::_internal_response() const {
  const ::card_custompay::Card* p = response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::card_custompay::Card*>(
      &::card_custompay::_Card_default_instance_);
}
inline const ::card_custompay::Card& CardResponse::response() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardResponse.response)
  return _internal_response();
}
inline void CardResponse::unsafe_arena_set_allocated_response(
    ::card_custompay::Card* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:card_custompay.CardResponse.response)
}
inline ::card_custompay::Card* CardResponse::release_response() {
  
  ::card_custompay::Card* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::card_custompay::Card* CardResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:card_custompay.CardResponse.response)
  
  ::card_custompay::Card* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::card_custompay::Card* CardResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::card_custompay::Card>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::card_custompay::Card* CardResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardResponse.response)
  return _internal_mutable_response();
}
inline void CardResponse::set_allocated_response(::card_custompay::Card* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardResponse.response)
}

// -------------------------------------------------------------------

// CardRequest

// int32 card_idx = 1;
inline void CardRequest::clear_card_idx() {
  card_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardRequest::_internal_card_idx() const {
  return card_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardRequest::card_idx() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardRequest.card_idx)
  return _internal_card_idx();
}
inline void CardRequest::_internal_set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_idx_ = value;
}
inline void CardRequest::set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_idx(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardRequest.card_idx)
}

// -------------------------------------------------------------------

// CardAllInfoResponse

// int32 code = 1;
inline void CardAllInfoResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardAllInfoResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardAllInfoResponse::code() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardAllInfoResponse.code)
  return _internal_code();
}
inline void CardAllInfoResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CardAllInfoResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardAllInfoResponse.code)
}

// string message = 2;
inline void CardAllInfoResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardAllInfoResponse::message() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardAllInfoResponse.message)
  return _internal_message();
}
inline void CardAllInfoResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardAllInfoResponse.message)
}
inline std::string* CardAllInfoResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardAllInfoResponse.message)
  return _internal_mutable_message();
}
inline const std::string& CardAllInfoResponse::_internal_message() const {
  return message_.Get();
}
inline void CardAllInfoResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardAllInfoResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardAllInfoResponse.message)
}
inline void CardAllInfoResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardAllInfoResponse.message)
}
inline void CardAllInfoResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardAllInfoResponse.message)
}
inline std::string* CardAllInfoResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardAllInfoResponse::release_message() {
  // @@protoc_insertion_point(field_release:card_custompay.CardAllInfoResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardAllInfoResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardAllInfoResponse.message)
}

// repeated .card_custompay.Card response = 3;
inline int CardAllInfoResponse::_internal_response_size() const {
  return response_.size();
}
inline int CardAllInfoResponse::response_size() const {
  return _internal_response_size();
}
inline void CardAllInfoResponse::clear_response() {
  response_.Clear();
}
inline ::card_custompay::Card* CardAllInfoResponse::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardAllInfoResponse.response)
  return response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::card_custompay::Card >*
CardAllInfoResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:card_custompay.CardAllInfoResponse.response)
  return &response_;
}
inline const ::card_custompay::Card& CardAllInfoResponse::_internal_response(int index) const {
  return response_.Get(index);
}
inline const ::card_custompay::Card& CardAllInfoResponse::response(int index) const {
  // @@protoc_insertion_point(field_get:card_custompay.CardAllInfoResponse.response)
  return _internal_response(index);
}
inline ::card_custompay::Card* CardAllInfoResponse::_internal_add_response() {
  return response_.Add();
}
inline ::card_custompay::Card* CardAllInfoResponse::add_response() {
  // @@protoc_insertion_point(field_add:card_custompay.CardAllInfoResponse.response)
  return _internal_add_response();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::card_custompay::Card >&
CardAllInfoResponse::response() const {
  // @@protoc_insertion_point(field_list:card_custompay.CardAllInfoResponse.response)
  return response_;
}

// -------------------------------------------------------------------

// CardEditRequest

// int32 card_idx = 1;
inline void CardEditRequest::clear_card_idx() {
  card_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardEditRequest::_internal_card_idx() const {
  return card_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardEditRequest::card_idx() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardEditRequest.card_idx)
  return _internal_card_idx();
}
inline void CardEditRequest::_internal_set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_idx_ = value;
}
inline void CardEditRequest::set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_idx(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardEditRequest.card_idx)
}

// string alias = 2;
inline void CardEditRequest::clear_alias() {
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardEditRequest::alias() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardEditRequest.alias)
  return _internal_alias();
}
inline void CardEditRequest::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardEditRequest.alias)
}
inline std::string* CardEditRequest::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardEditRequest.alias)
  return _internal_mutable_alias();
}
inline const std::string& CardEditRequest::_internal_alias() const {
  return alias_.Get();
}
inline void CardEditRequest::_internal_set_alias(const std::string& value) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardEditRequest::set_alias(std::string&& value) {
  
  alias_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardEditRequest.alias)
}
inline void CardEditRequest::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardEditRequest.alias)
}
inline void CardEditRequest::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardEditRequest.alias)
}
inline std::string* CardEditRequest::_internal_mutable_alias() {
  
  return alias_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardEditRequest::release_alias() {
  // @@protoc_insertion_point(field_release:card_custompay.CardEditRequest.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardEditRequest::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardEditRequest.alias)
}

// -------------------------------------------------------------------

// CardPayRequest

// int32 card_idx = 1;
inline void CardPayRequest::clear_card_idx() {
  card_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardPayRequest::_internal_card_idx() const {
  return card_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardPayRequest::card_idx() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardPayRequest.card_idx)
  return _internal_card_idx();
}
inline void CardPayRequest::_internal_set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_idx_ = value;
}
inline void CardPayRequest::set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_idx(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardPayRequest.card_idx)
}

// string card_uid = 2;
inline void CardPayRequest::clear_card_uid() {
  card_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardPayRequest::card_uid() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardPayRequest.card_uid)
  return _internal_card_uid();
}
inline void CardPayRequest::set_card_uid(const std::string& value) {
  _internal_set_card_uid(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardPayRequest.card_uid)
}
inline std::string* CardPayRequest::mutable_card_uid() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardPayRequest.card_uid)
  return _internal_mutable_card_uid();
}
inline const std::string& CardPayRequest::_internal_card_uid() const {
  return card_uid_.Get();
}
inline void CardPayRequest::_internal_set_card_uid(const std::string& value) {
  
  card_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardPayRequest::set_card_uid(std::string&& value) {
  
  card_uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardPayRequest.card_uid)
}
inline void CardPayRequest::set_card_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  card_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardPayRequest.card_uid)
}
inline void CardPayRequest::set_card_uid(const char* value,
    size_t size) {
  
  card_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardPayRequest.card_uid)
}
inline std::string* CardPayRequest::_internal_mutable_card_uid() {
  
  return card_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardPayRequest::release_card_uid() {
  // @@protoc_insertion_point(field_release:card_custompay.CardPayRequest.card_uid)
  return card_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardPayRequest::set_allocated_card_uid(std::string* card_uid) {
  if (card_uid != nullptr) {
    
  } else {
    
  }
  card_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardPayRequest.card_uid)
}

// string merchant_uid = 3;
inline void CardPayRequest::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardPayRequest::merchant_uid() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardPayRequest.merchant_uid)
  return _internal_merchant_uid();
}
inline void CardPayRequest::set_merchant_uid(const std::string& value) {
  _internal_set_merchant_uid(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardPayRequest.merchant_uid)
}
inline std::string* CardPayRequest::mutable_merchant_uid() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardPayRequest.merchant_uid)
  return _internal_mutable_merchant_uid();
}
inline const std::string& CardPayRequest::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void CardPayRequest::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardPayRequest::set_merchant_uid(std::string&& value) {
  
  merchant_uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardPayRequest.merchant_uid)
}
inline void CardPayRequest::set_merchant_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merchant_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardPayRequest.merchant_uid)
}
inline void CardPayRequest::set_merchant_uid(const char* value,
    size_t size) {
  
  merchant_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardPayRequest.merchant_uid)
}
inline std::string* CardPayRequest::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardPayRequest::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:card_custompay.CardPayRequest.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardPayRequest::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardPayRequest.merchant_uid)
}

// string amount = 4;
inline void CardPayRequest::clear_amount() {
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardPayRequest::amount() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardPayRequest.amount)
  return _internal_amount();
}
inline void CardPayRequest::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardPayRequest.amount)
}
inline std::string* CardPayRequest::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardPayRequest.amount)
  return _internal_mutable_amount();
}
inline const std::string& CardPayRequest::_internal_amount() const {
  return amount_.Get();
}
inline void CardPayRequest::_internal_set_amount(const std::string& value) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardPayRequest::set_amount(std::string&& value) {
  
  amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardPayRequest.amount)
}
inline void CardPayRequest::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardPayRequest.amount)
}
inline void CardPayRequest::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardPayRequest.amount)
}
inline std::string* CardPayRequest::_internal_mutable_amount() {
  
  return amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardPayRequest::release_amount() {
  // @@protoc_insertion_point(field_release:card_custompay.CardPayRequest.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardPayRequest::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardPayRequest.amount)
}

// string duty_free_amount = 5;
inline void CardPayRequest::clear_duty_free_amount() {
  duty_free_amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardPayRequest::duty_free_amount() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardPayRequest.duty_free_amount)
  return _internal_duty_free_amount();
}
inline void CardPayRequest::set_duty_free_amount(const std::string& value) {
  _internal_set_duty_free_amount(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardPayRequest.duty_free_amount)
}
inline std::string* CardPayRequest::mutable_duty_free_amount() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardPayRequest.duty_free_amount)
  return _internal_mutable_duty_free_amount();
}
inline const std::string& CardPayRequest::_internal_duty_free_amount() const {
  return duty_free_amount_.Get();
}
inline void CardPayRequest::_internal_set_duty_free_amount(const std::string& value) {
  
  duty_free_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardPayRequest::set_duty_free_amount(std::string&& value) {
  
  duty_free_amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardPayRequest.duty_free_amount)
}
inline void CardPayRequest::set_duty_free_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  duty_free_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardPayRequest.duty_free_amount)
}
inline void CardPayRequest::set_duty_free_amount(const char* value,
    size_t size) {
  
  duty_free_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardPayRequest.duty_free_amount)
}
inline std::string* CardPayRequest::_internal_mutable_duty_free_amount() {
  
  return duty_free_amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardPayRequest::release_duty_free_amount() {
  // @@protoc_insertion_point(field_release:card_custompay.CardPayRequest.duty_free_amount)
  return duty_free_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardPayRequest::set_allocated_duty_free_amount(std::string* duty_free_amount) {
  if (duty_free_amount != nullptr) {
    
  } else {
    
  }
  duty_free_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), duty_free_amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardPayRequest.duty_free_amount)
}

// string order_name = 6;
inline void CardPayRequest::clear_order_name() {
  order_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardPayRequest::order_name() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardPayRequest.order_name)
  return _internal_order_name();
}
inline void CardPayRequest::set_order_name(const std::string& value) {
  _internal_set_order_name(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardPayRequest.order_name)
}
inline std::string* CardPayRequest::mutable_order_name() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardPayRequest.order_name)
  return _internal_mutable_order_name();
}
inline const std::string& CardPayRequest::_internal_order_name() const {
  return order_name_.Get();
}
inline void CardPayRequest::_internal_set_order_name(const std::string& value) {
  
  order_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardPayRequest::set_order_name(std::string&& value) {
  
  order_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardPayRequest.order_name)
}
inline void CardPayRequest::set_order_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardPayRequest.order_name)
}
inline void CardPayRequest::set_order_name(const char* value,
    size_t size) {
  
  order_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardPayRequest.order_name)
}
inline std::string* CardPayRequest::_internal_mutable_order_name() {
  
  return order_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardPayRequest::release_order_name() {
  // @@protoc_insertion_point(field_release:card_custompay.CardPayRequest.order_name)
  return order_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardPayRequest::set_allocated_order_name(std::string* order_name) {
  if (order_name != nullptr) {
    
  } else {
    
  }
  order_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardPayRequest.order_name)
}

// int32 card_installment = 7;
inline void CardPayRequest::clear_card_installment() {
  card_installment_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardPayRequest::_internal_card_installment() const {
  return card_installment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardPayRequest::card_installment() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardPayRequest.card_installment)
  return _internal_card_installment();
}
inline void CardPayRequest::_internal_set_card_installment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_installment_ = value;
}
inline void CardPayRequest::set_card_installment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_installment(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardPayRequest.card_installment)
}

// bool interest_free_by_merchant = 8;
inline void CardPayRequest::clear_interest_free_by_merchant() {
  interest_free_by_merchant_ = false;
}
inline bool CardPayRequest::_internal_interest_free_by_merchant() const {
  return interest_free_by_merchant_;
}
inline bool CardPayRequest::interest_free_by_merchant() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardPayRequest.interest_free_by_merchant)
  return _internal_interest_free_by_merchant();
}
inline void CardPayRequest::_internal_set_interest_free_by_merchant(bool value) {
  
  interest_free_by_merchant_ = value;
}
inline void CardPayRequest::set_interest_free_by_merchant(bool value) {
  _internal_set_interest_free_by_merchant(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardPayRequest.interest_free_by_merchant)
}

// string custom_data = 9;
inline void CardPayRequest::clear_custom_data() {
  custom_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardPayRequest::custom_data() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardPayRequest.custom_data)
  return _internal_custom_data();
}
inline void CardPayRequest::set_custom_data(const std::string& value) {
  _internal_set_custom_data(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardPayRequest.custom_data)
}
inline std::string* CardPayRequest::mutable_custom_data() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardPayRequest.custom_data)
  return _internal_mutable_custom_data();
}
inline const std::string& CardPayRequest::_internal_custom_data() const {
  return custom_data_.Get();
}
inline void CardPayRequest::_internal_set_custom_data(const std::string& value) {
  
  custom_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardPayRequest::set_custom_data(std::string&& value) {
  
  custom_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardPayRequest.custom_data)
}
inline void CardPayRequest::set_custom_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardPayRequest.custom_data)
}
inline void CardPayRequest::set_custom_data(const char* value,
    size_t size) {
  
  custom_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardPayRequest.custom_data)
}
inline std::string* CardPayRequest::_internal_mutable_custom_data() {
  
  return custom_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardPayRequest::release_custom_data() {
  // @@protoc_insertion_point(field_release:card_custompay.CardPayRequest.custom_data)
  return custom_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardPayRequest::set_allocated_custom_data(std::string* custom_data) {
  if (custom_data != nullptr) {
    
  } else {
    
  }
  custom_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardPayRequest.custom_data)
}

// string callback_url = 10;
inline void CardPayRequest::clear_callback_url() {
  callback_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardPayRequest::callback_url() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardPayRequest.callback_url)
  return _internal_callback_url();
}
inline void CardPayRequest::set_callback_url(const std::string& value) {
  _internal_set_callback_url(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardPayRequest.callback_url)
}
inline std::string* CardPayRequest::mutable_callback_url() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardPayRequest.callback_url)
  return _internal_mutable_callback_url();
}
inline const std::string& CardPayRequest::_internal_callback_url() const {
  return callback_url_.Get();
}
inline void CardPayRequest::_internal_set_callback_url(const std::string& value) {
  
  callback_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardPayRequest::set_callback_url(std::string&& value) {
  
  callback_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardPayRequest.callback_url)
}
inline void CardPayRequest::set_callback_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  callback_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardPayRequest.callback_url)
}
inline void CardPayRequest::set_callback_url(const char* value,
    size_t size) {
  
  callback_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardPayRequest.callback_url)
}
inline std::string* CardPayRequest::_internal_mutable_callback_url() {
  
  return callback_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardPayRequest::release_callback_url() {
  // @@protoc_insertion_point(field_release:card_custompay.CardPayRequest.callback_url)
  return callback_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardPayRequest::set_allocated_callback_url(std::string* callback_url) {
  if (callback_url != nullptr) {
    
  } else {
    
  }
  callback_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callback_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardPayRequest.callback_url)
}

// string hashed_pin = 11;
inline void CardPayRequest::clear_hashed_pin() {
  hashed_pin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardPayRequest::hashed_pin() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardPayRequest.hashed_pin)
  return _internal_hashed_pin();
}
inline void CardPayRequest::set_hashed_pin(const std::string& value) {
  _internal_set_hashed_pin(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardPayRequest.hashed_pin)
}
inline std::string* CardPayRequest::mutable_hashed_pin() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardPayRequest.hashed_pin)
  return _internal_mutable_hashed_pin();
}
inline const std::string& CardPayRequest::_internal_hashed_pin() const {
  return hashed_pin_.Get();
}
inline void CardPayRequest::_internal_set_hashed_pin(const std::string& value) {
  
  hashed_pin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardPayRequest::set_hashed_pin(std::string&& value) {
  
  hashed_pin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardPayRequest.hashed_pin)
}
inline void CardPayRequest::set_hashed_pin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hashed_pin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardPayRequest.hashed_pin)
}
inline void CardPayRequest::set_hashed_pin(const char* value,
    size_t size) {
  
  hashed_pin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardPayRequest.hashed_pin)
}
inline std::string* CardPayRequest::_internal_mutable_hashed_pin() {
  
  return hashed_pin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardPayRequest::release_hashed_pin() {
  // @@protoc_insertion_point(field_release:card_custompay.CardPayRequest.hashed_pin)
  return hashed_pin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardPayRequest::set_allocated_hashed_pin(std::string* hashed_pin) {
  if (hashed_pin != nullptr) {
    
  } else {
    
  }
  hashed_pin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hashed_pin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardPayRequest.hashed_pin)
}

// -------------------------------------------------------------------

// CardCancelRequest

// string imp_uid = 1;
inline void CardCancelRequest::clear_imp_uid() {
  imp_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardCancelRequest::imp_uid() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardCancelRequest.imp_uid)
  return _internal_imp_uid();
}
inline void CardCancelRequest::set_imp_uid(const std::string& value) {
  _internal_set_imp_uid(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardCancelRequest.imp_uid)
}
inline std::string* CardCancelRequest::mutable_imp_uid() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardCancelRequest.imp_uid)
  return _internal_mutable_imp_uid();
}
inline const std::string& CardCancelRequest::_internal_imp_uid() const {
  return imp_uid_.Get();
}
inline void CardCancelRequest::_internal_set_imp_uid(const std::string& value) {
  
  imp_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardCancelRequest::set_imp_uid(std::string&& value) {
  
  imp_uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardCancelRequest.imp_uid)
}
inline void CardCancelRequest::set_imp_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imp_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardCancelRequest.imp_uid)
}
inline void CardCancelRequest::set_imp_uid(const char* value,
    size_t size) {
  
  imp_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardCancelRequest.imp_uid)
}
inline std::string* CardCancelRequest::_internal_mutable_imp_uid() {
  
  return imp_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardCancelRequest::release_imp_uid() {
  // @@protoc_insertion_point(field_release:card_custompay.CardCancelRequest.imp_uid)
  return imp_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardCancelRequest::set_allocated_imp_uid(std::string* imp_uid) {
  if (imp_uid != nullptr) {
    
  } else {
    
  }
  imp_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imp_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardCancelRequest.imp_uid)
}

// string amount = 2;
inline void CardCancelRequest::clear_amount() {
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardCancelRequest::amount() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardCancelRequest.amount)
  return _internal_amount();
}
inline void CardCancelRequest::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardCancelRequest.amount)
}
inline std::string* CardCancelRequest::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardCancelRequest.amount)
  return _internal_mutable_amount();
}
inline const std::string& CardCancelRequest::_internal_amount() const {
  return amount_.Get();
}
inline void CardCancelRequest::_internal_set_amount(const std::string& value) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardCancelRequest::set_amount(std::string&& value) {
  
  amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardCancelRequest.amount)
}
inline void CardCancelRequest::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardCancelRequest.amount)
}
inline void CardCancelRequest::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardCancelRequest.amount)
}
inline std::string* CardCancelRequest::_internal_mutable_amount() {
  
  return amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardCancelRequest::release_amount() {
  // @@protoc_insertion_point(field_release:card_custompay.CardCancelRequest.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardCancelRequest::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardCancelRequest.amount)
}

// string merchant_uid = 3;
inline void CardCancelRequest::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardCancelRequest::merchant_uid() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardCancelRequest.merchant_uid)
  return _internal_merchant_uid();
}
inline void CardCancelRequest::set_merchant_uid(const std::string& value) {
  _internal_set_merchant_uid(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardCancelRequest.merchant_uid)
}
inline std::string* CardCancelRequest::mutable_merchant_uid() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardCancelRequest.merchant_uid)
  return _internal_mutable_merchant_uid();
}
inline const std::string& CardCancelRequest::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void CardCancelRequest::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardCancelRequest::set_merchant_uid(std::string&& value) {
  
  merchant_uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardCancelRequest.merchant_uid)
}
inline void CardCancelRequest::set_merchant_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merchant_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardCancelRequest.merchant_uid)
}
inline void CardCancelRequest::set_merchant_uid(const char* value,
    size_t size) {
  
  merchant_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardCancelRequest.merchant_uid)
}
inline std::string* CardCancelRequest::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardCancelRequest::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:card_custompay.CardCancelRequest.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardCancelRequest::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardCancelRequest.merchant_uid)
}

// string duty_free_amount = 4;
inline void CardCancelRequest::clear_duty_free_amount() {
  duty_free_amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardCancelRequest::duty_free_amount() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardCancelRequest.duty_free_amount)
  return _internal_duty_free_amount();
}
inline void CardCancelRequest::set_duty_free_amount(const std::string& value) {
  _internal_set_duty_free_amount(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardCancelRequest.duty_free_amount)
}
inline std::string* CardCancelRequest::mutable_duty_free_amount() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardCancelRequest.duty_free_amount)
  return _internal_mutable_duty_free_amount();
}
inline const std::string& CardCancelRequest::_internal_duty_free_amount() const {
  return duty_free_amount_.Get();
}
inline void CardCancelRequest::_internal_set_duty_free_amount(const std::string& value) {
  
  duty_free_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardCancelRequest::set_duty_free_amount(std::string&& value) {
  
  duty_free_amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardCancelRequest.duty_free_amount)
}
inline void CardCancelRequest::set_duty_free_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  duty_free_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardCancelRequest.duty_free_amount)
}
inline void CardCancelRequest::set_duty_free_amount(const char* value,
    size_t size) {
  
  duty_free_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardCancelRequest.duty_free_amount)
}
inline std::string* CardCancelRequest::_internal_mutable_duty_free_amount() {
  
  return duty_free_amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardCancelRequest::release_duty_free_amount() {
  // @@protoc_insertion_point(field_release:card_custompay.CardCancelRequest.duty_free_amount)
  return duty_free_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardCancelRequest::set_allocated_duty_free_amount(std::string* duty_free_amount) {
  if (duty_free_amount != nullptr) {
    
  } else {
    
  }
  duty_free_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), duty_free_amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardCancelRequest.duty_free_amount)
}

// string reason = 5;
inline void CardCancelRequest::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardCancelRequest::reason() const {
  // @@protoc_insertion_point(field_get:card_custompay.CardCancelRequest.reason)
  return _internal_reason();
}
inline void CardCancelRequest::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:card_custompay.CardCancelRequest.reason)
}
inline std::string* CardCancelRequest::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:card_custompay.CardCancelRequest.reason)
  return _internal_mutable_reason();
}
inline const std::string& CardCancelRequest::_internal_reason() const {
  return reason_.Get();
}
inline void CardCancelRequest::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardCancelRequest::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:card_custompay.CardCancelRequest.reason)
}
inline void CardCancelRequest::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:card_custompay.CardCancelRequest.reason)
}
inline void CardCancelRequest::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:card_custompay.CardCancelRequest.reason)
}
inline std::string* CardCancelRequest::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardCancelRequest::release_reason() {
  // @@protoc_insertion_point(field_release:card_custompay.CardCancelRequest.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardCancelRequest::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:card_custompay.CardCancelRequest.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace card_custompay

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_custompay_2fv1_2fcard_2fcard_2eproto
