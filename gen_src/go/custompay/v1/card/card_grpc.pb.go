// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package card

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	basic "github.com/iamport/interface/gen_src/go/custompay/v1/basic"
	payment "github.com/iamport/interface/gen_src/go/v1/payment"
	subscribe "github.com/iamport/interface/gen_src/go/v1/subscribe"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CardRegisterRPC(ctx context.Context, in *CardRegisterRequest, opts ...grpc.CallOption) (*CardRegisterResponse, error)
	CardAllInfoRPC(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CardAllInfoResponse, error)
	CardMainRPC(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*basic.Response, error)
	CardInfoRPC(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardResponse, error)
	CardDeleteRPC(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*basic.Response, error)
	CardEditRPC(ctx context.Context, in *CardEditRequest, opts ...grpc.CallOption) (*basic.Response, error)
	CardPayRPC(ctx context.Context, in *CardPayRequest, opts ...grpc.CallOption) (*subscribe.AgainPaymentResponse, error)
	CardCancelRPC(ctx context.Context, in *CardCancelRequest, opts ...grpc.CallOption) (*payment.PaymentCancelResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CardRegisterRPC(ctx context.Context, in *CardRegisterRequest, opts ...grpc.CallOption) (*CardRegisterResponse, error) {
	out := new(CardRegisterResponse)
	err := c.cc.Invoke(ctx, "/card_custompay.UserService/CardRegisterRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CardAllInfoRPC(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CardAllInfoResponse, error) {
	out := new(CardAllInfoResponse)
	err := c.cc.Invoke(ctx, "/card_custompay.UserService/CardAllInfoRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CardMainRPC(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*basic.Response, error) {
	out := new(basic.Response)
	err := c.cc.Invoke(ctx, "/card_custompay.UserService/CardMainRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CardInfoRPC(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardResponse, error) {
	out := new(CardResponse)
	err := c.cc.Invoke(ctx, "/card_custompay.UserService/CardInfoRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CardDeleteRPC(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*basic.Response, error) {
	out := new(basic.Response)
	err := c.cc.Invoke(ctx, "/card_custompay.UserService/CardDeleteRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CardEditRPC(ctx context.Context, in *CardEditRequest, opts ...grpc.CallOption) (*basic.Response, error) {
	out := new(basic.Response)
	err := c.cc.Invoke(ctx, "/card_custompay.UserService/CardEditRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CardPayRPC(ctx context.Context, in *CardPayRequest, opts ...grpc.CallOption) (*subscribe.AgainPaymentResponse, error) {
	out := new(subscribe.AgainPaymentResponse)
	err := c.cc.Invoke(ctx, "/card_custompay.UserService/CardPayRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CardCancelRPC(ctx context.Context, in *CardCancelRequest, opts ...grpc.CallOption) (*payment.PaymentCancelResponse, error) {
	out := new(payment.PaymentCancelResponse)
	err := c.cc.Invoke(ctx, "/card_custompay.UserService/CardCancelRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CardRegisterRPC(context.Context, *CardRegisterRequest) (*CardRegisterResponse, error)
	CardAllInfoRPC(context.Context, *empty.Empty) (*CardAllInfoResponse, error)
	CardMainRPC(context.Context, *CardRequest) (*basic.Response, error)
	CardInfoRPC(context.Context, *CardRequest) (*CardResponse, error)
	CardDeleteRPC(context.Context, *CardRequest) (*basic.Response, error)
	CardEditRPC(context.Context, *CardEditRequest) (*basic.Response, error)
	CardPayRPC(context.Context, *CardPayRequest) (*subscribe.AgainPaymentResponse, error)
	CardCancelRPC(context.Context, *CardCancelRequest) (*payment.PaymentCancelResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CardRegisterRPC(context.Context, *CardRegisterRequest) (*CardRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardRegisterRPC not implemented")
}
func (UnimplementedUserServiceServer) CardAllInfoRPC(context.Context, *empty.Empty) (*CardAllInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardAllInfoRPC not implemented")
}
func (UnimplementedUserServiceServer) CardMainRPC(context.Context, *CardRequest) (*basic.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardMainRPC not implemented")
}
func (UnimplementedUserServiceServer) CardInfoRPC(context.Context, *CardRequest) (*CardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardInfoRPC not implemented")
}
func (UnimplementedUserServiceServer) CardDeleteRPC(context.Context, *CardRequest) (*basic.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardDeleteRPC not implemented")
}
func (UnimplementedUserServiceServer) CardEditRPC(context.Context, *CardEditRequest) (*basic.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardEditRPC not implemented")
}
func (UnimplementedUserServiceServer) CardPayRPC(context.Context, *CardPayRequest) (*subscribe.AgainPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardPayRPC not implemented")
}
func (UnimplementedUserServiceServer) CardCancelRPC(context.Context, *CardCancelRequest) (*payment.PaymentCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardCancelRPC not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_CardRegisterRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CardRegisterRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_custompay.UserService/CardRegisterRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CardRegisterRPC(ctx, req.(*CardRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CardAllInfoRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CardAllInfoRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_custompay.UserService/CardAllInfoRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CardAllInfoRPC(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CardMainRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CardMainRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_custompay.UserService/CardMainRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CardMainRPC(ctx, req.(*CardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CardInfoRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CardInfoRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_custompay.UserService/CardInfoRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CardInfoRPC(ctx, req.(*CardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CardDeleteRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CardDeleteRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_custompay.UserService/CardDeleteRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CardDeleteRPC(ctx, req.(*CardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CardEditRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CardEditRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_custompay.UserService/CardEditRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CardEditRPC(ctx, req.(*CardEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CardPayRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardPayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CardPayRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_custompay.UserService/CardPayRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CardPayRPC(ctx, req.(*CardPayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CardCancelRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CardCancelRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_custompay.UserService/CardCancelRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CardCancelRPC(ctx, req.(*CardCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "card_custompay.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CardRegisterRPC",
			Handler:    _UserService_CardRegisterRPC_Handler,
		},
		{
			MethodName: "CardAllInfoRPC",
			Handler:    _UserService_CardAllInfoRPC_Handler,
		},
		{
			MethodName: "CardMainRPC",
			Handler:    _UserService_CardMainRPC_Handler,
		},
		{
			MethodName: "CardInfoRPC",
			Handler:    _UserService_CardInfoRPC_Handler,
		},
		{
			MethodName: "CardDeleteRPC",
			Handler:    _UserService_CardDeleteRPC_Handler,
		},
		{
			MethodName: "CardEditRPC",
			Handler:    _UserService_CardEditRPC_Handler,
		},
		{
			MethodName: "CardPayRPC",
			Handler:    _UserService_CardPayRPC_Handler,
		},
		{
			MethodName: "CardCancelRPC",
			Handler:    _UserService_CardCancelRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "custompay/v1/card/card.proto",
}
